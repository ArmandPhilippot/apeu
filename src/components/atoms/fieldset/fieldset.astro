---
import type { HTMLAttributes } from "astro/types";
import type { Gap } from "../../../types/css";
import { getCSSVars, getSpacingVarFromGap } from "../../../utils/attributes";
import { InvalidProps, MissingSlotError } from "../../../utils/exceptions";

type Props = HTMLAttributes<"fieldset"> & {
  gap?: Gap | null | undefined;
  isBordered?: boolean | null | undefined;
  isInline?: boolean | null | undefined;
};

const {
  class: className,
  gap,
  isBordered = false,
  isInline = false,
  style = "",
  ...attrs
} = Astro.props;

if (!Astro.slots.has("legend")) throw new MissingSlotError("legend");
if (gap && !isInline)
  throw new InvalidProps("gap is only compatible with isInline");

const cssVars = getCSSVars({
  "fieldset-gap": getSpacingVarFromGap(gap),
});
---

<fieldset
  {...attrs}
  class:list={["fieldset", className]}
  {...isBordered && { "data-border": true }}
  {...isInline && { "data-inline": true }}
  style={`${cssVars}${style}`}
>
  <slot name="legend" />
  <slot />
</fieldset>

<style>
  .fieldset {
    &:where([data-border="true"]) {
      padding: var(--spacing-xs) var(--spacing-sm) var(--spacing-sm);
      border: var(--border-size-sm) solid var(--color-border);
      border-radius: var(--border-radii-md);

      & > :global(legend) {
        padding-inline: var(--spacing-xs);
      }
    }

    &:where(:not([data-border="true"])) {
      margin-inline: 0;
      padding-inline: 0;
      border: none;
    }

    &:where([data-inline="true"]) {
      display: flex;
      flex-flow: row wrap;
      align-items: center;
      gap: var(--fieldset-gap);
    }
  }
</style>
