---
import { getImage } from "astro:assets";
import faviconPng from "../../../assets/favicon.png";
import faviconSvg from "../../../assets/logo.svg";
import type { SEO } from "../../../types/data";
import { getCollectionsFeeds } from "../../../utils/feeds";
import { useI18n } from "../../../utils/i18n";

type ColorScheme =
  | "normal"
  | "light"
  | "dark"
  | "only light"
  | "light dark"
  | "dark light";

type Props = {
  addBrandToTitle?: boolean | null | undefined;
  brand: string;
  colorScheme?: ColorScheme | null | undefined;
  generator?: string | null | undefined;
  seo: SEO;
  themeColor?: string | null | undefined;
};

const {
  addBrandToTitle = false,
  brand,
  colorScheme,
  generator,
  seo,
  themeColor,
} = Astro.props;
const { locale, translate } = useI18n(Astro.currentLocale);
const appleTouchIcon = await getImage({
  src: faviconPng,
  width: 180,
  height: 180,
  format: "png",
});
const icon = await getImage({ src: faviconSvg, format: "svg" });
const feeds = await getCollectionsFeeds(locale);
---

<head>
  <meta charset="utf-8" />
  <meta
    name="viewport"
    content="width=device-width, initial-scale=1.0, viewport-fit=cover"
  />
  <title>{seo.title}{addBrandToTitle ? ` | ${brand}` : ""}</title>
  {
    seo.description ? (
      <meta name="description" content={seo.description} />
    ) : null
  }
  <meta
    name="robots"
    content={`${seo.noindex ? "noindex" : "index"}, ${
      seo.nofollow ? "nofollow" : "follow"
    }`}
  />
  <link rel="canonical" href={seo.canonical ?? Astro.url.href} />
  {
    seo.languages?.map((language) => (
      <link rel="alternate" href={language.route} hreflang={language.locale} />
    ))
  }
  {
    seo.author ? (
      <>
        <meta name="author" content={seo.author.name} />
        <link rel="author" href={seo.author.website} />
      </>
    ) : (
      <>
        <meta name="author" content={brand} />
        {Astro.site ? <link rel="author" href={Astro.site.href} /> : null}
      </>
    )
  }
  {colorScheme ? <meta name="color-scheme" content={colorScheme} /> : null}
  {themeColor ? <meta name="theme-color" content={themeColor} /> : null}
  {generator ? <meta name="generator" content={generator} /> : null}
  <link rel="icon" href="/favicon.ico" sizes="32x32" />
  <link rel="icon" type="image/svg+xml" href={icon.src} />
  <link rel="apple-touch-icon" href={appleTouchIcon.src} />
  <link rel="manifest" href="/manifest.json" />
  <link rel="sitemap" href="/sitemap-index.xml" />
  {
    Astro.site ? (
      <Fragment>
        <link
          rel="alternate"
          type="application/rss+xml"
          title={translate("feed.website.link.title")}
          href={new URL("feed.xml", Astro.site)}
        />
        {feeds.map((feed) => (
          <link
            rel="alternate"
            type="application/rss+xml"
            title={feed.label}
            href={new URL(feed.slug, Astro.site)}
          />
        ))}
      </Fragment>
    ) : null
  }
  <slot />
</head>
