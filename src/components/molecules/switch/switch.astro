---
import { Icon } from "astro-icon/components";
import type { JSX } from "astro/jsx-runtime";
import type { IconName } from "../../../types/tokens";
import Button from "../../atoms/button/button.astro";
import Label from "../../atoms/label/label.astro";

type SwitchItem = {
  icon?: IconName | null | undefined;
  iconSize?: number | undefined;
  label: string;
  value: string;
};

type Props = JSX.HTMLAttributes & {
  /**
   * Should we hide the items label?
   *
   * **Warning:** Only use this option if both items have an icon to keep the
   * switch visually understandable.
   *
   * @default false
   */
  hideItemsLabel?: boolean | null | undefined;
  /**
   * Should we hide the label visually?
   *
   * **Warning:** Only use this option if the items labels are visible.
   *
   * @default false
   */
  hideLabel?: boolean | null | undefined;
  /**
   * Should the label and the switch be inlined?
   *
   * @default false
   */
  isInline?: boolean | null | undefined;
  /**
   * The switch items.
   */
  items: readonly [SwitchItem, SwitchItem];
  /**
   * The switch label.
   */
  label: string;
  /**
   * The current value of the switch.
   */
  value: string;
};

const {
  "aria-label": ariaLabel,
  class: className,
  hideItemsLabel = false,
  hideLabel = false,
  isInline = false,
  items: [item1, item2],
  label,
  value,
  ...attrs
} = Astro.props;

if (value !== item1.value && value !== item2.value) {
  throw new Error(
    `The switch value should be the value of one of its items, received: ${value}.`
  );
}

if (hideItemsLabel && !(item1.icon && item2.icon)) {
  throw new Error(
    `The hideItemsLabel option is invalid when items do not have icons.`
  );
}

const defaultIconSize = 24;
---

<ap-switch {...attrs} class:list={["switch", className]}>
  <Label aria-label={ariaLabel} class="switch-label" data-inline={isInline}>
    {hideLabel ? null : label}
    <Button
      aria-checked={value === item2.value ? "true" : "false"}
      class="switch-btn"
      kind="neutral"
      role="switch"
      title={hideLabel ? label : null}
    >
      <span aria-hidden="true" class="switch-option">
        {hideItemsLabel ? null : item1.label}
        {
          item1.icon ? (
            <Icon
              name={item1.icon}
              size={item1.iconSize ?? defaultIconSize}
              title={hideItemsLabel ? item1.label : ""}
            />
          ) : null
        }
      </span>
      <span aria-hidden="true" class="switch-indicator"></span>
      <span aria-hidden="true" class="switch-option">
        {
          item2.icon ? (
            <Icon
              name={item2.icon}
              size={item1.iconSize ?? defaultIconSize}
              title={hideItemsLabel ? item2.label : ""}
            />
          ) : null
        }
        {hideItemsLabel ? null : item2.label}
      </span>
    </Button>
  </Label>
</ap-switch>

<style>
  .switch {
    --switch-height: calc(var(--one-px-in-rem) * 35);

    display: block;

    @media screen and (any-pointer: fine) {
      --switch-height: calc(var(--one-px-in-rem) * 30);
    }
  }

  .switch-label {
    display: flex;
    gap: var(--spacing-xs);
    width: fit-content;
    cursor: pointer;

    &:where([data-inline="true"]) {
      flex-flow: row wrap;
      align-items: center;
    }

    &:where([data-inline="false"]) {
      flex-flow: column wrap;
    }
  }

  .switch-btn {
    padding: 0;
    flex-flow: column;

    @container (width >= 320px) {
      flex-flow: row wrap;
      align-items: center;
    }
  }

  .switch-option {
    display: flex;
    flex-flow: column wrap;
    align-items: center;
    gap: var(--spacing-2xs);

    @container (width >= 320px) {
      flex-flow: row wrap;
    }
  }

  .switch-indicator {
    width: var(--switch-height);
    aspect-ratio: 1 / 2;
    box-sizing: content-box;
    position: relative;
    background: var(--color-muted);
    border: var(--border-size-sm) solid var(--color-muted-faded);
    border-radius: var(--border-radii-rounded) / 25%;
    box-shadow: inset 0 0 var(--border-size-xl) 0 var(--color-black);

    @container (width >= 320px) {
      width: unset;
      height: var(--switch-height);
      aspect-ratio: 2 / 1;
      border-radius: var(--border-radii-rounded) / 100%;
    }

    &::after {
      content: "";
      height: var(--switch-height);
      aspect-ratio: 1 / 1;
      position: absolute;
      top: 0;
      left: 0;
      background: var(--color-primary);
      border: var(--border-size-sm) solid var(--color-primary-faded);
      border-radius: var(--border-radii-rounded);
      box-shadow:
        inset 0 0 0 var(--border-size-md) var(--color-regular-light),
        var(--shadow-raised-to-top-left);
      transform: translateY(0);
      transition:
        box-shadow 0.25s ease 0s,
        transform 0.25s ease 0s;

      @container (width >= 320px) {
        transform: translateX(0);
      }
    }
  }

  :where(.switch-btn[aria-checked="true"]) .switch-indicator::after {
    box-shadow:
      inset 0 0 0 var(--border-size-md) var(--color-regular-light),
      var(--shadow-raised-to-top-right);
    transform: translateY(calc(100% + var(--border-size-sm)));

    @container (width >= 320px) {
      transform: translateX(calc(100% + var(--border-size-sm)));
    }
  }
</style>

<script>
  class APSwitch extends HTMLElement {
    #btn: HTMLButtonElement | null;

    constructor() {
      super();
      this.#btn = this.querySelector("button");
      this.updateSwitchState = this.updateSwitchState.bind(this);
    }

    connectedCallback() {
      this.#btn?.addEventListener("click", this.updateSwitchState);
    }

    disconnectedCallback() {
      this.#btn?.removeEventListener("click", this.updateSwitchState);
    }

    #toggle(isChecked: string | null) {
      if (isChecked === "true") return "false";
      return "true";
    }

    updateSwitchState() {
      if (!this.#btn) return;
      this.#btn.ariaChecked = this.#toggle(this.#btn.ariaChecked);
    }
  }

  customElements.define("ap-switch", APSwitch);
</script>
