---
import type { ComponentProps } from "astro/types";
import { Icon } from "astro-icon/components";
import { useI18n } from "../../../services/i18n";
import { useRouting } from "../../../services/routing";
import "../../../styles/global.css";
import type { SEO } from "../../../types/data";
import { CONFIG } from "../../../utils/constants";
import Copyright from "../../atoms/copyright/copyright.astro";
import Branding from "../../molecules/branding/branding.astro";
import Breadcrumb from "../../molecules/breadcrumb/breadcrumb.astro";
import SkipLink from "../../molecules/skip-link/skip-link.astro";
import PageTransitionProvider from "../../providers/page-transition-provider.astro";
import ThemeProvider from "../../providers/theme-provider.astro";
import Head from "./head.astro";

type Props = {
  breadcrumb?: ComponentProps<typeof Breadcrumb>["items"] | null | undefined;
  seo: SEO;
};

const { breadcrumb, seo } = Astro.props;
const { locale, translate } = useI18n(Astro.currentLocale);
const { routeById } = await useRouting(locale);
const homeUrl = routeById("home").path;
const isHome = Astro.url.pathname === homeUrl;
const contentsId = translate("anchor.site.content");
---

<html data-shiki="light" data-theme="light" lang={locale}>
  <Head
    addBrandToTitle={!isHome}
    brand={CONFIG.BRAND}
    colorScheme="light dark"
    seo={seo}
    themeColor="#13436c"
  >
    <Fragment slot="blocking">
      {/* These scripts are intentionally inlined to avoid FOUC. */}
      <script is:inline>
        !(function () {
          const e = localStorage.getItem("apeu-settings:theme"),
            t = "string" == typeof e ? JSON.parse(e) : void 0,
            o = window.matchMedia("(prefers-color-scheme: dark)").matches
              ? "dark"
              : "light",
            c = e && ["dark", "light"].includes(t) ? t : o;
          document.documentElement.setAttribute("data-theme", c);
        })();
      </script>
      <script is:inline>
        !(function () {
          const e = localStorage.getItem("apeu-settings:shiki"),
            t = "string" == typeof e ? JSON.parse(e) : void 0,
            o = document.documentElement.getAttribute("data-theme"),
            s = window.matchMedia("(prefers-color-scheme: dark)").matches
              ? "dark"
              : "light",
            c = e && ["dark", "light"].includes(t) ? t : o === "auto" ? s : o;
          document.documentElement.setAttribute("data-shiki", c);
        })();
      </script>
      <style is:inline>
        @layer reset, themes, tokens, base, components, layout, utils;
      </style>
    </Fragment>
    <noscript>
      <style>
        .js-only {
          /* stylelint-disable-next-line declaration-no-important */
          display: none !important;
        }
      </style>
    </noscript>
  </Head>
  <body class="site paper">
    <ThemeProvider>
      <PageTransitionProvider>
        <SkipLink to={`#${contentsId}`}>
          {translate("cta.skip.to.content")}
        </SkipLink>
        <header class="site-header">
          <h1 class="site-branding">
            <Branding brand={CONFIG.BRAND} url={homeUrl} />
          </h1>
          <nav class="site-navbar paper">Navbar</nav>
        </header>
        <div class="site-body">
          {
            breadcrumb ? (
              <nav class="site-breadcrumb">
                <Breadcrumb items={breadcrumb} />
              </nav>
            ) : null
          }
          <main class="site-main paper-dark" data-pagefind-body id={contentsId}>
            <slot />
          </main>
        </div>
        <footer class="site-footer">
          <Copyright creationYear={CONFIG.CREATION_YEAR} owner={CONFIG.BRAND} />
          <Icon
            class="site-license"
            name="cc-by-sa"
            title={translate("license.title")}
          />
        </footer>
      </PageTransitionProvider>
    </ThemeProvider>
  </body>
</html>

<style>
  @layer layout {
    .site {
      --site-col1-width: minmax(0, 1fr);

      display: grid;
      grid-template-columns: var(--site-col1-width) minmax(0, 1fr);
      grid-template-rows:
        minmax(0, auto) minmax(0, 1fr) minmax(0, auto)
        minmax(0, auto);
      min-height: 100dvh;
      accent-color: var(--color-primary);
      background: var(--color-regular);
      color: var(--color-on-regular);
      font-family: var(--font-family-regular);
      font-size: var(--font-size-md);
      line-height: var(--line-height);

      @media (--md-or-above) {
        --site-col1-width: clamp(
          calc(300 * var(--one-px-in-rem)),
          21dvi,
          calc(600 * var(--one-px-in-rem))
        );
      }

      ::selection {
        background: var(--color-primary);
        color: var(--color-on-primary);
      }
    }

    .site-header {
      grid-column: 1 / -1;
      grid-row: 1 / -1;
      display: grid;
      grid-template-columns: subgrid;
      grid-template-rows: subgrid;

      @media (--sm-or-above) {
        grid-row: 1;
      }

      @media (--md-or-above) {
        grid-column: 1;
        grid-row: 1 / 4;
      }
    }

    .site-branding {
      grid-column: 1 / -1;
      grid-row: 1;
      place-self: center;

      @media (--sm-or-above) {
        grid-column: 1;
        align-self: self-end;
      }
    }

    .site-navbar {
      grid-column: 1 / -1;
      grid-row: 4;
      position: sticky;
      bottom: 0;
      z-index: 10;
      border-block-start: var(--border-size-sm) solid var(--color-border);
      box-shadow: var(--shadow-raised-to-bottom-center);

      @media (--sm-or-above) {
        grid-column: 2;
        grid-row: 1;
        position: relative;
        border-block-start: none;
        border-inline-start: var(--border-size-sm) solid var(--color-border);
        box-shadow: none;

        /* The SVG background is no longer needed. */
        &::before {
          display: none;
        }
      }

      @media (--md-or-above) {
        grid-row: 2 / 3;
        background-color: var(--color-regular-light);
      }
    }

    .site-body {
      grid-column: 1 / -1;
      grid-row: 2;
      display: flex;
      flex-flow: column nowrap;

      @media (--md-or-above) {
        grid-column: 2;
        grid-row: 1 / 3;
        padding-inline-end: var(--spacing-md);
      }
    }

    .site-breadcrumb {
      display: flex;
      justify-content: center;
      border-block-start: var(--border-size-sm) solid var(--color-border);

      @media (--md-or-above) {
        justify-content: start;
        border-block-start: none;
      }

      @media (--prose) {
        padding-inline: clamp(var(--spacing-xs), 2cqi, var(--spacing-xl));
      }
    }

    .site-main {
      flex: 1;
      border-block: var(--border-size-sm) solid var(--color-border);
      box-shadow:
        inset 0 var(--border-size-md) var(--border-size-md)
          calc(var(--border-size-md) * -1) var(--color-shadow-inset-dark),
        inset 0 calc(var(--border-size-md) * -1) var(--border-size-md)
          calc(var(--border-size-md) * -1) var(--color-shadow-inset-dark);

      @media (--md-or-above) {
        border-inline: var(--border-size-sm) solid var(--color-border);
        border-radius: var(--border-radii-md);
        box-shadow: inset 0 0 var(--border-size-md) var(--border-size-md)
          var(--color-shadow-inset-dark);
      }

      @media (--prose) {
        padding: clamp(var(--spacing-xs), 2cqi, var(--spacing-xl));
      }
    }

    .site-footer {
      grid-column: 1 / -1;
      grid-row: 3;
      display: flex;
      flex-flow: row wrap;
      align-items: center;
      justify-content: center;
      gap: var(--spacing-3xs);
      padding: var(--spacing-md);
      font-size: var(--font-size-sm);
    }

    .site-license {
      font-size: 1.25em;
      vertical-align: text-top;
    }
  }
</style>
