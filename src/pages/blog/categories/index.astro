---
import type { ComponentProps } from "astro/types";
import { components } from "../../../components/mdx";
import CardsList from "../../../components/molecules/cards-list/cards-list.astro";
import CollectionCard from "../../../components/organisms/collection-card/collection-card.astro";
import CollectionMeta from "../../../components/organisms/collection-meta/collection-meta.astro";
import PageLayout from "../../../components/templates/page-layout/page-layout.astro";
import { queryCollection, queryEntry } from "../../../lib/astro/collections";
import { getRouteIndex } from "../../../lib/astro/route-index";
import { getWebPageGraph } from "../../../lib/schema-dts/graphs/webpage-graph";
import { getBreadcrumb } from "../../../utils/breadcrumb";
import { useI18n } from "../../../utils/i18n";

const { locale, route, translatePlural } = useI18n(Astro.currentLocale);
const { Content, ...page } = await queryEntry({
  collection: "index.pages",
  id: "blog/categories",
  locale,
});
const { entries: categories, total } = await queryCollection(
  "blog.categories",
  {
    format: "preview",
    orderBy: { key: "title", order: "ASC" },
    where: { locale },
  }
);
const routeIndex = await getRouteIndex();
const breadcrumb = getBreadcrumb({
  route: Astro.url.pathname,
  routeIndex,
});
const graphs: ComponentProps<typeof PageLayout>["graphs"] = [
  await getWebPageGraph({ ...page, breadcrumb }),
];
---

<PageLayout
  breadcrumb={breadcrumb}
  description={page.description}
  feed={`${route("blog.categories")}/feed.xml`}
  graphs={graphs}
  isIndex
  seo={page.seo}
  title={page.title}
>
  <CollectionMeta
    data={{
      total: translatePlural("meta.value.total.blog.categories", {
        count: total,
      }),
    }}
    slot="meta"
  />
  <Content components={components} slot={page.hasContent ? "body" : ""} />
  <CardsList
    isContainer
    items={categories}
    sizeMinCols="27rem"
    slot="disconnected-body"
  >
    {
      (
        { cover, meta: _meta, ...cat }: (typeof categories)[number],
        index: number
      ) => (
        <CollectionCard
          class="category-card"
          elevation="raised"
          entry={{
            ...cat,
            cover: cover
              ? {
                  ...cover,
                  loading: index > 1 ? "lazy" : "eager",
                }
              : null,
          }}
        />
      )
    }
  </CardsList>
</PageLayout>

<style>
  .category-card {
    @container body (width >= 51.3em) {
      border: var(--border-size-sm) solid var(--color-border);
    }
  }
</style>
