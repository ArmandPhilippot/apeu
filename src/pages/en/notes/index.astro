---
import type { ComponentProps } from "astro/types";
import { components } from "../../../components/mdx";
import CardsList from "../../../components/molecules/cards-list/cards-list.astro";
import CollectionCard from "../../../components/organisms/collection-card/collection-card.astro";
import CollectionMeta from "../../../components/organisms/collection-meta/collection-meta.astro";
import PageLayout from "../../../components/templates/page-layout/page-layout.astro";
import { getWebPageGraph } from "../../../lib/schema-dts/graphs/webpage-graph";
import { getBreadcrumb } from "../../../services/breadcrumb";
import { queryCollection, queryEntry } from "../../../services/collections";
import { useRouting } from "../../../services/routing";
import { useI18n } from "../../../utils/i18n";

const { locale, translate, translatePlural } = useI18n(Astro.currentLocale);
const { routeById } = await useRouting();
const { Content, ...page } = await queryEntry({
  collection: "index.pages",
  id: "notes",
  locale,
});
const { entries: notes, total } = await queryCollection("notes", {
  format: "preview",
  orderBy: { key: "publishedOn", order: "DESC" },
  where: { locale },
});
const breadcrumb = await getBreadcrumb({ route: Astro.url.pathname });
const graphs: ComponentProps<typeof PageLayout>["graphs"] = [
  await getWebPageGraph({ ...page, breadcrumb, route: Astro.url.pathname }),
];
const getCTA = (
  title: string
): ComponentProps<typeof CollectionCard>["cta"] => {
  return {
    ariaLabel: translate("cta.read.more.a11y", { title }),
    label: translate("cta.read.more"),
  };
};
---

<PageLayout
  breadcrumb={breadcrumb}
  description={page.description}
  feed={`${routeById(`${locale}/notes`)}/feed.xml`}
  graphs={graphs}
  isIndex
  seo={page.seo}
  title={page.title}
>
  <CollectionMeta
    data={{
      total: translatePlural("meta.value.total.notes", {
        count: total,
      }),
    }}
    slot="meta"
  />
  <Content components={components} slot={page.hasContent ? "body" : ""} />
  <CardsList
    isContainer
    items={notes}
    sizeMinCols="35rem"
    slot="disconnected-body"
  >
    {
      (note: (typeof notes)[number]) => (
        <CollectionCard
          class="note-card"
          cta={getCTA(note.title)}
          elevation="raised"
          entry={note}
          featuredMeta={{ icon: "notepad", key: "publishedOn" }}
        />
      )
    }
  </CardsList>
</PageLayout>

<style>
  .note-card {
    @container body (width >= 55em) {
      border: var(--border-size-sm) solid var(--color-border);
    }
  }
</style>
