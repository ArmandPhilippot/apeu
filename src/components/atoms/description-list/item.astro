---
import type { HTMLAttributes } from "astro/types";
import type { Spacing } from "../../../types/tokens";
import { getCSSVars, getSpacingVarValue } from "../../../utils/html-attributes";

type Props = HTMLAttributes<"div"> & {
  /**
   * The spacing between the last term and the first description on X-axis.
   *
   * @default undefined
   */
  colSpacing?: Spacing | null | undefined;
  /**
   * Should the terms and descriptions be inlined?
   *
   * @default false
   */
  isInline?: boolean | null | undefined;
  /**
   * The spacing between the last term and the first description on Y-axis.
   *
   * @default undefined
   */
  rowSpacing?: Spacing | null | undefined;
};

const {
  class: className,
  colSpacing,
  isInline = false,
  rowSpacing,
  style = "",
  ...attrs
} = Astro.props;
const itemVars = getCSSVars({
  "col-spacing": getSpacingVarValue(colSpacing),
  "row-spacing": getSpacingVarValue(rowSpacing),
});
---

<div
  {...attrs}
  class:list={["description-list-item", className]}
  {...isInline && { "data-inline": true }}
  style={`${itemVars}${style}`}
>
  <slot />
</div>

<style>
  .description-list-item {
    &:where([data-inline="true"]) {
      & > :global(:is(dt + dd)) {
        margin-inline-start: var(--col-spacing, 0);
      }
    }

    &:where(:not([data-inline="true"])) {
      & > :global(:is(dd + dt, dt + dd)::before) {
        display: block;
        content: "";
      }
    }

    & > :global(:is(dt + dd)::before) {
      margin-block-start: var(--row-spacing, 0);
    }
  }
</style>
