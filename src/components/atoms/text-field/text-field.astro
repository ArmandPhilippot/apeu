---
import type { HTMLAttributes } from "astro/types";

type FieldTextType =
  | "date"
  | "datetime-local"
  | "email"
  | "month"
  | "password"
  | "search"
  | "tel"
  | "text"
  | "textarea"
  | "time"
  | "url"
  | "week";

type Props = Omit<HTMLAttributes<"input" | "textarea">, "type"> & {
  type: FieldTextType;
};

const { class: className, type, ...attrs } = Astro.props;
---

{
  type === "textarea" ? (
    <textarea {...attrs} class:list={["text-field", className]} />
  ) : (
    <input {...attrs} class:list={["text-field", className]} type={type} />
  )
}

<style>
  .text-field {
    display: block;
    max-width: 100%;
    min-height: calc(var(--one-px-in-rem) * 54);
    padding: var(--spacing-2xs) var(--spacing-2xs);
    background: var(--color-regular-dark);
    border: var(--border-size-sm) solid var(--color-border);
    border-radius: var(--border-radii-md);
    box-shadow:
      var(--shadow-raised-to-top-left),
      calc(var(--one-px-in-rem) * 3) calc(var(--one-px-in-rem) * 3) 0 0
        var(--color-muted-darker);
    color: var(--color-on-regular);
    line-height: inherit;
    transition: all 0.15s linear 0s;

    @media (any-pointer: fine) {
      min-height: calc(var(--one-px-in-rem) * 48);
    }

    &:where(:is(textarea)) {
      min-height: 15cap;
    }

    &::placeholder {
      color: var(--color-muted-faded);
      opacity: 1;
    }

    &:where(:disabled, :read-only) {
      background: var(--color-muted);
      border-color: var(--color-muted-light);
    }

    &:where(:disabled) {
      cursor: not-allowed;
    }

    &:where(:focus-visible) {
      outline: var(--color-primary-lighter) solid var(--border-size-md);
      outline-offset: calc(var(--border-size-sm) * -1);
    }

    &:where(:focus-visible:read-only) {
      background: var(--color-muted-dark);
    }

    &:where(:focus-visible:not(:read-only)) {
      background: var(--color-regular-darker);
      box-shadow: none;
      transform: translateY(calc(var(--one-px-in-rem) * 3))
        translateX(calc(var(--one-px-in-rem) * 3));
    }
  }
</style>
