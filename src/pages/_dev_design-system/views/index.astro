---
import type { ComponentProps } from "astro/types";
import { globby } from "globby";
import Link from "../../../components/atoms/link/link.astro";
import ListItem from "../../../components/atoms/list/list-item.astro";
import List from "../../../components/atoms/list/list.astro";
import PageLayout from "../../../components/templates/page-layout/page-layout.astro";
import { getStoryNameFromSlug, getStoryRoute } from "../../../services/stories";
import { STORIES_EXT, STORIES_SUFFIX } from "../../../utils/constants";

const title = "Views";
const breadcrumb: ComponentProps<typeof PageLayout>["breadcrumb"] = [
  { label: "Home", url: "/" },
  { label: "Design system", url: "/design-system" },
  { label: title, url: Astro.url.href },
];
const seo: ComponentProps<typeof PageLayout>["seo"] = {
  nofollow: true,
  noindex: true,
  title: breadcrumb
    .slice(1)
    .reverse()
    .map((crumb) => crumb.label)
    .join(" | "),
};

const viewDir = "src/views/";
const storiesPaths = await globby(viewDir, {
  expandDirectories: {
    extensions: [STORIES_EXT],
  },
});
const viewsStories = storiesPaths
  .filter(
    (path) =>
      !path.includes(`/${STORIES_SUFFIX}/`) ||
      (path.includes(`/${STORIES_SUFFIX}/`) &&
        path.endsWith(`index.${STORIES_EXT}`))
  )
  .map((path) => {
    const slug = getStoryRoute(path).replace(viewDir, "views/");

    return {
      label: getStoryNameFromSlug(slug),
      slug,
    };
  });
---

<PageLayout breadcrumb={breadcrumb} seo={seo} title={title}>
  <Fragment slot="body">
    {
      viewsStories.length > 0 ? (
        <List>
          {viewsStories.map((story) => (
            <ListItem>
              <Link href={story.slug}>{story.label}</Link>
            </ListItem>
          ))}
        </List>
      ) : (
        <p>No stories available in {title}</p>
      )
    }
  </Fragment>
</PageLayout>
