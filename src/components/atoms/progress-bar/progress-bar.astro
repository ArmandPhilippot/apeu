---
import type { HTMLAttributes } from "astro/types";

type Props = HTMLAttributes<"div"> & {
  /**
   * Current value.
   */
  current?: number | null | undefined;
  /**
   * Maximal value.
   */
  max?: number | null | undefined;
};

const {
  "aria-label": ariaLabel,
  "aria-valuemax": ariaValueMax,
  "aria-valuemin": ariaValueMin,
  "aria-valuenow": ariaValueNow,
  class: className,
  current,
  max = 1,
  ...attrs
} = Astro.props;
const progressValueFallback = current ? `${current}/${max}` : null;
---

<div {...attrs} class:list={["progress-wrapper", className]}>
  <progress
    aria-label={ariaLabel}
    aria-valuemax={ariaValueMax ?? max}
    aria-valuemin={ariaValueMin ?? 0}
    aria-valuenow={ariaValueNow ?? current}
    class="progress-bar"
    max={max}
    value={current}>{progressValueFallback}</progress
  >
</div>

<style>
  .progress-wrapper {
    position: relative;
    width: 100%;
    height: var(--spacing-2xs);
    background-color: var(--color-muted-lighter);
    overflow: hidden;
  }

  .progress-bar {
    display: block;
    width: 100%;
    height: 100%;
    padding: 0;
    appearance: none;
    border: none;
    border-radius: 0;
    background-color: transparent;

    &::-webkit-progress-bar {
      background-color: transparent;
    }

    &::-webkit-progress-value {
      background-color: var(--color-primary-lighter);
    }

    &:not(:indeterminate)::-moz-progress-bar {
      background-color: var(--color-primary-lighter);
    }

    &:indeterminate::-moz-progress-bar {
      background-color: transparent;
    }
  }

  .progress-wrapper:has(.progress-bar:indeterminate)::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 30%;
    height: 100%;
    background-color: var(--color-primary);
    animation: progress-bar-move-indeterminate 1.5s linear 0s infinite both
      alternate;
  }

  @keyframes progress-bar-move-indeterminate {
    0% {
      transform: translateX(-50%);
    }

    100% {
      transform: translateX(300%);
    }
  }
</style>
