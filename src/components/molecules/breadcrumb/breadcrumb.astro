---
import type { HTMLAttributes } from "astro/types";
import type { Route } from "../../../types/data";
import NavItem from "../nav-item/nav-item.astro";
import NavList from "../nav-list/nav-list.astro";

type Props = HTMLAttributes<"nav"> & {
  isCentered?: boolean | null | undefined;
  items: Route[];
};

const { class: className, isCentered = false, items, ...attrs } = Astro.props;

const scaleToRight = {
  old: {
    name: "breadcrumb-scale-to-right",
    duration: "0.2s",
    easing: "linear",
    direction: "reverse",
  },
  new: {
    name: "breadcrumb-scale-to-right",
    duration: "0.3s",
    easing: "linear",
  },
};

const scaleToRightTransition = {
  forwards: scaleToRight,
  backwards: scaleToRight,
};
---

<nav
  {...attrs}
  class:list={["breadcrumb", className]}
  {...isCentered && { "data-centered": true }}
>
  <NavList class="breadcrumb-list" hideMarker isInline isOrdered items={items}>
    {
      ({ label, url, ...item }, index, crumbs) => {
        const isFirstItem = index === 0;
        const isLastItem = index + 1 === crumbs.length;

        return isLastItem ? (
          <span
            aria-current="page"
            class="breadcrumb-item"
            transition:animate={scaleToRightTransition}
            transition:name="breadcrumb-current"
          >
            {label}
          </span>
        ) : (
          <Fragment>
            <NavItem
              {...item}
              class="breadcrumb-item"
              href={url}
              isRounded
              transition:animate={scaleToRightTransition}
              transition:name={
                isFirstItem ? "breadcrumb-home" : `item-${index}`
              }
            >
              {label}
            </NavItem>
            <span
              aria-hidden="true"
              {...(isFirstItem
                ? {}
                : {
                    "transition:animate": scaleToRightTransition,
                  })}
            >
              &gt;
            </span>
          </Fragment>
        );
      }
    }
  </NavList>
</nav>

<style>
  .breadcrumb {
    padding-block: var(--spacing-xs);
    overflow-x: auto;
  }

  .breadcrumb-list {
    flex-wrap: nowrap;
    white-space: nowrap;
  }

  :where(.breadcrumb[data-centered="true"]) .breadcrumb-list {
    & > :global(li:first-child) {
      margin-inline-start: auto;
    }

    & > :global(li:last-child) {
      margin-inline-end: auto;
    }
  }

  .breadcrumb-list > :global(li),
  .breadcrumb-item {
    display: flex;
    flex-flow: row;
    align-items: center;
  }

  .breadcrumb-item {
    padding: var(--spacing-2xs);
    font-size: var(--font-size-sm);
    outline-offset: calc(var(--spacing-3xs) * -1);

    &:where(span) {
      color: var(--color-muted-faded);
      font-weight: var(--font-weight-bold);
    }
  }
</style>

<style is:global>
  ::view-transition-old(breadcrumb-home),
  ::view-transition-new(breadcrumb-home) {
    animation: none;
    transform: none;
    opacity: 1;
  }

  ::view-transition-old(breadcrumb-home) {
    display: none;
  }

  ::view-transition-old(breadcrumb-current),
  ::view-transition-new(breadcrumb-current),
  [id^="::view-transition-old(breadcrumb-item-"],
  [id^="::view-transition-new(breadcrumb-item-"] {
    height: 100%;
  }

  @keyframes breadcrumb-scale-to-right {
    0% {
      transform: scaleX(0);
      transform-origin: left center;
      opacity: 0;
    }

    100% {
      transform: scaleX(1);
      transform-origin: left center;
      opacity: 1;
    }
  }
</style>
