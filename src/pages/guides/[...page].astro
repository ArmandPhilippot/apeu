---
import type { GetStaticPaths } from "astro";
import type { ComponentProps } from "astro/types";
import ListItem from "../../components/atoms/list/list-item.astro";
import List from "../../components/atoms/list/list.astro";
import Pagination from "../../components/organisms/pagination/pagination.astro";
import PageLayout from "../../components/templates/page-layout/page-layout.astro";
import { queryCollection } from "../../lib/astro/collections/query-collection";
import { queryEntry } from "../../lib/astro/collections/query-entry";
import { CONFIG } from "../../utils/constants";
import { useI18n } from "../../utils/i18n";
import { renderPaginationLink } from "../../utils/pagination";

export const getStaticPaths = (async ({ paginate }) => {
  const page = await queryEntry({
    collection: "pages",
    id: "guides",
    locale: "en",
  });
  const { entries: guides } = await queryCollection("guides", {
    format: "preview",
    orderBy: { key: "publishedOn", order: "DESC" },
    where: { locale: "en" },
  });

  return paginate(guides, { pageSize: CONFIG.ITEMS_PER_PAGE }).map(
    (paginatedGuides) => {
      const { data, url, ...pagination } = paginatedGuides.props.page;
      return {
        ...paginatedGuides,
        params: {
          page: paginatedGuides.params.page
            ? `/page/${paginatedGuides.params.page}`
            : undefined,
        },
        props: {
          ...page,
          guides: data,
          pagination,
        },
      };
    },
  );
}) satisfies GetStaticPaths;

const { Content, guides, pagination, ...page } = Astro.props;
const { route, translate } = useI18n(Astro.currentLocale);
const isFirstPage = pagination.currentPage === 1;
const pageLabel = translate("page.paginated.label", {
  number: pagination.currentPage,
});

const breadcrumb: ComponentProps<typeof PageLayout>["breadcrumb"] = [
  { label: translate("page.home.title"), url: route("home") },
  { label: page.title, url: Astro.url.href },
  ...[isFirstPage ? null : { label: pageLabel, url: Astro.url.href }],
].filter((crumb) => !!crumb);

const heading: ComponentProps<typeof PageLayout>["heading"] = isFirstPage
  ? page.title
  : `${page.title} - ${pageLabel}`;

const seo: ComponentProps<typeof PageLayout>["seo"] = {
  ...page.seo,
  title: isFirstPage ? page.seo.title : `${page.seo.title} - ${pageLabel}`,
};
---

<PageLayout breadcrumb={breadcrumb} heading={heading} seo={seo}>
  <Fragment slot="body">
    <Content />
    <List>
      {guides.map((guide) => <ListItem>{guide.title}</ListItem>)}
    </List>
    {
      pagination.lastPage > 1 ? (
        <Pagination
          aria-label={translate("pagination.a11y")}
          current={pagination.currentPage}
          last={pagination.lastPage}
          renderLink={renderPaginationLink(route("guides"))}
        />
      ) : null
    }
  </Fragment>
</PageLayout>
