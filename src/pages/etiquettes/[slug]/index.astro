---
import type { GetStaticPaths } from "astro";
import type { ComponentProps } from "astro/types";
import { components } from "../../../components/mdx";
import CardsList from "../../../components/molecules/cards-list/cards-list.astro";
import CollectionCard from "../../../components/organisms/collection-card/collection-card.astro";
import CollectionMeta from "../../../components/organisms/collection-meta/collection-meta.astro";
import PageLayout from "../../../components/templates/page-layout/page-layout.astro";
import {
  queryCollection,
  queryCollections,
} from "../../../lib/astro/collections/query-collection";
import { getWebPageGraph } from "../../../lib/schema-dts/graphs/webpage-graph";
import { useI18n } from "../../../utils/i18n";

export const getStaticPaths = (async () => {
  const { entries: tags } = await queryCollection("tags", {
    where: { locale: "fr" },
  });
  return tags.map(({ slug, ...tag }) => {
    return {
      params: { slug },
      props: { ...tag },
    };
  });
}) satisfies GetStaticPaths;

const { Content, ...page } = Astro.props;
const { locale, route, translate, translatePlural } = useI18n(
  Astro.currentLocale,
);
const breadcrumb: ComponentProps<typeof PageLayout>["breadcrumb"] = [
  { label: translate("page.home.title"), url: route("home") },
  { label: translate("page.tags.title"), url: route("tags") },
  { label: page.title, url: Astro.url.href },
];
const graphs: ComponentProps<typeof PageLayout>["graphs"] = [
  await getWebPageGraph({ ...page, breadcrumb }),
];
const { entries: relatedEntries, total } = await queryCollections(
  ["blogPosts", "blogroll", "bookmarks", "guides", "notes", "projects"],
  {
    format: "preview",
    orderBy: { key: "publishedOn", order: "DESC" },
    where: { locale, tags: [page.id] },
  },
);
const getCTA = (
  entry: (typeof relatedEntries)[number],
): ComponentProps<typeof CollectionCard>["cta"] => {
  switch (entry.collection) {
    case "blogPosts":
    case "guides":
    case "notes":
      return {
        ariaLabel: translate("cta.read.more.a11y", { title: entry.title }),
        label: translate("cta.read.more"),
      };
    case "blogroll":
      return {
        ariaLabel: translate("cta.open.website.a11y"),
        isExternal: true,
        label: translate("cta.open.website"),
      };
    case "bookmarks":
      return {
        ariaLabel: translate("cta.read.more.a11y", { title: entry.title }),
        isExternal: true,
        label: translate("cta.read.more"),
      };
    case "projects":
      return {
        ariaLabel: translate("cta.discover.a11y", { title: entry.title }),
        label: translate("cta.discover"),
      };
    default:
      return null;
  }
};
---

<PageLayout
  breadcrumb={breadcrumb}
  description={page.description}
  feed={`${page.route}/feed.xml`}
  graphs={graphs}
  isIndex
  seo={page.seo}
  title={page.title}
  toc={page.headings}
>
  <CollectionMeta
    data={{
      total: translatePlural("meta.value.total.entries", {
        count: total,
      }),
    }}
    slot="meta"
  />
  <Content components={components} slot="body" />
  <CardsList
    isContainer
    items={relatedEntries}
    sizeMinCols="35rem"
    slot="disconnected-body"
  >
    {
      (entry: (typeof relatedEntries)[number]) => (
        <CollectionCard
          class="entry-card"
          cta={getCTA(entry)}
          elevation="raised"
          entry={entry}
          showCollection
        />
      )
    }
  </CardsList>
</PageLayout>

<style>
  .entry-card {
    @container body (width >= 55em) {
      border: var(--border-size-sm) solid var(--color-border);
    }
  }
</style>
