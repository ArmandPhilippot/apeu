---
import type { ComponentProps } from "astro/types";
import SearchForm from "../../components/organisms/search-form/search-form.astro";
import PageLayout from "../../components/templates/page-layout/page-layout.astro";
import { getWebPageGraph } from "../../lib/schema-dts/graphs/webpage-graph";
import { getBreadcrumb } from "../../services/breadcrumb";
import type { QueriedEntry } from "../../services/collections";
import { useRouting } from "../../services/routing";
import { CONFIG } from "../../utils/constants";

type Props = Partial<ComponentProps<typeof PageLayout>> & {
  entry: QueriedEntry<"pages">;
};

const {
  entry: { Content, hasContent, ...page },
  ...props
} = Astro.props;
const { routeById } = await useRouting(page.locale);
const breadcrumb = await getBreadcrumb({ route: Astro.url.pathname });
const graphs: ComponentProps<typeof PageLayout>["graphs"] = [
  await getWebPageGraph({ ...page, breadcrumb }),
];
---

<PageLayout
  breadcrumb={breadcrumb}
  description={page.description}
  graphs={graphs}
  headings={page.headings}
  seo={page.seo}
  title={page.title}
  {...props}
>
  <Fragment slot="body">
    {hasContent && <Content />}
    <SearchForm
      id="not-found-search"
      queryParam={CONFIG.SEARCH.QUERY_PARAM}
      resultsPage={routeById("search").url}
    />
  </Fragment>
</PageLayout>
