---
import type { ComponentProps, HTMLAttributes } from "astro/types";
import "../../../styles/global.css";
import { CONFIG } from "../../../utils/constants";
import Copyright from "../../atoms/copyright/copyright.astro";
import Head from "../../atoms/head/head.astro";
import License from "../../atoms/license/license.astro";
import BackTo from "../../molecules/back-to/back-to.astro";
import Branding from "../../molecules/branding/branding.astro";
import NavItem from "../../molecules/nav-item/nav-item.astro";
import NavList from "../../molecules/nav-list/nav-list.astro";
import SkipTo from "../../molecules/skip-to/skip-to.astro";
import Navbar from "../../organisms/navbar/navbar.astro";
import SearchForm from "../../organisms/search-form/search-form.astro";
import MainNav from "../../organisms/main-nav/main-nav.astro";

type Props = Pick<ComponentProps<typeof Head>, "seo"> &
  Omit<HTMLAttributes<"div">, "id">;

const { class: className, seo, ...attrs } = Astro.props;
const isHome = Astro.url.pathname === "/";
const mainNav = [
  { icon: "home", iconSize: 28, label: "Home", url: "/" },
] satisfies ComponentProps<typeof NavList>["items"];
const footerLinks = [
  ...(import.meta.env.DEV
    ? [{ label: "Design system", url: "/design-system" }]
    : []),
] satisfies ComponentProps<typeof NavList>["items"];
---

<html data-theme="light" lang="en" style="color-scheme: light;">
  <Head
    addBrandToTitle={!isHome}
    brand={CONFIG.BRAND}
    colorScheme="light dark"
    seo={seo}
    themeColor="#214769"
  >
    <link
      rel="preload"
      href="/fonts/Inter/Inter.woff2?v=3.18"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <slot name="head" />
    <noscript>
      <style>
        .js-only {
          display: none !important;
        }
      </style>
    </noscript>
  </Head>
  <body>
    <ap-website class="site" id="#top">
      <SkipTo anchor="#contents">Skip to contents</SkipTo>
      <header class="site-header">
        <div class="site-branding">
          <Branding brand={CONFIG.BRAND} url="/" />
        </div>
        <Navbar aria-label="Primary" class="site-navbar" id="site-navbar">
          <MainNav items={mainNav} slot="nav" />
          <SearchForm
            id="site-search"
            isInline
            queryParam={CONFIG.SEARCH.QUERY_PARAM}
            resultsPage="/search"
            slot="search"
          />
          <div slot="settings">Settings form</div>
        </Navbar>
      </header>
      <div {...attrs} class:list={["site-body", className]} id="contents">
        <slot />
      </div>
      <footer class="site-footer">
        <Copyright creationYear={CONFIG.CREATION_YEAR} owner={CONFIG.BRAND} />
        <License />
        <NavList items={footerLinks}>
          {
            ({ label, url, ...item }) => (
              <NavItem {...item} href={url}>
                {label}
              </NavItem>
            )
          }
        </NavList>
        <BackTo anchor="#top" class="site-back-to-top" label="Back to top" />
      </footer>
      <svg
        aria-hidden="true"
        width="0"
        height="0"
        viewBox="0 0 100 100"
        xmlns="http://www.w3.org/2000/svg"
      >
        <defs>
          <filter color-interpolation-filters="sRGB" id="paper-filter">
            <feTurbulence
              baseFrequency="0.020"
              numOctaves="7"
              result="noise"
              seed="3"
              type="fractalNoise"></feTurbulence>
            <feDiffuseLighting
              diffuseConstant="1.1"
              lighting-color="var(--color-regular)"
              in="noise"
              surfaceScale="0.600"
            >
              <feDistantLight azimuth="60" elevation="65"></feDistantLight>
            </feDiffuseLighting>
          </filter>
          <filter color-interpolation-filters="sRGB" id="dark-paper-filter">
            <feTurbulence
              baseFrequency="0.020"
              numOctaves="7"
              result="noise"
              seed="3"
              type="fractalNoise"></feTurbulence>
            <feDiffuseLighting
              diffuseConstant="1.2"
              lighting-color="var(--color-regular)"
              in="noise"
              surfaceScale="1.1"
            >
              <feDistantLight azimuth="40" elevation="57"></feDistantLight>
            </feDiffuseLighting>
          </filter>
        </defs>
      </svg>
    </ap-website>
  </body>
</html>

<style>
  body {
    accent-color: var(--color-primary);
    background: var(--color-regular);
    color: var(--color-on-regular);
    font-family: var(--font-family-regular);
    font-size: var(--font-size-md);
    line-height: var(--line-height);

    ::selection {
      background: var(--color-primary);
      color: var(--color-on-primary);
    }
  }

  .site {
    display: flex;
    flex-flow: column;
    min-height: 100dvh;

    @media (width >= 1024px) {
      display: grid;
      grid-template-columns: minmax(0, 20dvw) minmax(0, 1fr);
      grid-template-rows: minmax(0, 1fr) minmax(0, auto);
    }

    &::before {
      content: "";
      position: fixed;
      inset: 0;
      z-index: -1;
      clip-path: inset(0);
      pointer-events: none;
      user-select: none;

      /* Fixes a Chromium bug where the SVG filter wasn't updated when
       * switching the theme... */
      transform: translate3d(0, 0, 0);
    }
  }

  .site-header {
    display: contents;

    @media (width >= 640px) {
      display: flex;
      flex-flow: row wrap;
      gap: var(--spacing-md);
      justify-content: space-between;
      border-block-end: var(--border-size-sm) solid var(--color-border);
      box-shadow: var(--shadow-raised-to-top-center);
    }

    @media (width >= 1024px) {
      grid-column: 1;
      grid-row: 1;
      flex-flow: column;
      justify-content: start;
      padding-block-start: clamp(var(--spacing-4xs), 1.5dvh, var(--spacing-sm));
      border-block-end: none;
      box-shadow: none;
    }
  }

  .site-branding,
  .site-footer {
    display: flex;
    flex-flow: row wrap;
    align-items: center;
  }

  .site-branding {
    justify-content: center;
    padding: var(--spacing-4xs) var(--spacing-2xs);
    border-block-end: var(--border-size-sm) solid var(--color-border);

    @media (width >= 640px) {
      border-block: 0;
    }
  }

  .site-navbar {
    order: 1;
    position: sticky;
    bottom: 0;
    border-block-start: var(--border-size-sm) solid var(--color-border);
    box-shadow: var(--shadow-raised-to-bottom-center);

    &::before {
      content: "";
      position: absolute;
      inset: 0;
      z-index: -1;
      clip-path: inset(0);
      pointer-events: none;
      user-select: none;
    }

    @media (width >= 640px) {
      order: unset;
      position: relative;
      bottom: unset;
      border-block: 0;
      border-inline-start: var(--border-size-sm) solid var(--color-border);
      box-shadow: none;
    }

    @media (width >= 1024px) {
      flex: 1;
      margin-block-start: clamp(var(--spacing-2xs), 1.5dvh, var(--spacing-md));
      border-inline-start: none;
    }
  }

  .site-body {
    container: body / inline-size;
    flex: 1;

    @media (width >= 1024px) {
      grid-column: 2;
      grid-row: 1;
    }
  }

  .site-footer {
    justify-content: center;
    gap: var(--spacing-4xs);
    padding: var(--spacing-md);
    font-size: var(--font-size-sm);

    @media (width >= 1024px) {
      grid-column: 1 / -1;
      grid-row: 2;
    }
  }

  .site-back-to-top {
    position: fixed;

    /* This not ideal because the navbar height could change but setting a
       * fix height to the navbar is not ideal neither so I prefer to use a
       * "magic" number here. */
    bottom: 6.5rem;
    right: calc(1dvw + var(--spacing-sm));
    z-index: 2;

    @media (width >= 640px) {
      bottom: calc(1dvw + var(--spacing-md));
    }

    @media (width >= 640px) {
      right: calc(1dvw + var(--spacing-md));
    }
  }

  :global(:where([data-theme="light"])) {
    .site::before,
    .site-navbar::before {
      filter: url("#paper-filter");
    }
  }

  :global(:where([data-theme="dark"])) {
    .site::before,
    .site-navbar::before {
      filter: url("#dark-paper-filter");
    }
  }
</style>

<script>
  class APWebsite extends HTMLElement {
    #backToTopBtn: HTMLAnchorElement | null = null;

    constructor() {
      super();
      this.updateBackToTopBtnVisibility =
        this.updateBackToTopBtnVisibility.bind(this);
    }

    connectedCallback() {
      this.#backToTopBtn = this.querySelector("a.site-back-to-top");

      this.updateBackToTopBtnVisibility();
      window.addEventListener("scroll", this.updateBackToTopBtnVisibility);
    }

    disconnectedCallback() {
      window.removeEventListener("scroll", this.updateBackToTopBtnVisibility);
    }

    hideEl(el: HTMLElement) {
      el.style.opacity = "0";
      el.style.visibility = "hidden";
    }

    showEl(el: HTMLElement) {
      el.style.opacity = "1";
      el.style.visibility = "visible";
    }

    updateBackToTopBtnVisibility() {
      if (!this.#backToTopBtn) return;

      const breakpoint = 300;

      if (window.scrollY >= breakpoint) this.showEl(this.#backToTopBtn);
      else this.hideEl(this.#backToTopBtn);
    }
  }

  customElements.define("ap-website", APWebsite);
</script>
