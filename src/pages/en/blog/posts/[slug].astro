---
import type { GetStaticPaths } from "astro";
import type { ComponentProps } from "astro/types";
import OpenGraphArticle from "../../../../components/atoms/open-graph-article/open-graph-article.astro";
import { components } from "../../../../components/mdx";
import CollectionMeta from "../../../../components/organisms/collection-meta/collection-meta.astro";
import PageLayout from "../../../../components/templates/page-layout/page-layout.astro";
import { queryCollection } from "../../../../lib/astro/collections";
import { getRouteIndex } from "../../../../lib/astro/route-index";
import { getArticleGraph } from "../../../../lib/schema-dts/graphs/article-graph";
import { getWebPageGraph } from "../../../../lib/schema-dts/graphs/webpage-graph";
import { getBreadcrumb } from "../../../../utils/breadcrumb";

export const getStaticPaths = (async () => {
  const { entries: posts } = await queryCollection("blog.posts", {
    where: { locale: "en" },
  });

  return posts.map(({ slug, ...post }) => {
    return {
      params: { slug },
      props: { ...post },
    };
  });
}) satisfies GetStaticPaths;

const { Content, ...page } = Astro.props;
const routeIndex = await getRouteIndex();
const breadcrumb = getBreadcrumb({
  route: Astro.url.pathname,
  routeIndex,
});
const graphs: ComponentProps<typeof PageLayout>["graphs"] = [
  await getWebPageGraph({ ...page, breadcrumb }),
  await getArticleGraph(page),
];
---

<PageLayout
  breadcrumb={breadcrumb}
  cover={page.cover}
  description={page.description}
  graphs={graphs}
  seo={page.seo}
  title={page.title}
  toc={page.headings}
>
  <OpenGraphArticle
    modifiedTime={page.meta.updatedOn}
    publishedTime={page.meta.publishedOn}
    slot="open-graph"
    tags={page.meta.tags?.map((tag) => tag.title)}
  />
  <CollectionMeta data={page.meta} slot="meta" />
  <Content components={components} slot="body" />
</PageLayout>
