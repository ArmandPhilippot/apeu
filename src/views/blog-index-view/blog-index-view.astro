---
import type { ComponentProps } from "astro/types";
import { Icon } from "astro-icon/components";
import Box from "../../components/atoms/box/box.astro";
import Button from "../../components/atoms/button/button.astro";
import Heading from "../../components/atoms/heading/heading.astro";
import CardsList from "../../components/molecules/cards-list/cards-list.astro";
import CollectionCard from "../../components/organisms/collection-card/collection-card.astro";
import PageLayout from "../../components/templates/page-layout/page-layout.astro";
import { getWebPageGraph } from "../../lib/schema-dts/graphs/webpage-graph";
import { getBreadcrumb } from "../../services/breadcrumb";
import { queryCollection, type QueriedEntry } from "../../services/collections";
import { useI18n } from "../../services/i18n";
import { useRouting } from "../../services/routing";

type Props = Partial<ComponentProps<typeof PageLayout>> & {
  entry: QueriedEntry<"index.pages">;
};

const {
  entry: { Content, hasContent, ...page },
  ...props
} = Astro.props;
const { translate, translatePlural } = useI18n(page.locale);
const { routeById } = await useRouting();
const { entries: categories } = await queryCollection("blog.categories", {
  format: "preview",
  orderBy: { key: "title", order: "ASC" },
  where: { locale: page.locale },
});
const { entries: recentPosts, total: totalPosts } = await queryCollection(
  "blog.posts",
  {
    first: 2,
    format: "preview",
    orderBy: { key: "publishedOn", order: "DESC" },
    where: { locale: page.locale },
  }
);
const breadcrumb = await getBreadcrumb({ route: Astro.url.pathname });
const graphs: ComponentProps<typeof PageLayout>["graphs"] = [
  await getWebPageGraph({ ...page, breadcrumb }),
];

const getPostCTA = (
  title: string
): ComponentProps<typeof CollectionCard>["cta"] => {
  return {
    ariaLabel: translate("cta.read.more.a11y", { title }),
    label: translate("cta.read.more"),
  };
};
---

<PageLayout
  breadcrumb={breadcrumb}
  description={page.description}
  graphs={graphs}
  headings={page.headings}
  isIndex
  seo={page.seo}
  title={page.title}
  {...props}
>
  {hasContent && <Content slot={hasContent ? "body" : ""} />}
  <Fragment slot="disconnected-body">
    <Box
      class="blog-section-heading"
      elevation="raised"
      isBordered
      isCentered
      isPadded
      isProse
      isRounded
      isSpaced
    >
      <Heading>{translate("page.blog.section.recent.posts.heading")}</Heading>
      <div class="blog-section-cta">
        <Button as="a" href={routeById(`${page.locale}/blog/posts`).url}>
          {translatePlural("cta.see.all.posts", { count: totalPosts })}
        </Button>
        <Button
          aria-label={translate("cta.subscribe.a11y", {
            title: translate("page.blog.posts.title"),
          })}
          as="a"
          href={`${routeById(`${page.locale}/blog/posts`).url}/feed.xml`}
        >
          <Icon aria-hidden="true" name="feed" />
          {translate("cta.subscribe")}
        </Button>
      </div>
    </Box>
    <CardsList isContainer items={recentPosts} sizeMinCols="35rem">
      {
        (post: (typeof recentPosts)[number]) => (
          <CollectionCard
            class="post-card"
            cta={getPostCTA(post.title)}
            elevation="raised"
            entry={{
              ...post,
              cover: post.cover
                ? {
                    ...post.cover,
                    loading: "eager",
                  }
                : null,
            }}
            featuredMeta={{ icon: "blog", key: "publishedOn" }}
            headingLvl="h3"
          />
        )
      }
    </CardsList>
    <Box
      class="blog-section-heading"
      elevation="raised"
      isBordered
      isCentered
      isPadded
      isProse
      isRounded
      isSpaced
    >
      <Heading>{translate("page.blog.section.categories.heading")}</Heading>
    </Box>
    <CardsList isContainer items={categories} sizeMinCols="27rem">
      {
        ({ meta: _meta, ...cat }: (typeof categories)[number]) => (
          <CollectionCard
            class="category-card"
            elevation="raised"
            entry={cat}
            headingLvl="h3"
          />
        )
      }
    </CardsList>
  </Fragment>
</PageLayout>

<style>
  .blog-section-heading,
  .blog-section-cta {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: var(--spacing-sm) var(--spacing-md);
  }

  .blog-section-heading {
    & > :global(*:first-child) {
      margin-inline-end: auto;
    }
  }
</style>
