---
import type { GetStaticPaths } from "astro";
import type { ComponentProps } from "astro/types";
import { components } from "../../../../components/mdx";
import CardsList from "../../../../components/molecules/cards-list/cards-list.astro";
import CollectionCard from "../../../../components/organisms/collection-card/collection-card.astro";
import CollectionMeta from "../../../../components/organisms/collection-meta/collection-meta.astro";
import PageLayout from "../../../../components/templates/page-layout/page-layout.astro";
import { getWebPageGraph } from "../../../../lib/schema-dts/graphs/webpage-graph";
import { getBreadcrumb } from "../../../../services/breadcrumb";
import { queryCollection } from "../../../../services/collections";
import { useI18n } from "../../../../utils/i18n";

export const getStaticPaths = (async () => {
  const { entries: categories } = await queryCollection("blog.categories", {
    where: { locale: "fr" },
  });

  return categories.map(({ slug, ...cat }) => {
    return {
      params: { slug },
      props: { ...cat },
    };
  });
}) satisfies GetStaticPaths;

const { Content, ...page } = Astro.props;
const { translate, translatePlural } = useI18n(Astro.currentLocale);
const breadcrumb = await getBreadcrumb({
  route: Astro.url.pathname,
});
const graphs: ComponentProps<typeof PageLayout>["graphs"] = [
  await getWebPageGraph({ ...page, breadcrumb, route: Astro.url.pathname }),
];
const { entries, total: totalPosts } = await queryCollection("blog.posts", {
  orderBy: { key: "publishedOn", order: "DESC" },
  where: { categories: [page.id] },
});
const relatedPosts = entries.map(({ meta, ...post }) => {
  const { category: _cat, ...remainingMeta } = meta;
  return {
    ...post,
    meta: remainingMeta,
  };
});
const getCTA = (
  title: string
): ComponentProps<typeof CollectionCard>["cta"] => {
  return {
    ariaLabel: translate("cta.read.more.a11y", { title }),
    label: translate("cta.read.more"),
  };
};
---

<PageLayout
  breadcrumb={breadcrumb}
  cover={page.cover}
  description={page.description}
  feed={`${page.route}/feed.xml`}
  graphs={graphs}
  isIndex
  seo={page.seo}
  title={page.title}
>
  <CollectionMeta
    data={{
      total: translatePlural("meta.value.total.blog.posts", {
        count: totalPosts,
      }),
    }}
    slot="meta"
  />
  <Content components={components} slot={page.hasContent ? "body" : ""} />
  <CardsList
    isContainer
    items={relatedPosts}
    sizeMinCols="35rem"
    slot="disconnected-body"
  >
    {
      (post: (typeof relatedPosts)[number]) => (
        <CollectionCard
          class="post-card"
          cta={getCTA(post.title)}
          elevation="raised"
          entry={post}
          featuredMeta={{ icon: "blog", key: "publishedOn" }}
        />
      )
    }
  </CardsList>
</PageLayout>

<style>
  .post-card {
    @container body (width >= 55em) {
      border: var(--border-size-sm) solid var(--color-border);
    }
  }
</style>
