---
import type { HTMLAttributes } from "astro/types";
import type { Spacing } from "../../../types/tokens";
import { getCSSVars, getSpacingVarValue } from "../../../utils/attributes";

type Props = HTMLAttributes<"dl"> & {
  /**
   * The spacing between the last term and the first description or between
   * Items components when used on X-axis.
   *
   * @default undefined
   */
  colSpacing?: Spacing | null | undefined;
  /**
   * Should the items be inlined?
   *
   * @default false
   */
  isInline?: boolean | null | undefined;
  /**
   * The spacing between the last term and the first description or between
   * Items components when used on Y-axis.
   *
   * @default undefined
   */
  rowSpacing?: Spacing | null | undefined;
};

const {
  class: className,
  colSpacing,
  isInline = false,
  rowSpacing,
  style = "",
  ...attrs
} = Astro.props;
const listVars = getCSSVars({
  "col-spacing": getSpacingVarValue(colSpacing),
  "row-spacing": getSpacingVarValue(rowSpacing),
});
const content = await Astro.slots.render("default");
const trimmedContent = content
  .replaceAll(/>\s+</g, "><") // Removes whitespace between elements
  .replaceAll(/(?<=>)\s+/g, "") // Removes leading spaces after opening tag
  .replaceAll(/\s+(?=<)/g, ""); // Removes trailing spaces before closing tag
---

<dl
  {...attrs}
  class:list={["description-list", className]}
  {...isInline && { "data-inline": true }}
  set:html={trimmedContent}
  style={`${listVars}${style}`}
/>

<style>
  .description-list {
    margin: 0;

    &:where([data-inline="true"]) {
      &:has(> div) {
        display: flex;
        flex-flow: row wrap;
        gap: var(--row-spacing, 0) var(--col-spacing, 0);
      }

      & > :global(dd + dt) {
        margin-inline-start: var(--col-spacing, 0);
      }
    }

    &:where(:not([data-inline="true"])) {
      & > :global(:is(dd + dt, dt + dd)::before) {
        display: block;
        content: "";
      }

      & > :global(:is(dd + dt)::before),
      & > :global(div + div) {
        margin-block-start: var(--row-spacing, 0);
      }
    }

    & :global(:is(dt + dt, dd + dd)::before) {
      content: ", ";
    }
  }
</style>
