---
import type { ComponentProps } from "astro/types";
import { components } from "../../components/mdx";
import CardsList from "../../components/molecules/cards-list/cards-list.astro";
import CollectionCard from "../../components/organisms/collection-card/collection-card.astro";
import CollectionMeta from "../../components/organisms/collection-meta/collection-meta.astro";
import PageLayout from "../../components/templates/page-layout/page-layout.astro";
import { queryCollection } from "../../lib/astro/collections/query-collection";
import { queryEntry } from "../../lib/astro/collections/query-entry";
import { getWebPageGraph } from "../../lib/schema-dts/graphs/webpage-graph";
import { useI18n } from "../../utils/i18n";

const { locale, route, translate, translatePlural } = useI18n(
  Astro.currentLocale,
);
const { Content, ...page } = await queryEntry({
  collection: "pages",
  id: "projects",
  locale,
});
const { entries: projects, total } = await queryCollection("projects", {
  format: "preview",
  orderBy: { key: "publishedOn", order: "DESC" },
  where: { locale },
});
const breadcrumb: ComponentProps<typeof PageLayout>["breadcrumb"] = [
  { label: translate("page.home.title"), url: route("home") },
  { label: page.title, url: Astro.url.href },
];
const graphs: ComponentProps<typeof PageLayout>["graphs"] = [
  await getWebPageGraph({ ...page, breadcrumb }),
];
const getCTA = (
  title: string,
): ComponentProps<typeof CollectionCard>["cta"] => {
  return {
    ariaLabel: translate("cta.discover.a11y", { title }),
    label: translate("cta.discover"),
  };
};
---

<PageLayout
  breadcrumb={breadcrumb}
  description={page.description}
  feed={`${route("projects")}/feed.xml`}
  graphs={graphs}
  seo={page.seo}
  title={page.title}
>
  <CollectionMeta
    data={{
      total: translatePlural("meta.value.total.projects", {
        count: total,
      }),
    }}
    slot="meta"
  />
  <Content components={components} slot={page.hasContent ? "body" : ""} />
  <CardsList
    isContainer
    items={projects}
    sizeMinCols="25em"
    slot="disconnected-body"
  >
    {
      (project: (typeof projects)[number]) => (
        <CollectionCard
          class="project-card"
          cta={getCTA(project.title)}
          elevation="raised"
          entry={project}
          featuredMeta={{ icon: "project", key: "kind" }}
        />
      )
    }
  </CardsList>
</PageLayout>

<style>
  .project-card {
    @container body (width >= 51.5em) {
      border: var(--border-size-sm) solid var(--color-border);
    }
  }
</style>
