---
import type { ComponentProps } from "astro/types";
import type { AuthorPreview } from "../../../types/data";
import { useI18n } from "../../../utils/i18n";
import { toLowerCase } from "../../../utils/strings";
import DescriptionList from "../../atoms/description-list/description-list.astro";
import Item from "../../atoms/description-list/item.astro";
import Figure from "../../atoms/figure/figure.astro";
import Img from "../../atoms/img/img.astro";
import Card from "../../molecules/card/card.astro";

type Props = ComponentProps<typeof Card> & {
  author: Omit<
    AuthorPreview,
    "collection" | "id" | "isWebsiteOwner" | "socialMedia"
  >;
};

const { author, class: className, ...attrs } = Astro.props;
const { translate } = useI18n(Astro.currentLocale);
---

<Card {...attrs} class:list={["identity-card", className]}>
  <slot name="heading" slot={Astro.slots.has("heading") ? "heading" : ""} />
  {
    author.avatar ? (
      <Figure
        aria-label={translate("card.identity.avatar.a11y", {
          name: author.name,
        })}
        class="identity-card-avatar"
      >
        {/* Can't figure out what is the issue... Typescript does not
         * complain with Img but it does with Omit<Img, 'alt'>... so:
         * @ts-expect-error */}
        <Img {...author.avatar} alt="" />
      </Figure>
    ) : null
  }
  <DescriptionList class="identity-card-meta" rowSpacing="4xs">
    <Item colSpacing="4xs" isInline>
      <dt>{translate("meta.label.name")}</dt>
      <dd>{author.name}</dd>
    </Item>
    {
      author.nameIPA ? (
        <Item colSpacing="4xs" isInline>
          <dt>{translate("meta.label.pronunciation")}</dt>
          <dd>{author.nameIPA}</dd>
        </Item>
      ) : null
    }
    {
      author.country ? (
        <Item colSpacing="4xs" isInline>
          <dt>{translate("meta.label.country")}</dt>
          <dd>
            {translate(
              `meta.value.country.name.${toLowerCase(author.country)}`,
            )}
          </dd>
        </Item>
      ) : null
    }
    {
      author.job ? (
        <Item colSpacing="4xs" isInline>
          <dt>{translate("meta.label.job")}</dt>
          <dd>{author.job}</dd>
        </Item>
      ) : null
    }
    {
      author.nationality ? (
        <Item colSpacing="4xs" isInline>
          <dt>{translate("meta.label.nationality")}</dt>
          <dd>
            {translate(
              `meta.value.nationality.${toLowerCase(author.nationality)}`,
            )}
          </dd>
        </Item>
      ) : null
    }
    {
      author.spokenLanguages ? (
        <Item colSpacing="4xs" isInline>
          <dt>{translate("meta.label.speak")}</dt>
          {author.spokenLanguages.map((language) => (
            <dd>{translate(`language.name.${language}`)}</dd>
          ))}
        </Item>
      ) : null
    }
  </DescriptionList>
</Card>

<style>
  .identity-card > :global(*:last-child) {
    flex: 1;
    display: flex;
    flex-flow: row wrap;
    gap: var(--spacing-md);
  }

  .identity-card-avatar {
    max-width: clamp(
      calc(var(--one-px-in-rem * 140)),
      10dvi,
      calc(var(--one-px-in-rem * 200))
    );
  }
</style>
