---
import type { ComponentProps } from "astro/types";
import Callout from "../../components/atoms/callout/callout.astro";
import ContactForm from "../../components/organisms/contact-form/contact-form.astro";
import PageLayout from "../../components/templates/page-layout/page-layout.astro";
import { getWebPageGraph } from "../../lib/schema-dts/graphs/webpage-graph";
import { getBreadcrumb } from "../../services/breadcrumb";
import type { QueriedEntry } from "../../services/collections";
import { useI18n } from "../../utils/i18n";

type Props = Partial<ComponentProps<typeof PageLayout>> & {
  entry: QueriedEntry<"pages">;
};

const {
  entry: { Content, hasContent, ...page },
  ...props
} = Astro.props;
const { translate } = useI18n(page.locale);
const breadcrumb = await getBreadcrumb({ route: Astro.url.pathname });
const graphs: ComponentProps<typeof PageLayout>["graphs"] = [
  await getWebPageGraph({
    ...page,
    breadcrumb,
    type: "ContactPage",
  }),
];
---

<PageLayout
  breadcrumb={breadcrumb}
  description={page.description}
  graphs={graphs}
  headings={page.headings}
  seo={page.seo}
  title={page.title}
  {...props}
>
  <Fragment slot="body">
    {hasContent && <Content />}
    <noscript>
      <Callout style="margin-block-end: var(--spacing-md);" type="warning">
        {translate("no.js.contact.form.text")}
      </Callout>
    </noscript>
    <ContactForm id="contact-page-form" />
  </Fragment>
</PageLayout>
