---
import type { ComponentProps, HTMLTag, Polymorphic } from "astro/types";
import Box from "../../atoms/box/box.astro";

type Props<T extends Extract<HTMLTag, "article" | "section">> = Polymorphic<{
  as: T;
}> &
  Omit<
    ComponentProps<typeof Box<T>>,
    "as" | "isBordered" | "isProse" | "isRounded"
  >;

const { as = "article", class: className, ...attrs } = Astro.props;
---

<Box
  {...attrs}
  as={as}
  class:list={["card", className]}
  isBordered
  isProse
  isRounded
>
  {
    Astro.slots.has("frontmatter") ||
    Astro.slots.has("cover") ||
    Astro.slots.has("heading") ? (
      <header class="card-header">
        {Astro.slots.has("frontmatter") ? (
          <Box as="div" class="card-frontmatter" isPadded isProse>
            <slot name="frontmatter" />
          </Box>
        ) : null}
        {Astro.slots.has("cover") ? (
          <Box as="div" class="card-cover" isBordered isRounded>
            <slot name="cover" />
          </Box>
        ) : null}
        <Box class="card-heading" isPadded isProse>
          <slot name="heading" />
        </Box>
      </header>
    ) : null
  }
  <Box as="div" class="card-body" isPadded isProse isSpaced><slot /></Box>
  {
    Astro.slots.has("meta") || Astro.slots.has("cta") ? (
      <Box
        as="footer"
        class:list={["card-footer", { "has-meta": Astro.slots.has("meta") }]}
        isPadded
        isProse
      >
        <slot name="meta" />
        <slot name="cta" />
      </Box>
    ) : null
  }
</Box>

<style>
  .card {
    display: flex;
    flex-flow: column nowrap;

    @container (width > 55em) {
      display: grid;
      grid-template-columns: minmax(0, 35%) minmax(0, 1fr);
      grid-auto-rows: max-content;

      &:where(:has(.card-frontmatter, .card-heading, .card-body)) {
        grid-auto-rows: max-content max-content 1fr max-content;
      }

      &:where(:has(.card-heading, .card-body):not(:has(.card-frontmatter))) {
        grid-auto-rows: max-content 1fr max-content;
      }
    }
  }

  .card-header {
    display: flex;
    flex-flow: column nowrap;

    @container (width > 55em) {
      display: contents;
    }
  }

  :where(.card:not(:has(.card-cover))) > :global(*),
  :where(.card:has(.card-cover)) .card-frontmatter,
  :where(.card:not(:has(.card-cover)) .card-header) > :global(*) {
    @container (width > 55em) {
      grid-column: 1 / -1;
    }
  }

  :where(.card:has(.card-cover)) :is(.card-heading, .card-body, .card-footer) {
    @container (width > 55em) {
      grid-column: 2;
    }
  }

  .card-frontmatter,
  .card-footer {
    display: flex;
    flex-flow: row wrap;
    align-items: center;
  }

  /* We need to increase specificity because of inconsistencies between
   * dev/build modes. */
  .card .card-frontmatter {
    gap: var(--spacing-xs);
    padding-block: clamp(var(--spacing-xs), 0.75dvi, var(--spacing-sm));
    border-block-end: var(--border-size-sm) solid var(--color-border);
    border-radius: inherit;
    color: var(--color-primary-faded);
    font-weight: var(--font-weight-bold);
    text-transform: uppercase;

    @container (width > 55em) {
      grid-column: 1 / span 2;
      grid-row: 1;
    }

    & > :global(*) {
      font-size: var(--font-size-xs);
    }
  }

  /* We need to increase specificity because of inconsistencies between
   * dev/build modes. */
  .card .card-footer {
    justify-content: space-between;
    gap: var(--spacing-md);
    margin-inline: clamp(var(--spacing-md), 2.5dvi, var(--spacing-xl));
    padding: clamp(var(--spacing-md), 1dvi, var(--spacing-lg)) 0
      clamp(var(--spacing-md), 1.5dvi, var(--spacing-xl));
    border-block-start: var(--border-size-sm) solid var(--color-border);

    &:where(:not(.has-meta)) {
      justify-content: end;
    }
  }

  /* We need to increase specificity because of inconsistencies between
   * dev/build modes. */
  .card .card-heading {
    padding-block-end: 0;
    border-radius: inherit;
  }

  /* We need to increase specificity because of inconsistencies between
   * dev/build modes. */
  .card .card-body {
    flex: 1;

    &:where(:not(:first-child)) {
      padding-block-start: 0;
    }

    &:where(:not(:last-child)) {
      padding-block-end: clamp(var(--spacing-xs), 0.5dvi, var(--spacing-md));
    }
  }

  .card-cover {
    align-self: center;
    max-width: calc(100% - 2 * var(--spacing-md));
    margin: var(--spacing-sm) var(--spacing-sm) 0;
    /* aspect-ratio: 2 / 1; */

    @container (width > 55em) {
      grid-column: 1;
      grid-row: 1 / span 3;
      align-self: unset;
      max-width: 100%;
      margin: var(--spacing-sm) 0 var(--spacing-sm) var(--spacing-sm);
    }

    & :global(img) {
      max-width: 100%;
      max-height: calc(var(--one-px-in-rem) * 240);
      border-radius: inherit;
      box-shadow: var(--shadow-raised-to-top-left);

      @container (width > 55em) {
        height: 100%;
        max-height: 100%;
      }
    }
  }

  :where(.card:has(.card-frontmatter)) .card-cover {
    @container (width > 55em) {
      grid-row-start: 2;
    }
  }
</style>
