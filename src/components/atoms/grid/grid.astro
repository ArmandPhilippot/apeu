---
import type { HTMLTag, Polymorphic } from "astro/types";
import type {
  AlignContent,
  AlignItems,
  Gap,
  JustifyContent,
  JustifyItems,
} from "../../../types/css";
import { getCSSVars, getSpacingVarFromGap } from "../../../utils/attributes";
import { InvalidProps } from "../../../utils/exceptions";

type Props<T extends HTMLTag = "div"> = Polymorphic<{ as: T }> & {
  alignContent?: AlignContent | null | undefined;
  alignItems?: AlignItems | null | undefined;
  gap?: Partial<Gap> | null | undefined;
  justifyContent?: JustifyContent | null | undefined;
  justifyItems?: JustifyItems | null | undefined;
  cols?: number | "auto-fit" | "auto-fill" | null | undefined;
  rows?: number | null | undefined;
  sizeMinCols?: string | null | undefined;
  sizeMaxCols?: string | null | undefined;
  templateCols?: string | null | undefined;
  templateRows?: string | null | undefined;
};

const {
  alignContent,
  alignItems,
  as: Tag = "div",
  class: className,
  gap,
  justifyContent,
  justifyItems,
  cols,
  rows,
  sizeMinCols,
  sizeMaxCols,
  templateCols,
  templateRows,
  style = "",
  ...attrs
} = Astro.props;

const errors: string[] = [];

if (templateCols && cols) {
  errors.push(
    "`cols` and `templateCols` cannot be used together. Use `templateCols` for explicit column definitions, or `cols` for responsive defaults.",
  );
}

if (templateRows && rows) {
  errors.push(
    "`rows` and `templateRows` cannot be used together. Use `templateRows` for explicit row definitions, or `rows` for responsive defaults.",
  );
}

if (templateCols && (sizeMinCols || sizeMaxCols)) {
  errors.push(
    "`templateCols` cannot be used together with `sizeMinCols` or `sizeMaxCols`. Use `templateCols` for explicit column definitions, or `sizeMinCols` and `sizeMaxCols` for responsive defaults.",
  );
}

if (errors.length > 0) {
  throw new InvalidProps(errors.join("\n"));
}

const cssVars = getCSSVars({
  "align-content": alignContent,
  "align-items": alignItems,
  gap: getSpacingVarFromGap(gap),
  "justify-content": justifyContent,
  "justify-items": justifyItems,
  cols,
  rows,
  "size-min-cols": sizeMinCols,
  "size-max-cols": sizeMaxCols,
  "template-cols": templateCols,
  "template-rows": templateRows,
});
---

<Tag {...attrs} class:list={["grid", className]} style={`${cssVars}${style}`}>
  <slot />
</Tag>

<style>
  .grid {
    display: grid;
    align-content: var(--align-content);
    align-items: var(--align-items);
    justify-content: var(--justify-content);
    justify-items: var(--justify-items);
    gap: var(--gap);
    grid-template-columns: var(
      --template-cols,
      repeat(
        var(--cols, auto-fit),
        minmax(
          min(
            100vw - (var(--spacing-md) * 2),
            var(--size-min-cols, calc(var(--one-px-in-rem) * 250))
          ),
          var(--size-max-cols, 1fr)
        )
      )
    );
    grid-template-rows: var(--template-rows, repeat(var(--rows, auto), auto));

    &:is(ul, ol) {
      padding: 0;
      list-style-type: none;
    }
  }
</style>
