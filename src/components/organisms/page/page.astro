---
import type { MarkdownHeading } from "astro";
import { Icon } from "astro-icon/components";
import type { ComponentProps, HTMLAttributes } from "astro/types";
import { Image as AstroImg } from "astro:assets";
import { useI18n } from "../../../utils/i18n";
import { buildToc } from "../../../utils/toc";
import Box from "../../atoms/box/box.astro";
import Button from "../../atoms/button/button.astro";
import Heading from "../../atoms/heading/heading.astro";
import Collapsible from "../../molecules/collapsible/collapsible.astro";
import TableOfContents from "../table-of-contents/table-of-contents.astro";

type Props = HTMLAttributes<"article"> & {
  cover?: ComponentProps<typeof AstroImg> | null | undefined;
  feed?: string | URL | null | undefined;
  heading?: string | null | undefined;
  toc?: MarkdownHeading[] | null | undefined;
};

const { class: className, cover, feed, heading, toc, ...attrs } = Astro.props;
const { translate } = useI18n(Astro.currentLocale);
---

<article
  {...attrs}
  class:list={[
    "page",
    { "has-disconnected-body": Astro.slots.has("disconnected-body") },
    className,
  ]}
>
  {
    heading || cover || Astro.slots.has("meta") ? (
      <Box
        as="header"
        class="page-header"
        elevation="raised"
        isBordered
        isCentered
        isProse
        isRounded
      >
        {heading ? (
          <Box class="page-heading" isPadded isProse>
            <Heading as="h1" class="page-title">
              {heading}
            </Heading>
            {feed ? (
              <Button
                aria-label={translate("cta.subscribe.a11y", { title: heading })}
                as="a"
                href={feed}
              >
                <Icon aria-hidden="true" name="feed" />
                {translate("cta.subscribe")}
              </Button>
            ) : null}
          </Box>
        ) : null}
        {cover ? (
          <AstroImg {...cover} class="page-cover" loading="eager" />
        ) : null}
        {Astro.slots.has("meta") ? (
          <div class="page-meta">
            <slot name="meta" />
          </div>
        ) : null}
      </Box>
    ) : null
  }
  {
    !!toc?.length ? (
      <div class="page-sidebar">
        <Collapsible
          class="page-toc"
          elevation="raised"
          isCentered
          isProse
          isRounded
          open
        >
          <Heading as="h2" class="page-toc-title" slot="label">
            {translate("collapsible.toc.title")}
          </Heading>
          <Box class="page-toc-body" isPadded isProse>
            <TableOfContents headings={buildToc(toc)} />
          </Box>
        </Collapsible>
      </div>
    ) : null
  }
  {
    Astro.slots.has("body") ? (
      <Box
        class="page-body"
        elevation="raised"
        isBordered
        isCentered
        isPadded
        isProse
        isRounded
      >
        <slot name="body" />
      </Box>
    ) : null
  }
  <slot name="disconnected-body" />
  {
    Astro.slots.has("footer") ? (
      <Box
        as="footer"
        class="page-footer"
        elevation="raised"
        isBordered
        isCentered
        isPadded
        isProse
        isRounded
      >
        <slot name="footer" />
      </Box>
    ) : null
  }
</article>

<style>
  .page {
    &:has(.page-toc) {
      /* Uses grid only when the size matches prose + 1/3 of prose */
      @container (width > calc(55em * 4 / 3)) {
        display: grid;
        grid-template-columns:
          minmax(calc(var(--size-prose) / 2), var(--size-prose))
          minmax(0, calc(var(--size-prose) / 2));
        grid-template-rows: minmax(0, auto);
        column-gap: var(--spacing-md);
      }
    }
  }

  .page-toc,
  .page-body,
  .page-footer {
    margin-block-start: calc(var(--border-size-sm) * -1);
  }

  :where(.page:has(.page-toc)) {
    .page-header,
    .page-body,
    .page-footer {
      @container (width > calc(55em * 4 / 3)) {
        grid-column: 1;
      }
    }
  }

  :where(.page:has(.page-body)) .page-header {
    border-end-start-radius: 0;
    border-end-end-radius: 0;

    @container (width >= calc(55em / 1.5)) {
      display: grid;
      grid-auto-columns: minmax(0, 1fr);
    }
  }

  .page-heading {
    display: flex;
    flex-flow: column wrap;
    align-items: center;
    place-content: center;
    gap: var(--spacing-sm) var(--spacing-md);
    text-align: center;

    @container (width >= calc(55em / 1.25)) {
      flex-flow: row wrap;
    }
  }

  .page-title {
    text-wrap: balance;
  }

  :where(.page:has(.page-cover, .page-meta)) .page-heading {
    border-block-end: var(--border-size-sm) solid var(--color-border);
  }

  :where(.page:has(.page-cover):has(.page-meta)) .page-heading {
    @container (width >= calc(55em / 1.5)) {
      grid-column: 1 / span 2;
    }
  }

  .page-cover {
    display: block;
    width: 100%;
    height: 100%;
    max-width: 100%;
    max-height: calc(var(--one-px-in-rem) * 250);
    object-fit: cover;
  }

  :where(.page:has(.page-meta)) .page-cover {
    @container (width >= calc(55em / 1.5)) {
      grid-column: 1;
      border-inline-end: var(--border-size-sm) solid var(--color-border);
    }
  }

  .page-meta {
    padding: clamp(var(--spacing-md), 1.5dvi, var(--spacing-xl));
    text-align: center;
  }

  :where(.page:has(.page-cover)) .page-meta {
    @container (width >= calc(55em / 1.5)) {
      grid-column: 2;
      text-align: start;
    }
  }

  .page-sidebar {
    @container (width > calc(55em * 4 / 3)) {
      grid-column: 2;
      grid-row: 1 / span 3;
    }
  }

  .page-toc {
    @container (55em < width < calc(55em * 4 / 3)) {
      border-radius: 0;
    }

    @container (width > calc(55em * 4 / 3)) {
      position: sticky;
      top: var(--spacing-md);
    }
  }

  .page-toc-title {
    font-size: var(--font-size-xl);
  }

  .page-toc > :global(:is(summary)),
  .page-toc-body {
    @container (width > calc(55em * 4 / 3)) {
      padding-inline-start: clamp(var(--spacing-sm), 1.5dvi, var(--spacing-md));
    }
  }

  .page-body {
    border-start-start-radius: 0;
    border-start-end-radius: 0;

    &
      > :global(
        /* The list might not be complete... */
        *:where(:not(a, code, em, input, img, span, strong))
          + *:where(:not(a, code, em, img, input, span, strong))
      ) {
      margin-block: var(--spacing-md);
    }
  }

  :where(.page:has(.page-toc)) .page-body {
    padding-block: clamp(var(--spacing-md), 3dvi, var(--spacing-lg))
      clamp(var(--spacing-md), 4dvi, var(--spacing-xl));
  }

  :where(.page.has-disconnected-body:not(:has(.page-body))) .page-header,
  :where(.page.has-disconnected-body) .page-body {
    margin-block-end: clamp(var(--spacing-2xs), 4dvi, var(--spacing-md));
  }

  :where(.page.has-disconnected-body) .page-footer {
    margin-block-start: clamp(var(--spacing-2xs), 4dvi, var(--spacing-md));
  }

  :where(.page:not(.has-disconnected-body)) .page-footer {
    border-start-start-radius: 0;
    border-start-end-radius: 0;
  }
</style>
