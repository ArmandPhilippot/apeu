---
import { Icon } from "astro-icon/components";
import type { ComponentProps } from "astro/types";
import { Image as AstroImg } from "astro:assets";
import type {
  Blog,
  BlogPostPreview,
  Bookmark,
  CollectionMetaData,
  GuidePreview,
  NotePreview,
  PagePreview,
  ProjectPreview,
  TaxonomyPreview,
} from "../../../types/data";
import type { HeadingLvl, IconName } from "../../../types/tokens";
import type { AllKeysOf, WithOptionalKey } from "../../../types/utilities";
import { useI18n } from "../../../utils/i18n";
import { splitObject } from "../../../utils/objects";
import { isString } from "../../../utils/type-checks";
import Button from "../../atoms/button/button.astro";
import DescriptionList from "../../atoms/description-list/description-list.astro";
import Description from "../../atoms/description-list/description.astro";
import Term from "../../atoms/description-list/term.astro";
import Heading from "../../atoms/heading/heading.astro";
import Link from "../../atoms/link/link.astro";
import Card from "../../molecules/card/card.astro";
import CollectionMeta from "../collection-meta/collection-meta.astro";

type CollectionCardCTA = {
  ariaLabel?: string | null | undefined;
  icon?: IconName | null | undefined;
  isExternal?: boolean | null | undefined;
  label: string;
};

type CollectionCardEntry =
  | WithOptionalKey<Blog, 'meta'>
  | WithOptionalKey<BlogPostPreview, 'meta'>
  | WithOptionalKey<Bookmark, 'meta'>
  | WithOptionalKey<GuidePreview, 'meta'>
  | WithOptionalKey<NotePreview, 'meta'>
  | WithOptionalKey<PagePreview, 'meta'>
  | WithOptionalKey<ProjectPreview, 'meta'>
  | WithOptionalKey<TaxonomyPreview, 'meta'>;

type CollectionCardFeaturedMeta = {
  icon?: IconName | null | undefined;
  iconSize?: number | string | null | undefined;
  key: AllKeysOf<CollectionMetaData>;
};

type Props = ComponentProps<typeof Card> & {
  /**
   * The CTA.
   */
  cta?: CollectionCardCTA | null | undefined;
  /**
   * The card entry.
   */
  entry: CollectionCardEntry;
  /**
   * Define a meta to display in front of the card. You should either use this
   * option or `showCollection`, not both.
   */
  featuredMeta?: CollectionCardFeaturedMeta | null | undefined;
  /**
   * The heading level used for the card title.
   */
  headingLvl?: HeadingLvl | undefined;
  /**
   * Should we display the collection name in front of the card? You should
   * either use this option or `featuredMeta`, not both.
   *
   * @default false
   */
  showCollection?: boolean | null | undefined;
};

const {
  class: className,
  cta,
  entry,
  featuredMeta,
  headingLvl = "h2",
  showCollection = false,
  ...attrs
} = Astro.props;
const { locale, translate } = useI18n(Astro.currentLocale);
const ctaLink = "url" in entry ? entry.url : entry.route;
const entryLocale =
  "meta" in entry &&
  "inLanguage" in entry.meta &&
  entry.meta.inLanguage !== locale
    ? entry.meta.inLanguage
    : null;
const collectionIcon = {
  blogCategories: {
    icon: "folder",
    label: translate("meta.value.content.kind.blog.category"),
  },
  blogPosts: {
    icon: "blog",
    label: translate("meta.value.content.kind.blog.post"),
  },
  blogroll: {
    icon: "globe",
    label: translate("meta.value.content.kind.blogroll"),
  },
  bookmarks: {
    icon: "bookmark",
    label: translate("meta.value.content.kind.bookmark"),
  },
  guides: {
    icon: "guide",
    label: translate("meta.value.content.kind.guide"),
  },
  notes: {
    icon: "notepad",
    label: translate("meta.value.content.kind.note"),
  },
  pages: {
    icon: "page",
    label: translate("meta.value.content.kind.page"),
  },
  projects: {
    icon: "project",
    label: translate("meta.value.content.kind.project"),
  },
  tags: {
    icon: "tag",
    label: translate("meta.value.content.kind.tag"),
  },
} satisfies Record<typeof entry.collection, { icon: IconName; label: string }>;

const { extracted: frontmatter, remaining: meta } = splitObject(
  entry.meta,
  featuredMeta?.key,
);
---

<Card {...attrs} class:list={["collection-card", className]}>
  {
    showCollection && !featuredMeta ? (
      <DescriptionList isInline slot={showCollection ? "frontmatter" : ""}>
        <Term class="sr-only">{translate("meta.label.collection")}</Term>
        <Description class="collection-card-frontmatter">
          <Icon
            aria-hidden="true"
            name={collectionIcon[entry.collection].icon}
            size={22}
          />
          {collectionIcon[entry.collection].label}
        </Description>
      </DescriptionList>
    ) : null
  }
  {
    !showCollection && featuredMeta && frontmatter ? (
      <CollectionMeta
        data={frontmatter}
        hideLabel
        icons={{
          [featuredMeta.key]: {
            name: featuredMeta.icon,
            size: featuredMeta.iconSize,
          },
        }}
        slot={frontmatter ? "frontmatter" : ""}
      />
    ) : null
  }
  {
    "cover" in entry && entry.cover ? (
      <AstroImg {...entry.cover} slot={entry.cover ? "cover" : ""} />
    ) : null
  }
  <Heading
    as={headingLvl}
    class="collection-card-title"
    lang={entryLocale}
    slot="heading"
  >
    {
      cta ? (
        entry.title
      ) : (
        <Link class="collection-card-link" href={ctaLink}>
          {entry.title}
        </Link>
      )
    }
  </Heading>
  <div lang={entryLocale}>
    {
      isString(entry.description)
        ? entry.description
        : entry.description[locale]
    }
  </div>
  {
    meta ? (
      <CollectionMeta
        class="collection-card-meta"
        data={meta}
        rowSpacing="4xs"
        slot={meta ? "meta" : ""}
      />
    ) : null
  }
  {
    cta ? (
      <div class="collection-card-cta" slot={!!cta ? "cta" : ""}>
        <Button
          aria-label={cta.ariaLabel}
          as="a"
          href={ctaLink}
          isExternal={cta.isExternal}
        >
          {cta.icon ? <Icon aria-hidden="true" name={cta.icon} /> : null}
          {cta.label}
        </Button>
        {"feed" in entry && entry.feed ? (
          <Button
            as="a"
            aria-label={translate("cta.open.feed.a11y")}
            href={entry.feed}
            isExternal
          >
            <Icon aria-hidden="true" name="feed" />
            {translate("cta.open.feed")}
          </Button>
        ) : null}
      </div>
    ) : null
  }
</Card>

<style>
  .collection-card {
    position: relative;

    &:where(
        :not(:has(.collection-card-meta, .collection-card-cta))
      ):focus-within {
      outline: var(--border-size-lg) solid var(--color-primary-lighter);
      outline-offset: calc(var(--border-size-lg) * -1);
    }
  }

  .collection-card-frontmatter {
    display: flex;
    flex-flow: row wrap;
    align-items: center;
    gap: var(--spacing-3xs);
  }

  .collection-card-title {
    font-size: var(--font-size-3xl);
  }

  :where(
      .collection-card:not(:has(.collection-card-meta, .collection-card-cta))
    )
    .collection-card-link {
    &::before {
      content: "";
      position: absolute;
      inset: 0;
      z-index: 1;
    }

    &:focus {
      outline: none;
    }
  }
</style>
