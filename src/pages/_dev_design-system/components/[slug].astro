---
import type { GetStaticPaths } from "astro";
import type { ComponentProps } from "astro/types";
import { globby } from "globby";
import { join } from "path";
import Link from "../../../components/atoms/link/link.astro";
import ListItem from "../../../components/atoms/list/list-item.astro";
import List from "../../../components/atoms/list/list.astro";
import Page from "../../../components/organisms/page/page.astro";
import Layout from "../../../components/templates/layout/layout.astro";
import {
  COMPONENT_KINDS,
  STORIES_EXT,
  STORIES_SUFFIX,
} from "../../../utils/constants";
import { getStoryNameFromSlug, getStoryRoute } from "../../../utils/stories";
import { capitalizeFirstLetter } from "../../../utils/strings";

export const getStaticPaths = (() => {
  return Promise.all(
    COMPONENT_KINDS.map(async (kind) => {
      const componentDir = "src/components/";
      const storiesPaths = await globby(join(componentDir, kind), {
        expandDirectories: {
          extensions: [STORIES_EXT],
        },
      });
      const stories = storiesPaths
        .filter(
          (path) =>
            !path.includes(`/${STORIES_SUFFIX}/`) ||
            (path.includes(`/${STORIES_SUFFIX}/`) &&
              path.endsWith(`index.${STORIES_EXT}`)),
        )
        .map((path) => {
          const slug = getStoryRoute(path).replace(componentDir, "");

          return {
            label: getStoryNameFromSlug(slug),
            slug,
          };
        });

      return {
        params: { slug: kind },
        props: { stories, title: capitalizeFirstLetter(kind) },
      };
    }),
  );
}) satisfies GetStaticPaths;

const { stories, title } = Astro.props;

const seo: ComponentProps<typeof Layout>["seo"] = {
  nofollow: true,
  noindex: true,
  title: `${title} | Components | Design system`,
};
---

<Layout seo={seo}>
  <Page heading={title}>
    <Fragment slot="body">
      {
        stories.length ? (
          <List>
            {stories.map((story) => (
              <ListItem>
                <Link href={story.slug}>{story.label}</Link>
              </ListItem>
            ))}
          </List>
        ) : (
          <p>No stories available in {title}</p>
        )
      }
    </Fragment>
  </Page>
</Layout>
