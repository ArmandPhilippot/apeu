---
import { getLanguageTerritory } from "../../../services/i18n";
import type { MimeTypeImage } from "../../../types/mime-type";

type OpenGraphType =
  | "article"
  | "book"
  | "music.album"
  | "music.playlist"
  | "music.radio_station"
  | "music.song"
  | "profile"
  | "video.episode"
  | "video.movie"
  | "video.other"
  | "video.tv_show"
  | "website";

type OpenGraphDeterminer = "" | "a" | "an" | "the" | "auto";

type Props = {
  description?: string | null | undefined;
  determiner?: OpenGraphDeterminer | null | undefined;
  image: {
    height?: number | `${number}` | null | undefined;
    type?: MimeTypeImage | null | undefined;
    url: string;
    width?: number | `${number}` | null | undefined;
  };
  locale?: string | null | undefined;
  localesAlt?: string[] | null | undefined;
  siteName?: string | null | undefined;
  title: string;
  type: OpenGraphType;
  url: string;
};

const {
  description,
  determiner,
  image,
  locale,
  localesAlt,
  siteName,
  title,
  type,
  url,
} = Astro.props;
---

<meta content={title} property="og:title" />
<meta content={type} property="og:type" />
<meta content={image.url} property="og:image" />
{image.type ? <meta content={image.type} property="og:image:type" /> : null}
{
  image.width ? (
    <meta content={`${image.width}`} property="og:image:width" />
  ) : null
}
{
  image.height ? (
    <meta content={`${image.height}`} property="og:image:height" />
  ) : null
}
<meta content={url} property="og:url" />
{description ? <meta content={description} property="og:description" /> : null}
{determiner ? <meta content={determiner} property="og:determiner" /> : null}
{
  locale ? (
    <meta
      content={locale.includes("_") ? locale : getLanguageTerritory(locale)}
      property="og:locale"
    />
  ) : null
}
{
  localesAlt?.map((lang) => (
    <meta content={lang} property="og:locale:alternate" />
  ))
}
{siteName ? <meta content={siteName} property="og:site_name" /> : null}
<slot />
