---
import type { ComponentProps, HTMLAttributes } from "astro/types";
import { ClientRouter } from "astro:transitions";
import "../../../styles/global.css";
import { CONFIG } from "../../../utils/constants";
import { useI18n } from "../../../utils/i18n";
import Copyright from "../../atoms/copyright/copyright.astro";
import Head from "../../atoms/head/head.astro";
import License from "../../atoms/license/license.astro";
import BackToTop from "../../molecules/back-to-top/back-to-top.astro";
import Branding from "../../molecules/branding/branding.astro";
import NavItem from "../../molecules/nav-item/nav-item.astro";
import NavList from "../../molecules/nav-list/nav-list.astro";
import SkipTo from "../../molecules/skip-to/skip-to.astro";
import MainNav from "../../organisms/main-nav/main-nav.astro";
import Navbar from "../../organisms/navbar/navbar.astro";
import SearchForm from "../../organisms/search-form/search-form.astro";
import SettingsForm from "../../organisms/settings-form/settings-form.astro";
import PageTransitionProvider from "../../providers/page-transition-provider.astro";
import SvgFiltersProvider from "../../providers/svg-filters-provider.astro";
import ThemeProvider from "../../providers/theme-provider.astro";
import GlobalThemeInit from "../../utilities/global-theme-init.astro";
import ShikiThemeInit from "../../utilities/shiki-theme-init.astro";

type Props = Pick<ComponentProps<typeof Head>, "seo"> &
  Omit<HTMLAttributes<"div">, "id">;

const { class: className, seo, ...attrs } = Astro.props;
const { locale, route, translate } = useI18n(Astro.currentLocale);
const isHome = Astro.url.pathname === route("home");
const mainNav = [
  {
    icon: "home",
    iconSize: 28,
    label: translate("page.home.title"),
    url: route("home"),
  },
  {
    icon: "blog",
    iconSize: 28,
    label: translate("page.blog.title"),
    url: route("blog"),
  },
  {
    icon: "guide",
    iconSize: 28,
    label: translate("page.guides.title"),
    url: route("guides"),
  },
  {
    icon: "notepad",
    iconSize: 28,
    label: translate("page.notes.title"),
    url: route("notes"),
  },
  {
    icon: "project",
    iconSize: 28,
    label: translate("page.projects.title"),
    url: route("projects"),
  },
  {
    icon: "bookmark",
    iconSize: 28,
    label: translate("page.bookmarks.title"),
    url: route("bookmarks"),
  },
  {
    icon: "globe",
    iconSize: 28,
    label: translate("page.blogroll.title"),
    url: route("blogroll"),
  },
  {
    icon: "contact",
    iconSize: 28,
    label: translate("page.contact.title"),
    url: route("contact"),
  },
] satisfies ComponentProps<typeof NavList>["items"];
const devOnlyLinks = import.meta.env.DEV
  ? [{ label: "Design system", url: "/design-system" }]
  : [];
const footerLinks = [
  { label: translate("page.legal.notice.title"), url: route("legal.notice") },
  {
    icon: "feed",
    iconSize: 17,
    label: translate("page.feeds.title"),
    url: route("feeds"),
  },
  ...devOnlyLinks,
] satisfies ComponentProps<typeof NavList>["items"];
const contentsId = translate("anchor.site.content");
const topId = translate("anchor.site.top");
---

<html
  data-shiki="light"
  data-theme="light"
  lang={locale}
  style="color-scheme: light;"
>
  <Head
    addBrandToTitle={!isHome}
    brand={CONFIG.BRAND}
    colorScheme="light dark"
    fonts={[
      {
        href: "/fonts/Inter/Inter.woff2?v=3.18",
        mimetype: "font/woff2",
      },
    ]}
    seo={seo}
    themeColor="#214769"
  >
    <ClientRouter fallback="swap" />
    <slot name="head" />
    <GlobalThemeInit />
    <ShikiThemeInit />
    <noscript>
      <style>
        .js-only {
          /* stylelint-disable-next-line declaration-no-important */
          display: none !important;
        }
      </style>
    </noscript>
  </Head>
  <body class="site" id={topId}>
    <ThemeProvider>
      <SvgFiltersProvider>
        <PageTransitionProvider>
          <SkipTo anchor={`#${contentsId}`}>
            {translate("cta.skip.to.content")}
          </SkipTo>
          <header class="site-header">
            <div class="site-branding">
              <Branding brand={CONFIG.BRAND} url={route("home")} />
            </div>
            <Navbar
              aria-label={translate("nav.label.primary")}
              class="site-navbar"
              id="site-navbar"
            >
              <MainNav items={mainNav} slot="nav" />
              <SearchForm
                id="site-search"
                isInline
                queryParam={CONFIG.SEARCH.QUERY_PARAM}
                resultsPage={route("search")}
                slot="search"
              />
              <SettingsForm
                altLanguages={seo.languages}
                id="site-settings"
                slot="settings"
              />
            </Navbar>
          </header>
          <div {...attrs} class:list={["site-body", className]} id={contentsId}>
            <slot />
          </div>
          <footer class="site-footer">
            <Copyright
              creationYear={CONFIG.CREATION_YEAR}
              owner={CONFIG.BRAND}
            />
            <License />
            <NavList class="site-footer-nav" isInline items={footerLinks}>
              {
                ({ label, url, ...item }) => (
                  <NavItem {...item} href={url}>
                    {label}
                  </NavItem>
                )
              }
            </NavList>
            <BackToTop
              anchor={`#${topId}`}
              class="site-back-to-top"
              label={translate("cta.back.to.top")}
            />
          </footer>
        </PageTransitionProvider>
      </SvgFiltersProvider>
    </ThemeProvider>
  </body>
</html>

<style>
  .site {
    display: flex;
    flex-flow: column;
    min-height: 100dvh;

    @media (--md-or-above) {
      display: grid;
      grid-template-columns:
        minmax(calc(var(--one-px-in-rem) * 200), 22dvw)
        minmax(0, 1fr);
      grid-template-rows: minmax(0, 1fr) minmax(0, auto);
    }

    &::before {
      content: "";
      position: fixed;
      inset: 0;
      z-index: -1;
      clip-path: inset(0);
      pointer-events: none;
      user-select: none;

      /* Fixes a Chromium bug where the SVG filter wasn't updated when
       * switching the theme... */
      transform: translate3d(0, 0, 0);
    }
  }

  .site-header {
    display: contents;

    @media (--sm-or-above) {
      display: flex;
      flex-flow: row wrap;
      gap: var(--spacing-md);
      border-block-end: var(--border-size-sm) solid var(--color-border);
      box-shadow: var(--shadow-raised-to-top-center);
    }

    @media (--md-or-above) {
      grid-column: 1;
      grid-row: 1;
      flex-flow: column;
      gap: clamp(var(--spacing-sm), 2dvi, var(--spacing-2xl));
      padding: clamp(var(--spacing-4xs), 1.5dvi, var(--spacing-2xl))
        var(--spacing-xs) 0;
      border-block-end: none;
      box-shadow: none;
    }
  }

  .site-branding,
  .site-footer {
    display: flex;
    flex-flow: row wrap;
    align-items: center;
  }

  .site-branding {
    justify-content: center;
    padding: var(--spacing-2xs);
    border-block-end: var(--border-size-sm) solid var(--color-border);

    @media (--sm-or-above) {
      border-block: none;
    }
  }

  .site-navbar {
    order: 1;
    position: sticky;
    bottom: 0;
    z-index: 10;
    border-block-start: var(--border-size-sm) solid var(--color-border);
    box-shadow: var(--shadow-raised-to-bottom-center);

    &::before {
      content: "";
      position: absolute;
      inset: 0;
      z-index: -1;
      clip-path: inset(0);
      pointer-events: none;
      user-select: none;
    }

    @media (--sm-or-above) {
      flex: 1;
      order: unset;
      position: relative;
      border-block-start: none;
      border-inline-start: var(--border-size-sm) solid var(--color-border);
      box-shadow: none;
    }

    @media (--md-or-above) {
      border-inline-start: none;
    }
  }

  .site-body {
    container: body / inline-size;
    flex: 1;

    @media (--md-or-above) {
      grid-column: 2;
      grid-row: 1;
    }
  }

  .site-footer {
    justify-content: center;
    gap: var(--spacing-4xs);
    padding: clamp(var(--spacing-md), 4dvh, var(--spacing-lg)) var(--spacing-md);
    font-size: var(--font-size-sm);

    @media (--md-or-above) {
      grid-column: 1 / -1;
      grid-row: 2;
    }
  }

  .site-footer-nav {
    gap: var(--spacing-xs);
    margin-inline-start: var(--spacing-xs);
  }

  .site-back-to-top {
    position: fixed;
    /* This not ideal because the navbar height could change but setting a fix
     * height to the navbar is not ideal neither so I prefer to use a "magic"
     * number here. */
    bottom: 6.5rem;
    right: calc(1dvi + var(--spacing-sm));
    z-index: 2;

    @media (--sm-or-above) {
      bottom: calc(1dvi + var(--spacing-md));
      right: calc(1dvi + var(--spacing-md));
    }
  }

  :global(:where([data-theme="light"])) {
    .site::before,
    .site-navbar::before {
      filter: url("#paper-filter");
    }
  }

  :global(:where([data-theme="dark"])) {
    .site::before,
    .site-navbar::before {
      filter: url("#dark-paper-filter");
    }
  }
</style>
