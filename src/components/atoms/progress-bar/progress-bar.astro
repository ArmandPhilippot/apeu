---
import type { HTMLAttributes } from "astro/types";

type Props = HTMLAttributes<"div"> & {
  /**
   * Current value.
   */
  current?: number | null | undefined;
  /**
   * Maximal value.
   */
  max?: number | null | undefined;
};

const {
  "aria-label": ariaLabel,
  "aria-valuemax": ariaValueMax,
  "aria-valuemin": ariaValueMin,
  "aria-valuenow": ariaValueNow,
  class: className,
  current,
  max = 1,
  slot,
  ...attrs
} = Astro.props;
const progressValueFallback = current ? `${current}/${max}` : null;
---

<div {...attrs} class:list={[className, "progress-bar"]}>
  <progress
    aria-label={ariaLabel}
    aria-valuemax={ariaValueMax ?? max}
    aria-valuemin={ariaValueMin ?? 0}
    aria-valuenow={ariaValueNow ?? current}
    max={max}
    value={current}>{progressValueFallback}</progress
  >
</div>

<style>
  @layer components {
    .progress-bar {
      --progress-bar-color: var(--color-primary);

      position: relative;
      width: 100%;
      height: var(--spacing-3xs);
      background-color: oklch(from var(--color-muted-light) l c h / 50%);
      overflow: hidden;

      &:has(progress:indeterminate)::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 30%;
        height: 100%;
        background-color: var(--progress-bar-color);
        animation: progress-bar-move-indeterminate 1.25s linear 0s infinite both
          alternate;
      }
    }

    progress {
      display: block;
      width: 100%;
      height: 100%;
      padding: 0;
      appearance: none;
      border: none;
      border-radius: 0;
      background-color: transparent;

      &::-webkit-progress-bar {
        background-color: transparent;
      }

      &::-webkit-progress-value,
      &:not(:indeterminate)::-moz-progress-bar {
        background-color: var(--progress-bar-color);
      }

      &:indeterminate::-moz-progress-bar {
        background-color: transparent;
      }
    }

    @keyframes progress-bar-move-indeterminate {
      0% {
        transform: translateX(-50%);
      }

      100% {
        transform: translateX(300%);
      }
    }
  }
</style>
