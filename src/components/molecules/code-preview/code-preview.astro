---
import type { ComponentProps, HTMLAttributes } from "astro/types";
import { Code } from "astro:components";
import { useI18n } from "../../../services/i18n";
import CodeBlock from "../code-block/code-block.astro";

type Props = HTMLAttributes<"figure"> &
  Pick<ComponentProps<typeof Code>, "lang" | "wrap"> & {
    code?: string | null | undefined;
    label?: string | null | undefined;
  };

const {
  class: className,
  code,
  label,
  lang = "text",
  slot,
  wrap = false,
  ...attrs
} = Astro.props;
const { translate } = useI18n(Astro.currentLocale);
const hasUseAndPreview = code && Astro.slots.has("default");
---

<figure {...attrs} class:list={[className, "code-preview"]}>
  {label ? <figcaption>{label}</figcaption> : null}
  {
    code ? (
      <div class="use">
        {hasUseAndPreview && (
          <div class="use-label">{translate("code.preview.use.label")}</div>
        )}
        <CodeBlock
          class="use-content"
          code={code}
          lang={lang}
          showLineNumbers
        />
      </div>
    ) : null
  }
  {
    Astro.slots.has("default") ? (
      <div class="preview">
        {hasUseAndPreview && (
          <div class="preview-label">
            {translate("code.preview.preview.label")}
          </div>
        )}
        <div class="preview-content">
          <slot />
        </div>
      </div>
    ) : null
  }
</figure>

<style>
  @layer components {
    .code-preview {
      background: var(--color-regular-light);
      border: var(--border-size-sm) solid var(--color-border-light);
      border-radius: var(--border-radii-lg);

      & > *:last-child {
        border-end-start-radius: inherit;
        border-end-end-radius: inherit;
      }
    }

    figcaption {
      margin: var(--spacing-2xs) var(--spacing-2xs) 0;
      padding: var(--spacing-xs) var(--spacing-sm);
      border: var(--border-size-sm) solid var(--color-border-light);
      border-radius: var(--border-radii-md);
    }

    .use-label,
    .preview-label {
      padding-block: var(--spacing-sm) var(--spacing-xs);
      font-size: var(--font-size-sm);
      font-weight: var(--font-weight-bold);
    }

    .use,
    .preview {
      padding: 0 var(--spacing-sm) var(--spacing-sm);

      &:where(:not(:has(> .use-label, > .preview-label))) {
        padding-block-start: var(--spacing-md);
      }
    }

    :where(.code-preview:has(.use)) .preview {
      border-block-start: var(--border-size-sm) solid var(--color-border);
    }

    .preview-content {
      padding: clamp(var(--spacing-xs), 1dvi, var(--spacing-md));
      background: var(--color-regular);
      border: var(--border-size-sm) solid var(--color-border-lighter);
      border-radius: var(--border-radii-md);
    }
  }
</style>
