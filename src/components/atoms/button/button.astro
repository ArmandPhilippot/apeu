---
import type { HTMLTag, Polymorphic } from "astro/types";

type ButtonKind = "discreet" | "neutral" | "primary" | "secondary";

type Props<T extends Extract<HTMLTag, "a" | "button"> = "button"> =
  Polymorphic<{ as: T }> & {
    /**
     * Is the button targeting an external resource?
     *
     * @default false
     */
    isExternal?: boolean | null | undefined;
    /**
     * The button kind.
     *
     * @default "secondary"
     */
    kind?: ButtonKind | null | undefined;
  };

const {
  as: Tag = "button",
  class: className,
  isExternal = false,
  kind = "secondary",
  slot,
  ...attrs
} = Astro.props;

if (isExternal && kind === "primary") {
  throw new Error("A button must not use primary kind for external resources!");
}
---

<Tag
  {...attrs}
  class:list={["btn", className]}
  {...isExternal && { "data-external": true }}
  data-type={kind}><slot /></Tag
>

<style>
  .btn {
    display: flex;
    flex-flow: row wrap;
    place-content: center;
    place-items: center;
    gap: var(--spacing-xs);
    width: fit-content;
    min-width: calc(var(--one-px-in-rem) * 54);
    min-height: calc(var(--one-px-in-rem) * 54);
    padding: var(--spacing-xs) var(--spacing-sm);
    cursor: pointer;
    font-size: var(--font-size-md);
    font-weight: var(--font-weight-bold);
    line-height: var(--line-height);
    text-decoration: none;

    @media (any-pointer: fine) {
      min-width: unset;
      min-height: unset;
    }

    &:where([data-external="true"])::after {
      display: inline-block;
      content: var(--external-icon);
    }

    &:where([data-type="neutral"]) {
      background: transparent;
      border: none;
      color: inherit;
    }

    &:where([data-type="primary"]) {
      background: var(--color-primary);
      border: var(--border-size-md) solid var(--color-primary);
      border-radius: var(--border-radii-md);
      box-shadow:
        inset 0 0 0 var(--border-size-md) var(--color-primary-subtle),
        var(--border-size-lg) var(--border-size-lg) 0 0
          var(--color-primary-darker);
      color: var(--color-on-primary);

      &:where([aria-disabled="true"], :disabled) {
        border-color: var(--color-muted-light);
        box-shadow:
          inset 0 0 0 var(--border-size-md) var(--color-muted-subtle),
          var(--border-size-lg) var(--border-size-lg) 0 0
            var(--color-muted-dark);
      }

      &:where(:not([aria-disabled="true"], :disabled)) {
        &:where(:focus-visible) {
          outline: var(--color-primary-subtle) solid var(--border-size-md);
          outline-offset: calc(var(--border-size-md) * -4);
        }

        &:where(:not(:focus-visible)) {
          outline-offset: calc(var(--border-size-md) * -2);
        }
      }

      &:where(:not([aria-busy="true"], [aria-disabled="true"], :disabled)) {
        &:where(:focus, :hover) {
          border-color: var(--color-primary-light);
          box-shadow:
            inset 0 0 0 var(--border-size-md) var(--color-primary-subtle),
            calc(var(--border-size-lg) * 2) calc(var(--border-size-lg) * 2) 0 0
              var(--color-primary-dark);
          transform: translateX(calc(var(--border-size-lg) * -1))
            translateY(calc(var(--border-size-lg) * -1));
        }

        &:where(:active) {
          background: var(--color-primary-dark);
          border-color: var(--color-primary-dark);
          box-shadow:
            inset 0 0 0 var(--border-size-md) var(--color-primary-subtle),
            var(--border-size-sm) var(--border-size-sm) 0 0
              var(--color-primary-subtle);
          transform: translateX(var(--border-size-lg))
            translateY(var(--border-size-lg));
        }
      }
    }

    &:where([data-type="discreet"]) {
      border-color: var(--color-border-light);
      box-shadow: var(--border-size-lg) var(--border-size-lg) 0 0
        var(--color-muted-dark);
      color: var(--color-on-regular);

      &:where(:not([aria-disabled="true"], :disabled)) {
        outline-color: var(--color-regular-faded);
      }

      &:where(:not([aria-busy="true"], [aria-disabled="true"], :disabled)) {
        &:where(:focus, :hover) {
          background: var(--color-regular-lighter);
          box-shadow: calc(var(--border-size-lg) * 2)
            calc(var(--border-size-lg) * 2) 0 0 var(--color-muted-dark);
        }

        &:where(:active) {
          box-shadow: var(--border-size-sm) var(--border-size-sm) 0 0
            var(--color-muted);
        }
      }
    }

    &:where([data-type="secondary"]) {
      border-color: var(--color-primary-dark);
      box-shadow: var(--border-size-lg) var(--border-size-lg) 0 0
        var(--color-primary-darker);
      color: var(--color-primary);

      &:where(:not([aria-disabled="true"], :disabled)) {
        outline-color: var(--color-primary-light);
      }

      &:where(:not([aria-busy="true"], [aria-disabled="true"], :disabled)) {
        &:where(:focus, :hover) {
          border-color: var(--color-primary);
          box-shadow: calc(var(--border-size-lg) * 2)
            calc(var(--border-size-lg) * 2) 0 0 var(--color-primary-dark);
        }

        &:where(:active) {
          box-shadow: var(--border-size-sm) var(--border-size-sm) 0 0
            var(--color-primary-subtle);
          color: var(--color-primary-dark);
        }
      }
    }

    &:where([data-type="discreet"], [data-type="secondary"]) {
      background: var(--color-regular-light);
      border-radius: var(--border-radii-md);
      border-style: solid;
      border-width: var(--border-size-sm);

      &:where([aria-disabled="true"], :disabled) {
        border-color: var(--color-muted-dark);
        box-shadow: var(--border-size-lg) var(--border-size-lg) 0 0
          var(--color-muted-dark);
      }

      &:where(:not([aria-disabled="true"], :disabled)) {
        &:where(:focus-visible) {
          outline-offset: calc(var(--border-size-md) * -3);
          outline-style: solid;
          outline-width: var(--border-size-md);
        }

        &:where(:not(:focus-visible)) {
          outline-offset: calc(var(--border-size-md) * -1);
        }
      }

      &:where(:not([aria-busy="true"], [aria-disabled="true"], :disabled)) {
        &:where(:focus, :hover) {
          background: var(--color-regular-lighter);
          transform: translateX(calc(var(--border-size-lg) * -1))
            translateY(calc(var(--border-size-lg) * -1));
        }

        &:where(:active) {
          transform: translateX(var(--border-size-lg))
            translateY(var(--border-size-lg));
        }
      }
    }

    &:where(
      [data-type="discreet"],
      [data-type="primary"],
      [data-type="secondary"]
    ) {
      transition:
        box-shadow 0.15s linear 0s,
        color 0.15s linear 0s,
        outline-offset 0.1s linear 0s,
        transform 0.15s linear 0s;
    }

    &:is([aria-busy="true"]) {
      cursor: wait;
    }

    &:is([aria-disabled="true"], :disabled) {
      background: var(--color-muted-light);
      color: var(--color-on-muted);
      cursor: not-allowed;
    }
  }
</style>
