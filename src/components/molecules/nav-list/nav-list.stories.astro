---
import type { ComponentProps } from "astro/types";
import { getStoryMeta } from "../../../utils/stories";
import Heading from "../../atoms/heading/heading.astro";
import ListItem from "../../atoms/list/list-item.astro";
import List from "../../atoms/list/list.astro";
import PageLayout from "../../templates/page-layout/page-layout.astro";
import NavListComponent from "./nav-list.astro";

const title = "NavList";
const { breadcrumb, seo } = getStoryMeta({
  breadcrumb: {
    kind: "molecules",
    route: Astro.url.pathname,
    title,
  },
});

const items = [
  { label: "Item 1", url: "#item-1" },
  { label: "Item 2", url: "#item-2" },
  { label: "Item 3", url: "#item-3" },
] satisfies ComponentProps<typeof NavListComponent>["items"];
---

<PageLayout breadcrumb={breadcrumb} seo={seo} title={title}>
  <Fragment slot="body">
    <Heading as="h2">Usage</Heading>
    <p>
      This component is used to define a navigation list. It accepts an <code
        >items</code
      > property and expect a function as child to render these items. You can choose
      the way to render the children but it is recommended to use the <code
        >NavItem</code
      > component.
    </p>
    <NavListComponent items={items}>
      {
        (item) => (
          <List>
            <ListItem>
              <code>icon:</code> {item.icon ?? "undefined"}
            </ListItem>
            <ListItem>
              <code>iconSize:</code> {item.iconSize ?? "undefined"}
            </ListItem>
            <ListItem>
              <code>label:</code> {item.label}
            </ListItem>
            <ListItem>
              <code>url:</code> {item.url}
            </ListItem>
          </List>
        )
      }
    </NavListComponent>
  </Fragment>
</PageLayout>
