---
import type { HTMLAttributes } from "astro/types";
import { MissingSlotError } from "../../../utils/exceptions";
import { useI18n } from "../../../utils/i18n";
import Box from "../../atoms/box/box.astro";
import NavItem from "../../molecules/nav-item/nav-item.astro";
import Popover from "../../molecules/popover/popover.astro";

type Props = HTMLAttributes<"nav"> & {
  id: string;
};

const { class: className, id, ...attrs } = Astro.props;

if (!Astro.slots.has("nav")) throw new MissingSlotError("nav");
if (!Astro.slots.has("search")) throw new MissingSlotError("search");
if (!Astro.slots.has("settings")) throw new MissingSlotError("settings");

const { translate } = useI18n(Astro.currentLocale);
---

<nav {...attrs} class:list={["navbar", className]} id={id}>
  <Popover
    {...attrs}
    class="navbar-item"
    controllerId={`${id}-menu-controller`}
    data-item="menu"
    modalId={`${id}-menu-modal`}
    openTo="top"
  >
    <fragment slot="label">
      {
        (controllerId: string) => (
          <NavItem
            as="label"
            class="navbar-item-label"
            for={controllerId}
            icon="hamburger"
            iconSize={28}
            isBlock
            isRounded
          >
            {translate("navbar.main.nav.label")}
          </NavItem>
        )
      }
    </fragment>
    <fragment slot="modal">
      {
        (modalId: string) => (
          <Box class="navbar-item-modal" id={modalId}>
            <slot name="nav" />
          </Box>
        )
      }
    </fragment>
  </Popover>
  <Popover
    {...attrs}
    class:list={["navbar-item", "js-only"]}
    controllerId={`${id}-search-controller`}
    data-item="search"
    modalId={`${id}-search-modal`}
    openTo="top"
  >
    <fragment slot="label">
      {
        (controllerId: string) => (
          <NavItem
            as="label"
            class="navbar-item-label"
            for={controllerId}
            icon="search"
            iconSize={28}
            isBlock
            isRounded
          >
            {translate("navbar.search.label")}
          </NavItem>
        )
      }
    </fragment>
    <fragment slot="modal">
      {
        (modalId: string) => (
          <Box class="navbar-item-modal" id={modalId} isPadded>
            <slot name="search" />
          </Box>
        )
      }
    </fragment>
  </Popover>
  <Popover
    {...attrs}
    class:list={["navbar-item", "js-only"]}
    controllerId={`${id}-settings-controller`}
    data-item="settings"
    modalId={`${id}-settings-modal`}
    openTo="top"
  >
    <fragment slot="label">
      {
        (controllerId: string) => (
          <NavItem
            as="label"
            class="navbar-item-label"
            for={controllerId}
            icon="gear"
            iconSize={28}
            isBlock
            isRounded
          >
            {translate("navbar.settings.label")}
          </NavItem>
        )
      }
    </fragment>
    <fragment slot="modal">
      {
        (modalId: string) => (
          <Box class="navbar-item-modal" id={modalId} isPadded>
            <slot name="settings" />
          </Box>
        )
      }
    </fragment>
  </Popover>
</nav>

<style>
  .navbar {
    display: grid;
    grid-auto-columns: minmax(0, 1fr);
    grid-auto-flow: column dense;
    position: relative;

    @media (--md-or-above) {
      display: flex;
      flex-flow: column;
      gap: clamp(var(--spacing-2xs), 1.5dvi, var(--spacing-md));
      padding-inline: clamp(var(--spacing-sm), 2dvi, var(--spacing-2xl));
    }
  }

  .navbar-item {
    position: unset;

    @media (--sm-or-above) {
      position: relative;
    }

    &:where(:not(:last-child)) {
      border-inline-end: var(--border-size-sm) solid var(--color-border);

      @media (--md-or-above) {
        border-inline-end: none;
      }
    }

    &:where([data-item="menu"]) {
      @media (--md-or-above) {
        border-radius: var(--border-radii-md);
        box-shadow: var(--shadow-raised-to-top-left);
      }

      & > :global(:is(input, label)) {
        @media (--md-or-above) {
          display: none;
        }
      }
    }
  }

  .navbar-item-label {
    font-size: var(--font-size-xs);
    text-transform: uppercase;

    @media (--md-or-above) {
      flex-flow: row wrap;
      justify-content: start;
      padding: var(--spacing-xs)
        clamp(var(--spacing-2xs), 1dvi, var(--spacing-lg));
      background-color: var(--color-regular-light);
      border-color: var(--color-border);
      box-shadow: var(--shadow-raised-to-top-left);
      font-size: var(--font-size-sm);
      text-transform: none;

      &:where(:active) {
        background: var(--color-regular);
        box-shadow:
          inset 0 0 var(--border-size-md) var(--border-size-sm)
            oklch(from var(--color-shadow) l c h / 65%),
          var(--shadow-raised-to-top-left);
      }
    }
  }

  .navbar-item-modal {
    --x: 0;

    left: 0;
    right: 0;
    bottom: calc(100% + var(--spacing-4xs) - var(--border-size-sm));
    z-index: 10;
    background: var(--color-regular-lighter);
    border-block: var(--border-size-sm) solid var(--color-border);
    box-shadow: var(--shadow-elevated-to-bottom-center);

    @media (--sm-or-above) {
      min-width: max-content;
      left: auto;
      bottom: unset;
      top: 100%;
      border-inline: var(--border-size-sm) solid var(--color-border);
      box-shadow: var(--shadow-elevated-to-top-center);
    }

    @media (--md-or-above) {
      min-width: max-content;
      box-shadow: var(--shadow-elevated-to-top-left);
    }
  }

  :where([data-item="menu"]) .navbar-item-modal {
    transform-origin: 20% 100%;

    @media (--sm-or-above) {
      --x: -40%;

      right: auto;
      transform-origin: 25% calc(var(--one-px-in-rem) * -25);
    }

    @media (--md-or-above) {
      display: contents;
      position: relative;
      inset: unset;
      visibility: visible;
      opacity: 1;
      transform: none;
    }
  }

  :where([data-item="search"]) .navbar-item-modal {
    transform-origin: 50% 100%;

    @media (--sm-or-above) {
      --x: 25%;

      transform-origin: 90% calc(var(--one-px-in-rem) * -25);
    }
  }

  :where([data-item="settings"]) .navbar-item-modal {
    transform-origin: 80% 100%;

    @media (--sm-or-above) {
      transform-origin: 85% calc(var(--one-px-in-rem) * -25);
    }
  }

  :where([data-item="search"], [data-item="settings"]) .navbar-item-modal {
    @media (--md-or-above) {
      --x: var(--spacing-sm);
      --y: -50%;

      top: 50%;
      left: 100%;
      transform-origin: -125px 5%;
    }
  }
</style>
