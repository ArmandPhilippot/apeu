---
import type { ComponentProps, HTMLAttributes } from "astro/types";
import { Font } from "astro:assets";
import { ClientRouter } from "astro:transitions";
import type { Graph } from "schema-dts";
import { getJsonLdSchema } from "../../../lib/schema-dts/schema";
import { useI18n } from "../../../services/i18n";
import { useRouting } from "../../../services/routing";
import "../../../styles/global.css";
import type { Route, SEO, WithIcon } from "../../../types/data";
import { CONFIG } from "../../../utils/constants";
import Copyright from "../../atoms/copyright/copyright.astro";
import Head from "../../atoms/head/head.astro";
import License from "../../atoms/license/license.astro";
import ListItem from "../../atoms/list/list-item.astro";
import List from "../../atoms/list/list.astro";
import BackToTop from "../../molecules/back-to-top/back-to-top.astro";
import Branding from "../../molecules/branding/branding.astro";
import Breadcrumb from "../../molecules/breadcrumb/breadcrumb.astro";
import NavItem from "../../molecules/nav-item/nav-item.astro";
import SkipTo from "../../molecules/skip-to/skip-to.astro";
import Navbar from "../../organisms/navbar/navbar.astro";
import PageFrame from "../../organisms/page-frame/page-frame.astro";
import PageTransitionProvider from "../../providers/page-transition-provider.astro";
import SvgFiltersProvider from "../../providers/svg-filters-provider.astro";
import ThemeProvider from "../../providers/theme-provider.astro";

type Props = Omit<HTMLAttributes<"div">, "id"> &
  Pick<
    ComponentProps<typeof PageFrame>,
    "cover" | "feed" | "headings" | "title"
  > & {
    breadcrumb?: ComponentProps<typeof Breadcrumb>["items"] | null | undefined;
    graphs?: Graph["@graph"] | null | undefined;
    seo: SEO;
  };

const {
  breadcrumb,
  class: className,
  feed,
  graphs,
  headings,
  seo,
  slot,
  title,
  ...attrs
} = Astro.props;
const { locale, translate } = useI18n(Astro.currentLocale);
const { routeById } = await useRouting(locale);

const pagesRoutes = {
  blog: { ...routeById("blog"), icon: "blog" },
  blogroll: { ...routeById("blogroll"), icon: "globe" },
  bookmarks: { ...routeById("bookmarks"), icon: "bookmark" },
  contact: { ...routeById("contact"), icon: "contact" },
  feeds: { ...routeById("feeds"), icon: "feed" },
  guides: { ...routeById("guides"), icon: "guide" },
  home: { ...routeById("home"), icon: "home" },
  legalNotice: routeById("legal-notice"),
  notes: { ...routeById("notes"), icon: "notepad" },
  projects: { ...routeById("projects"), icon: "project" },
} satisfies Record<string, Omit<WithIcon<Route>, "iconSize">>;

const getLinks = <T extends keyof typeof pagesRoutes>(
  keys: T[],
  target: "header" | "footer"
) =>
  keys.map((key): WithIcon<Route> => {
    return {
      ...pagesRoutes[key],
      // eslint-disable-next-line no-magic-numbers -- Explicit enough.
      iconSize: target === "footer" ? 17 : 28,
    };
  });

const mainNavRoutes = getLinks(
  [
    "home",
    "blog",
    "guides",
    "notes",
    "projects",
    "bookmarks",
    "blogroll",
    "contact",
  ],
  "header"
);
const devOnlyRoutes = [{ label: "Design system", path: "/design-system" }];
const footerRoutes = [
  ...getLinks(["legalNotice", "feeds"], "footer"),
  ...(import.meta.env.DEV ? devOnlyRoutes : []),
];

const contentsId = translate("anchor.site.content");
const topId = translate("anchor.site.top");
const isHome = Astro.url.pathname === pagesRoutes.home.path;
---

<html
  data-shiki="light"
  data-theme="light"
  lang={locale}
  style="color-scheme: light;"
>
  <Head
    addBrandToTitle={!isHome}
    brand={CONFIG.BRAND}
    colorScheme="light dark"
    seo={seo}
    themeColor="#214769"
  >
    <ClientRouter fallback="swap" />
    <Font cssVariable="--font-inter" preload />
    <Font cssVariable="--font-cousine" preload />
    {
      graphs ? (
        <script
          is:inline
          set:html={JSON.stringify(getJsonLdSchema(graphs))}
          type="application/ld+json"
        />
      ) : null
    }
    <slot name="head" />
    <noscript>
      <style>
        .js-only {
          /* stylelint-disable-next-line declaration-no-important */
          display: none !important;
        }
      </style>
    </noscript>
    {/* These scripts are intentionally inlined to avoid FOUC. */}
    <script is:inline>
      !(function () {
        const e = localStorage.getItem("apeu-settings:theme"),
          t = "string" == typeof e ? JSON.parse(e) : void 0,
          o = window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light",
          c = e && ["dark", "light"].includes(t) ? t : o;
        (document.documentElement.setAttribute("data-theme", c),
          (document.documentElement.style.colorScheme = c));
      })();
    </script>
    <script is:inline>
      !(function () {
        const e = localStorage.getItem("apeu-settings:shiki"),
          t = "string" == typeof e ? JSON.parse(e) : void 0,
          o = document.documentElement.getAttribute("data-theme"),
          s = window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light",
          c = e && ["dark", "light"].includes(t) ? t : o === "auto" ? s : o;
        document.documentElement.setAttribute("data-shiki", c);
      })();
    </script>
  </Head>
  <body class="site svg-filter-paper" id={topId}>
    <ThemeProvider>
      <SvgFiltersProvider>
        <PageTransitionProvider>
          <SkipTo anchor={`#${contentsId}`}>
            {translate("cta.skip.to.content")}
          </SkipTo>
          <header class="site-header">
            <Branding
              brand={CONFIG.BRAND}
              class="site-branding"
              url={pagesRoutes.home.path}
            />
            <Navbar
              altLanguages={seo.languages}
              class="site-navbar svg-filter-paper"
              mainNav={mainNavRoutes}
            />
          </header>
          {
            breadcrumb?.length ? (
              <nav
                aria-label={translate("nav.label.breadcrumb")}
                class="site-breadcrumb"
              >
                <Breadcrumb items={breadcrumb} />
              </nav>
            ) : null
          }
          <div {...attrs} class="site-body svg-filter-paper-dark">
            <main class="site-main" data-pagefind-body id={contentsId}>
              <slot />
            </main>
          </div>
          <footer class="site-footer">
            <Copyright
              creationYear={CONFIG.CREATION_YEAR}
              owner={CONFIG.BRAND}
            />
            <License />
            <List class="site-footer-nav" isInline>
              {
                footerRoutes.map(({ label, path, ...item }) => (
                  <ListItem>
                    <NavItem {...item} href={path}>
                      {label}
                    </NavItem>
                  </ListItem>
                ))
              }
            </List>
            <BackToTop
              anchor={`#${topId}`}
              class="site-back-to-top"
              label={translate("cta.back.to.top")}
            />
          </footer>
        </PageTransitionProvider>
      </SvgFiltersProvider>
    </ThemeProvider>
  </body>
</html>

<style>
  .site {
    display: grid;
    grid-template-columns: minmax(0, 1fr);
    grid-template-rows:
      minmax(0, auto) minmax(0, auto) minmax(0, 1fr) minmax(0, auto)
      minmax(0, auto);
    min-height: 100dvh;

    @media (--md-or-above) {
      --site-col1-width: clamp(
        calc(300 * var(--one-px-in-rem)),
        21dvi,
        calc(600 * var(--one-px-in-rem))
      );

      grid-template-columns: var(--site-col1-width) minmax(0, 1fr) var(
          --spacing-dynamic
        );
    }
  }

  .site-header {
    grid-column: 1 / -1;
    grid-row: 1 / -1;
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;

    @media (--sm-or-above) {
      grid-row: 1;
      grid-template-columns: auto minmax(0, 1fr);
      gap: var(--spacing-dynamic);
      justify-content: space-between;
    }

    @media (--md-or-above) {
      grid-column: 1;
      grid-row: 1 / 4;
      grid-template-columns: subgrid;
      padding: var(--spacing-dynamic);
      z-index: 5;
    }
  }

  .site-branding {
    grid-column: 1 / -1;
    grid-row: 1;
    place-self: center;
    padding: var(--spacing-sm);

    @media (--sm-or-above) {
      grid-column: 1;
      grid-row: 1 / 3;
      align-self: self-end;
    }

    @media (--md-or-above) {
      padding: 0;
      margin-block-end: var(--spacing-sm);
    }
  }

  .site-navbar {
    grid-column: 1 / -1;
    grid-row: 5;
    position: sticky;
    bottom: 0;
    z-index: 10;
    border-block-start: var(--border-size-sm) solid var(--color-border);
    box-shadow: var(--shadow-raised-to-bottom-center);

    @media (--sm-or-above) {
      grid-column: 2;
      grid-row: 1;
      position: relative;
      background: none;
      border-block-start: none;
      border-inline-start: var(--border-size-sm) solid var(--color-border);
      box-shadow: none;
    }

    @media (--md-or-above) {
      grid-column: 1;
      grid-row: 3 / 5;
      gap: var(--spacing-dynamic);
      border-inline-start: none;
    }
  }

  .site-breadcrumb {
    grid-column: 1 / -1;
    grid-row: 2;
    display: flex;
    justify-content: center;
    border-block-start: var(--border-size-sm) solid var(--color-border);

    @media (--md-or-above) {
      grid-row: 1;
      margin-inline: var(--site-col1-width) var(--spacing-dynamic);
      padding-inline-start: var(--spacing-sm);
      justify-content: start;
      border-block-start: none;
    }
  }

  .site-body {
    grid-column: 1 / -1;
    grid-row: 3;
    border-block-start: var(--border-size-sm) solid var(--color-border);
    box-shadow:
      inset 0 var(--border-size-md) var(--border-size-md)
        calc(var(--border-size-md) * -1) var(--color-shadow-inset-dark),
      inset 0 calc(var(--border-size-md) * -1) var(--border-size-md)
        calc(var(--border-size-md) * -1) var(--color-shadow-inset-dark);

    @media (--md-or-above) {
      grid-row: 2 / 4;
      margin-inline: var(--site-col1-width) var(--spacing-dynamic);
      border: var(--border-size-sm) solid var(--color-border);
      border-radius: var(--border-radii-md);
      box-shadow: inset 0 0 var(--border-size-md) var(--border-size-md)
        var(--color-shadow-inset-dark);
    }
  }

  :global(:where(.site:not(:has(.site-breadcrumb)))) .site-body {
    grid-row: 2 / 4;

    @media (--md-or-above) {
      grid-row: 1 / 4;
      margin-block-start: var(--spacing-dynamic);
    }
  }

  .site-main {
    container: main / inline-size;
    width: 100%;
    min-height: 100%;

    @media (--prose) {
      padding: var(--spacing-dynamic);
    }
  }

  .site-footer {
    grid-column: 1 / -1;
    grid-row: 4;
    display: flex;
    flex-flow: row wrap;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-3xs);
    padding: var(--spacing-dynamic);
    font-size: var(--font-size-sm);
  }

  .site-back-to-top {
    position: fixed;
    bottom: calc(7.2ch + 1dvi + var(--spacing-sm));
    right: calc(1dvi + var(--spacing-sm));
    z-index: 2;

    @media (--sm-or-above) {
      bottom: calc(1dvi + var(--spacing-sm));
    }
  }
</style>
