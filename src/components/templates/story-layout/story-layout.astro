---
import type { StoryLayoutProps } from "../../../lib/astro/integrations/astro-stories";
import type { SEO } from "../../../types/data";
import { getStorySeo } from "../../../utils/stories";
import Page from "../../organisms/page/page.astro";
import Layout from "../layout/layout.astro";

type FrontMatter = {
  seo?: Partial<SEO> | undefined;
  title: string;
  wrapInLayout?: boolean | undefined;
  wrapInPage?: boolean | undefined;
};

type Props = StoryLayoutProps<FrontMatter>;

const { story } = Astro.props;
const isStory = story.type === "story";
const headings = isStory ? story.headings : null;
const title = isStory ? story.frontmatter.title : story.label;
const seo = getStorySeo({
  breadcrumb: story.breadcrumb,
  seo: isStory ? story.frontmatter.seo : null,
});
const useLayout = isStory ? (story.frontmatter.wrapInLayout ?? true) : true;
const LayoutComponent = useLayout ? Layout : Fragment;
const usePage = isStory ? (story.frontmatter.wrapInPage ?? true) : true;
const PageComponent = usePage ? Page : Fragment;
---

<LayoutComponent breadcrumb={story.breadcrumb} seo={seo}>
  <PageComponent headings={headings} title={title}>
    <slot />
  </PageComponent>
</LayoutComponent>

<style is:global>
  @layer components {
    .wrapper {
      margin-block-end: var(--spacing-md);
    }

    .grid {
      display: grid;
      grid-template-columns: repeat(
        auto-fit,
        min(
          calc(100dvw - 2 * var(--spacing-md)),
          var(--col-size, calc(var(--size-prose) / 3.25))
        )
      );
      gap: var(--spacing-md);
    }

    .flex {
      display: flex;
      flex-flow: column wrap;
      gap: var(--spacing-sm);
    }

    .token-box {
      display: flex;
      flex-flow: row wrap;
      place-items: center;
      place-content: center;
      min-width: 5rem;
      min-height: 3rem;
      padding: var(--spacing-xs);
      border: var(--border-size-sm) solid transparent;
    }
  }
</style>
