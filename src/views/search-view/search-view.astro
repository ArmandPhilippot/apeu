---
import "@pagefind/default-ui/css/ui.css";
import type { ComponentProps } from "astro/types";
import PageLayout from "../../components/templates/page-layout/page-layout.astro";
import { getWebPageGraph } from "../../lib/schema-dts/graphs/webpage-graph";
import { getBreadcrumb } from "../../services/breadcrumb";
import type { QueriedEntry } from "../../services/collections";
import { CONFIG } from "../../utils/constants";

type Props = Partial<ComponentProps<typeof PageLayout>> & {
  entry: QueriedEntry<"pages">;
};

const {
  entry: { Content, hasContent, ...page },
  ...props
} = Astro.props;
const breadcrumb = await getBreadcrumb({ route: Astro.url.pathname });
const graphs: ComponentProps<typeof PageLayout>["graphs"] = [
  await getWebPageGraph({
    ...page,
    breadcrumb,
    type: "SearchResultsPage",
  }),
];
---

<PageLayout
  breadcrumb={breadcrumb}
  description={page.description}
  graphs={graphs}
  headings={page.headings}
  seo={page.seo}
  title={page.title}
  {...props}
>
  <Fragment slot="body">
    {hasContent && <Content />}
    <ap-pagefind-search
      class="pagefind-search"
      data-query-param={CONFIG.SEARCH.QUERY_PARAM}
    >
      <div class="pagefind-ui" id="pagefind"></div>
    </ap-pagefind-search>
  </Fragment>
</PageLayout>

<style>
  /* stylelint-disable selector-class-pattern -- The class names come from Pagefind so we don't have control over it. */
  .pagefind-search {
    --pagefind-ui-scale: 1.05;
    --pagefind-ui-primary: var(--color-primary);
    --pagefind-ui-text: var(--color-on-regular);
    --pagefind-ui-tag: var(--color-regular-dark);
    --pagefind-ui-background: var(--color-regular);
    --pagefind-ui-border: var(--color-border);
    --pagefind-ui-border-width: var(--border-size-sm);
    --pagefind-ui-border-radius: var(--border-radii-md);
    --pagefind-ui-font: inherit;

    & :global(mark) {
      background: var(--color-info);
      color: var(--color-on-info);
    }

    & :global(.pagefind-ui__search-input) {
      --pagefind-ui-background: var(--color-regular-dark);

      &::placeholder {
        color: var(--color-muted-faded);
        /* stylelint-disable-next-line declaration-no-important -- We need to override Pagefind styles. */
        opacity: 1 !important;
      }

      &:focus-visible {
        background: var(--color-regular);
        border-color: var(--color-primary);
        box-shadow: none;
        outline: var(--color-primary-lighter) solid var(--border-size-sm);
      }
    }

    & :global(.pagefind-ui__button) {
      --pagefind-ui-background: var(--color-regular-light);

      transition: outline 0.18s ease-in-out 0s;

      &:hover,
      &:focus {
        --pagefind-ui-background: var(--color-regular-lighter);
      }

      &:focus,
      &:focus-visible {
        outline: var(--color-primary-lighter) solid var(--border-size-md);
      }
    }

    & :global(.pagefind-ui__search-clear) {
      --pagefind-ui-background: var(--color-regular-light);

      display: flex;
      place-items: center;
      padding-inline: var(--spacing-sm);
      border: var(--border-size-sm) solid var(--color-border);
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
      transition: outline 0.18s ease-in-out 0s;

      &:hover,
      &:focus {
        --pagefind-ui-background: var(--color-regular-lighter);
      }

      &:focus {
        outline: var(--color-primary-lighter) solid var(--border-size-md);
        outline-offset: calc(var(--border-size-md) * -1);
      }
    }

    & :global(.pagefind-ui__result-link) {
      --pagefind-ui-text: var(--color-primary);

      text-underline-offset: 0.4ex;
      transition: outline-offset 0.18s linear 0s;

      &:focus-visible {
        border-radius: var(--border-radii-sm);
        outline: var(--color-primary-lighter) solid var(--border-size-md);
        outline-offset: var(--border-size-md);
      }
    }
  }
</style>

<script>
  class APPagefindSearch extends HTMLElement {
    #queryParam: string | undefined;

    constructor() {
      super();
      this.initSearch = this.initSearch.bind(this);
    }

    connectedCallback() {
      this.#queryParam = this.dataset.queryParam;

      window.addEventListener("DOMContentLoaded", this.initSearch);
    }

    disconnectedCallback() {
      window.removeEventListener("DOMContentLoaded", this.initSearch);
    }

    #addEllipsisToExcerpt(excerpt: string, loc: number | undefined): string {
      return `${loc === 0 ? "" : "&hellip; "}${excerpt}&hellip;`;
    }

    async #initPagefindUI(): Promise<
      Record<"triggerSearch", (query: string) => void>
    > {
      // @ts-expect-error â€” Missing types for @pagefind/default-ui package.
      const { PagefindUI } = await import("@pagefind/default-ui");

      return new PagefindUI({
        debounceTimeoutMs: 200,
        element: "#pagefind",
        excerptLength: 100,
        pageSize: 10,
        processResult: (result: { excerpt: string; locations: number[] }) => {
          return {
            ...result,
            excerpt: result.excerpt
              ? this.#addEllipsisToExcerpt(result.excerpt, result.locations[0])
              : result.excerpt,
          };
        },
        resetStyles: true,
        showEmptyFilters: false,
        showImages: false,
        showSubResults: false,
      });
    }

    #getSearchQuery(): string | null {
      if (
        !this.#queryParam ||
        !window.location.search.includes(`?${this.#queryParam}=`)
      )
        return null;

      return window.location.search.replace(
        // eslint-disable-next-line no-useless-escape -- False positive
        new RegExp(`.*\?${this.#queryParam}=`),
        ""
      );
    }

    async initSearch(): Promise<void> {
      const search = await this.#initPagefindUI();
      const query = this.#getSearchQuery();

      if (query) search.triggerSearch(query);
    }
  }

  customElements.define("ap-pagefind-search", APPagefindSearch);
</script>
