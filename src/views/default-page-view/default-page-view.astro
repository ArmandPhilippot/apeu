---
import type { ComponentProps } from "astro/types";
import { components } from "../../components/mdx";
import CollectionMeta from "../../components/organisms/collection-meta/collection-meta.astro";
import PageFrame from "../../components/organisms/page-frame/page-frame.astro";
import Layout from "../../components/templates/layout/layout.astro";
import type { RoutableCollectionKey } from "../../lib/astro/collections/types";
import { getWebPageGraph } from "../../lib/schema-dts/graphs/webpage-graph";
import { getBreadcrumb } from "../../services/breadcrumb";
import type { QueriedEntry } from "../../services/collections";

type Props = Partial<ComponentProps<typeof Layout>> & {
  entry: QueriedEntry<RoutableCollectionKey>;
};

const {
  entry: { Content, hasContent, ...page },
  ...props
} = Astro.props;
const breadcrumb = await getBreadcrumb({ route: Astro.url.pathname });
const graphs: ComponentProps<typeof Layout>["graphs"] = [
  await getWebPageGraph({ ...page, breadcrumb }),
];
---

<Layout breadcrumb={breadcrumb} graphs={graphs} seo={page.seo} {...props}>
  <PageFrame headings={page.headings} title={page.title}>
    <CollectionMeta data={page.meta} slot="meta" />
    {
      hasContent && (
        <Content components={components} slot={hasContent ? "body" : ""} />
      )
    }
  </PageFrame>
</Layout>
