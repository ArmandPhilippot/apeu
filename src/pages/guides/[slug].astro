---
import type { GetStaticPaths } from "astro";
import type { ComponentProps } from "astro/types";
import OpenGraphArticle from "../../components/atoms/open-graph-article/open-graph-article.astro";
import { components } from "../../components/mdx";
import CollectionMeta from "../../components/organisms/collection-meta/collection-meta.astro";
import PageLayout from "../../components/templates/page-layout/page-layout.astro";
import { getArticleGraph } from "../../lib/schema-dts/graphs/article-graph";
import { getWebPageGraph } from "../../lib/schema-dts/graphs/webpage-graph";
import { getBreadcrumb } from "../../services/breadcrumb";
import { queryCollection } from "../../services/collections";

export const getStaticPaths = (async () => {
  const { entries: guides } = await queryCollection("guides", {
    where: { locale: "fr" },
  });

  return guides.map(({ slug, ...guide }) => {
    return {
      params: {
        slug,
      },
      props: { ...guide },
    };
  });
}) satisfies GetStaticPaths;

const { Content, ...page } = Astro.props;
const breadcrumb = await getBreadcrumb({ route: Astro.url.pathname });
const graphs: ComponentProps<typeof PageLayout>["graphs"] = [
  await getWebPageGraph({ ...page, breadcrumb, route: Astro.url.pathname }),
  await getArticleGraph({ ...page, route: Astro.url.pathname }),
];
---

<PageLayout
  breadcrumb={breadcrumb}
  cover={page.cover}
  description={page.description}
  graphs={graphs}
  seo={page.seo}
  title={page.title}
  toc={page.headings}
>
  <OpenGraphArticle
    modifiedTime={page.meta.updatedOn}
    publishedTime={page.meta.publishedOn}
    slot="open-graph"
    tags={page.meta.tags?.map((tag) => tag.title)}
  />
  <CollectionMeta data={page.meta} slot="meta" />
  <Content components={components} slot="body" />
</PageLayout>
