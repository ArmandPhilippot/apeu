---
import type { HTMLTag, Polymorphic } from "astro/types";

type ButtonKind = "discreet" | "neutral" | "primary" | "secondary";

type Props<T extends Extract<HTMLTag, "a" | "button"> = "button"> =
  Polymorphic<{ as: T }> & {
    /**
     * Is the button targeting an external resource?
     *
     * @default false
     */
    isExternal?: boolean | null | undefined;
    /**
     * The button kind.
     *
     * @default "secondary"
     */
    kind?: ButtonKind | null | undefined;
  };

const {
  as: Tag = "button",
  class: className,
  isExternal = false,
  kind = "secondary",
  slot,
  ...attrs
} = Astro.props;

if (isExternal && kind === "primary") {
  throw new Error("A button must not use primary kind for external resources!");
}
---

<Tag
  {...attrs}
  class:list={[className, "btn"]}
  {...isExternal && { "data-external": true }}
  data-type={kind}><slot /></Tag
>

<style>
  @layer components {
    .btn {
      display: flex;
      flex-flow: row wrap;
      place-content: center;
      place-items: center;
      gap: var(--spacing-xs);
      width: fit-content;
      min-width: calc(var(--one-px-in-rem) * 48);
      min-height: calc(var(--one-px-in-rem) * 48);
      padding: var(--spacing-xs) var(--spacing-sm);
      cursor: pointer;
      background: var(--btn-bg);
      color: var(--btn-fg);
      font-size: var(--font-size-md);
      font-weight: var(--font-weight-bold);
      line-height: var(--line-height);
      outline: var(--border-size-md) solid transparent;
      outline-offset: calc(var(--border-size-md) * -1);
      text-decoration: none;

      @media screen and (any-pointer: fine) {
        min-width: unset;
        min-height: unset;
      }

      &[aria-busy="true"] {
        cursor: wait;
      }

      &[data-external="true"]::after {
        display: inline-block;
        content: var(--external-icon);
      }

      &:is([aria-disabled="true"], :disabled) {
        cursor: not-allowed;
      }

      &:not([data-type="neutral"]) {
        border: var(--btn-border-size) solid var(--btn-border);
        border-radius: var(--border-radii-md);
        transition:
          box-shadow 0.15s ease-in-out 0s,
          color 0.15s linear 0s,
          outline-offset 0.1s linear 0s,
          transform 0.15s ease-in-out 0s;
      }

      &:where(:not([data-type="neutral"], [aria-disabled="true"], :disabled)) {
        &:hover {
          transform: translateX(calc(var(--btn-border-size) * -2))
            translateY(calc(var(--btn-border-size) * -2));
        }

        &:active {
          transform: translateY(var(--btn-border-size))
            translateX(var(--btn-border-size));
        }
      }

      &[data-type="neutral"] {
        background: none;
        border: none;
        color: inherit;

        &:focus-visible {
          outline-color: var(--color-primary);
        }
      }

      &[data-type="primary"] {
        --btn-bg: var(--color-primary);
        --btn-fg: var(--color-on-primary);
        --btn-border: var(--color-primary-dark);
        --btn-border-size: var(--border-size-sm);
        --btn-shadow-color: var(--btn-border);
        --btn-shadow-size: calc(var(--btn-border-size) * 2);
        --btn-inset-shadow-color: var(--color-border);

        box-shadow:
          inset 0 0 0 var(--border-size-sm) var(--btn-inset-shadow-color),
          var(--btn-shadow-size) var(--btn-shadow-size) 0 0
            var(--btn-shadow-color);

        &:focus-visible {
          outline-color: var(--color-on-primary);
          outline-offset: calc(var(--border-size-md) * -3);
        }

        &:is([aria-disabled="true"], :disabled) {
          --btn-bg: var(--color-muted-lighter);
          --btn-fg: var(--color-on-muted);
          --btn-border: var(--color-muted-dark);
          --btn-inset-shadow-color: var(--color-regular-low);
        }

        &:not([aria-disabled="true"], :disabled) {
          &:hover {
            --btn-bg: var(--color-primary-light);
            --btn-border: var(--color-primary);
            --btn-shadow-size: calc(var(--btn-border-size) * 4);
          }

          &:active {
            --btn-bg: var(--color-primary-dark);
            --btn-border: var(--color-primary-darker);
            --btn-shadow-size: 0;
          }
        }
      }

      &[data-type="secondary"] {
        --btn-bg: var(--color-regular-light);
        --btn-fg: var(--color-primary);
        --btn-border: var(--color-primary);
        --btn-border-size: var(--border-size-sm);
        --btn-shadow-color: var(--btn-border);
        --btn-shadow-size: calc(var(--btn-border-size) * 2);

        box-shadow: var(--btn-shadow-size) var(--btn-shadow-size) 0 0
          var(--btn-shadow-color);

        &:focus-visible {
          outline-color: var(--color-primary);
          outline-offset: calc(var(--border-size-md) * -2);
        }

        &:is([aria-disabled="true"], :disabled) {
          --btn-bg: var(--color-muted-lighter);
          --btn-fg: var(--color-on-muted);
          --btn-border: var(--color-muted-dark);
        }

        &:not([aria-disabled="true"], :disabled) {
          &:hover {
            --btn-bg: var(--color-regular-lighter);
            --btn-border: var(--color-primary-light);
            --btn-shadow-size: calc(var(--btn-border-size) * 4);
          }

          &:active {
            --btn-bg: var(--color-regular);
            --btn-border: var(--color-primary-dark);
            --btn-shadow-size: 0;
          }
        }
      }

      &[data-type="discreet"] {
        --btn-bg: var(--color-regular-light);
        --btn-fg: var(--color-on-regular);
        --btn-border: var(--color-border-light);
        --btn-border-size: var(--border-size-sm);
        --btn-shadow-color: var(--btn-border);
        --btn-shadow-size: calc(var(--btn-border-size) * 2);

        box-shadow: var(--btn-shadow-size) var(--btn-shadow-size) 0 0
          var(--btn-shadow-color);

        &:focus-visible {
          outline-color: var(--color-on-regular);
          outline-offset: calc(var(--border-size-md) * -2);
        }

        &:is([aria-disabled="true"], :disabled) {
          --btn-bg: var(--color-muted-lighter);
          --btn-fg: var(--color-on-muted);
          --btn-border: var(--color-muted-dark);
        }

        &:not([aria-disabled="true"], :disabled) {
          &:hover {
            --btn-bg: var(--color-regular-lighter);
            --btn-border: var(--color-border-lighter);
            --btn-shadow-size: calc(var(--btn-border-size) * 4);
          }

          &:active {
            --btn-bg: var(--color-regular);
            --btn-border: var(--color-border-dark);
            --btn-shadow-size: 0;
          }
        }
      }
    }
  }
</style>
