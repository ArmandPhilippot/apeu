---
import type { ComponentProps } from "astro/types";
import Grid from "../../atoms/grid/grid.astro";
import ListItem from "../../atoms/list/list-item.astro";

type Props = Omit<
  ComponentProps<typeof Grid>,
  "as" | "cols" | "justifyContent"
> & {
  isContainer?: boolean | null | undefined;
  items: unknown[];
};

const {
  class: className,
  gap = "md",
  isContainer = false,
  items,
  ...attrs
} = Astro.props;

if (!Astro.slots.has("default"))
  throw new Error(
    "CardsList requires a function that describes how to render a single item as child.",
  );
---

<Grid
  {...attrs}
  as="ul"
  class:list={["cards-list", className]}
  cols="auto-fit"
  gap={gap}
  justifyContent="center"
>
  {
    items.map((item, index, list) => (
      <ListItem
        class:list={["cards-list-item", { container: isContainer }]}
        set:html={Astro.slots.render("default", [item, index, list])}
      />
    ))
  }
</Grid>

<style>
  .cards-list-item {
    & > :global(*) {
      height: 100%;
      margin-inline: auto;
    }

    &:where(.container) {
      container: item / inline-size;
    }
  }
</style>
