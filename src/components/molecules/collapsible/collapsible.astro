---
import type { ComponentProps } from "astro/types";
import { MissingSlotError } from "../../../utils/exceptions";
import Box from "../../atoms/box/box.astro";

type Props = Omit<ComponentProps<typeof Box<"details">>, "as" | "isBordered">;

const { class: className, isProse, ...attrs } = Astro.props;

if (!Astro.slots.has("label")) throw new MissingSlotError("label");
---

<Box
  {...attrs}
  as="details"
  class:list={["collapsible", className]}
  isBordered
  isProse={isProse}
>
  <Box as="summary" class="collapsible-label" isPadded isProse={isProse}>
    <slot name="label" />
    <span aria-hidden="true" class="collapsible-icon"></span>
  </Box>
  <slot />
</Box>

<style>
  .collapsible-label {
    display: flex;
    flex-flow: row nowrap;
    align-items: center;
    padding-inline-end: clamp(var(--spacing-sm), 1.5dvw, var(--spacing-md));
    color: var(--color-primary-faded);
    cursor: pointer;
    font-weight: var(--font-weight-bold);

    &:where(:hover, :focus) {
      color: var(--color-primary);
    }

    &:where(.prose) {
      padding-block: var(--spacing-sm);
    }
  }

  :where(.collapsible:is([open])) .collapsible-label {
    border-block-end: var(--border-size-sm) solid var(--color-border);
  }

  .collapsible-icon {
    --icon-size: calc(var(--one-px-in-rem) * 48);

    display: flex;
    place-content: center;
    place-items: center;
    min-width: var(--icon-size);
    aspect-ratio: 1 / 1;
    margin-inline-start: auto;
    padding-inline-start: clamp(var(--spacing-sm), 1.5dvw, var(--spacing-md));
    position: relative;
    border-inline-start: var(--border-size-sm) solid var(--color-border);

    &::before,
    &::after {
      content: "";
      position: absolute;
      background: currentColor;
      transition: transform 0.25s ease-out 0s;
    }

    &::before {
      width: calc(var(--one-px-in-rem) * 4);
      height: 50%;
    }

    &::after {
      width: 50%;
      height: calc(var(--one-px-in-rem) * 4);
    }
  }

  :where(.collapsible:is([open])) .collapsible-icon::before {
    transform: scaleY(0);
  }
</style>
