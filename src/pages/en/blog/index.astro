---
import { Icon } from "astro-icon/components";
import type { ComponentProps } from "astro/types";
import Box from "../../../components/atoms/box/box.astro";
import Button from "../../../components/atoms/button/button.astro";
import Heading from "../../../components/atoms/heading/heading.astro";
import { components } from "../../../components/mdx";
import CardsList from "../../../components/molecules/cards-list/cards-list.astro";
import CollectionCard from "../../../components/organisms/collection-card/collection-card.astro";
import PageLayout from "../../../components/templates/page-layout/page-layout.astro";
import { queryCollection, queryEntry } from "../../../lib/astro/collections";
import { getBlogGraph } from "../../../lib/schema-dts/graphs/blog-graph";
import { getWebPageGraph } from "../../../lib/schema-dts/graphs/webpage-graph";
import { useI18n } from "../../../utils/i18n";

const { locale, route, translate, translatePlural } = useI18n(
  Astro.currentLocale
);
const { Content, ...page } = await queryEntry({
  collection: "pages",
  id: "blog",
  locale,
});
const breadcrumb: ComponentProps<typeof PageLayout>["breadcrumb"] = [
  { label: translate("page.home.title"), url: route("home") },
  { label: page.title, url: Astro.url.href },
];
const graphs: ComponentProps<typeof PageLayout>["graphs"] = [
  await getWebPageGraph({ ...page, breadcrumb }),
  await getBlogGraph(page),
];
const { entries: categories } = await queryCollection("blog.categories", {
  format: "preview",
  orderBy: { key: "title", order: "ASC" },
  where: { locale },
});
const { entries: recentPosts, total: totalPosts } = await queryCollection(
  "blog.posts",
  {
    first: 2,
    format: "preview",
    orderBy: { key: "publishedOn", order: "DESC" },
    where: { locale },
  }
);
const getPostCTA = (
  title: string
): ComponentProps<typeof CollectionCard>["cta"] => {
  return {
    ariaLabel: translate("cta.read.more.a11y", { title }),
    label: translate("cta.read.more"),
  };
};
---

<PageLayout
  breadcrumb={breadcrumb}
  description={page.description}
  graphs={graphs}
  isIndex
  seo={page.seo}
  title={page.title}
>
  <Content components={components} slot={page.hasContent ? "body" : ""} />
  <Fragment slot="disconnected-body">
    <Box
      class="blog-section-heading"
      elevation="raised"
      isBordered
      isCentered
      isPadded
      isProse
      isRounded
      isSpaced
    >
      <Heading>{translate("page.blog.section.recent.posts.heading")}</Heading>
      <div class="blog-section-cta">
        <Button as="a" href={route("blog.posts")}>
          {translatePlural("cta.see.all.posts", { count: totalPosts })}
        </Button>
        <Button
          aria-label={translate("cta.subscribe.a11y", {
            title: translate("page.blog.posts.title"),
          })}
          as="a"
          href={`${route("blog.posts")}/feed.xml`}
        >
          <Icon aria-hidden="true" name="feed" />
          {translate("cta.subscribe")}
        </Button>
      </div>
    </Box>
    <CardsList isContainer items={recentPosts} sizeMinCols="35rem">
      {
        (post: (typeof recentPosts)[number]) => (
          <CollectionCard
            class="post-card"
            cta={getPostCTA(post.title)}
            elevation="raised"
            entry={{
              ...post,
              cover: post.cover
                ? {
                    ...post.cover,
                    loading: "eager",
                  }
                : null,
            }}
            featuredMeta={{ icon: "blog", key: "publishedOn" }}
            headingLvl="h3"
          />
        )
      }
    </CardsList>
    <Box
      class="blog-section-heading"
      elevation="raised"
      isBordered
      isCentered
      isPadded
      isProse
      isRounded
      isSpaced
    >
      <Heading>{translate("page.blog.section.categories.heading")}</Heading>
    </Box>
    <CardsList isContainer items={categories} sizeMinCols="27rem">
      {
        ({ meta, ...cat }: (typeof categories)[number]) => (
          <CollectionCard
            class="category-card"
            elevation="raised"
            entry={cat}
            headingLvl="h3"
          />
        )
      }
    </CardsList>
  </Fragment>
</PageLayout>

<style>
  .blog-section-heading,
  .blog-section-cta {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm) var(--spacing-md);
  }

  .blog-section-heading {
    flex-flow: row wrap;
    justify-content: center;

    & > :global(*:first-child) {
      @container (width >= 44em) {
        margin-inline-end: auto;
      }
    }
  }

  .blog-section-cta {
    flex-flow: column wrap;

    @container (width >= 44em) {
      flex-flow: row wrap;
    }
  }

  .post-card {
    @container body (width >= 55em) {
      border: var(--border-size-sm) solid var(--color-border);
    }
  }

  .category-card {
    @container body (width >= 51.3em) {
      border: var(--border-size-sm) solid var(--color-border);
    }
  }
</style>
