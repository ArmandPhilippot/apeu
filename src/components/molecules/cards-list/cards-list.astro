---
import type { ComponentProps } from "astro/types";
import Grid from "../../atoms/grid/grid.astro";
import ListItem from "../../atoms/list/list-item.astro";

type Props = Omit<
  ComponentProps<typeof Grid>,
  "as" | "cols" | "gap" | "justifyContent"
> & {
  isContainer?: boolean | null | undefined;
  isOrdered?: boolean | null | undefined;
  items: unknown[];
};

const {
  class: className,
  isContainer = false,
  isOrdered = false,
  items,
  slot,
  ...attrs
} = Astro.props;

if (!Astro.slots.has("default")) {
  throw new Error(
    "CardsList requires a function that describes how to render a single item as child."
  );
}

const tag = isOrdered ? "ol" : "ul";
---

<Grid
  {...attrs}
  as={tag}
  class:list={[className, "cards-list"]}
  cols="auto-fit"
  justifyContent="center"
>
  {
    items.map((item, index, list) => (
      <ListItem
        class="cards-list-item"
        {...(isContainer && { "data-container": true })}
        set:html={Astro.slots.render("default", [item, index, list])}
      />
    ))
  }
</Grid>

<style>
  @layer components {
    .cards-list {
      gap: var(--gutter);
    }

    .cards-list-item {
      &:where([data-container="true"]) {
        container: item / inline-size;
      }

      & > :global(*) {
        height: 100%;
        margin-inline: auto;
      }
    }
  }
</style>
