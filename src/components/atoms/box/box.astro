---
import type { HTMLTag, Polymorphic } from "astro/types";
import type { Elevation } from "../../../types/tokens";

type Props<T extends HTMLTag = "div"> = Polymorphic<{ as: T }> & {
  elevation?: Elevation | null | undefined;
  isBordered?: boolean | null | undefined;
  isCentered?: boolean | null | undefined;
  isPadded?: boolean | null | undefined;
  isProse?: boolean | null | undefined;
  isRounded?: boolean | null | undefined;
  isSpaced?: boolean | null | undefined;
};

const {
  as: Tag = "div",
  class: className,
  elevation,
  isBordered = false,
  isCentered = false,
  isPadded = false,
  isProse = false,
  isRounded = false,
  isSpaced = false,
  ...attrs
} = Astro.props;
---

<Tag
  {...attrs}
  class:list={["box", className]}
  {...isBordered && { "data-border": true }}
  {...isCentered && { "data-centered": true }}
  {...!!elevation && { "data-elevation": elevation }}
  {...isPadded && { "data-padded": true }}
  {...isProse && { "data-prose": true }}
  {...isRounded && { "data-rounded": true }}
  {...isSpaced && { "data-spaced": true }}><slot /></Tag
>

<style>
  .box {
    background: var(--color-regular);

    &:where([data-centered="true"]) {
      margin-inline: auto;
    }

    &:where([data-prose="true"]) {
      max-width: var(--size-prose);

      & > :global(*:first-child) {
        margin-block-start: 0;
      }

      & > :global(*:last-child) {
        margin-block-end: 0;
      }
    }

    &:where([data-border="true"][data-prose="true"]) {
      border-block: var(--border-size-sm) solid var(--color-border);

      @container (width > 55em) {
        border-inline: var(--border-size-sm) solid var(--color-border);
      }
    }

    &:where([data-border="true"]:not([data-prose="true"])) {
      border: var(--border-size-sm) solid var(--color-border);
    }

    &:where([data-centered="true"][data-prose="true"]) {
      width: 100%;
    }

    &:where([data-elevation="elevated"][data-prose="true"]) {
      box-shadow: var(--shadow-elevated-to-top-center);

      @container (width > 55em) {
        box-shadow: var(--shadow-elevated-to-top-left);
      }
    }

    &:where([data-elevation="elevated"]:not([data-prose="true"])) {
      box-shadow: var(--shadow-elevated-to-top-left);
    }

    &:where([data-elevation="floating"][data-prose="true"]) {
      box-shadow: var(--shadow-floating-to-top-center);

      @container (width > 55em) {
        box-shadow: var(--shadow-floating-to-top-left);
      }
    }

    &:where([data-elevation="floating"]:not([data-prose="true"])) {
      box-shadow: var(--shadow-floating-to-top-left);
    }

    &:where([data-elevation="raised"][data-prose="true"]) {
      box-shadow: var(--shadow-raised-to-top-center);

      @container (width > 55em) {
        box-shadow: var(--shadow-raised-to-top-left);
      }
    }

    &:where([data-elevation="raised"]:not([data-prose="true"])) {
      box-shadow: var(--shadow-raised-to-top-left);
    }

    &:where([data-padded="true"][data-prose="true"]) {
      padding: clamp(var(--spacing-md), 1.5dvi, var(--spacing-xl))
        clamp(var(--spacing-md), 2.5dvi, var(--spacing-xl));
    }

    &:where([data-padded="true"]:not([data-prose="true"])) {
      padding: var(--spacing-sm)
        clamp(var(--spacing-sm), 1.5dvi, var(--spacing-md));
    }

    &:where([data-rounded="true"][data-prose="true"]) {
      @container (width > 55em) {
        border-radius: var(--border-radii-md);
      }
    }

    &:where([data-rounded="true"]:not([data-prose="true"])) {
      border-radius: var(--border-radii-md);
    }

    &:where([data-spaced="true"][data-prose="true"]) {
      margin-block: clamp(var(--spacing-2xs), 4dvi, var(--spacing-md));

      @container (width > 55em) {
        margin-block: var(--spacing-md);
      }
    }

    &:where([data-spaced="true"]:not([data-prose="true"])) {
      margin-block: var(--spacing-md);
    }
  }
</style>
