---
import type { GetStaticPaths } from "astro";
import type { ComponentProps } from "astro/types";
import { getEntry, render } from "astro:content";
import Link from "../../../components/atoms/link/link.astro";
import ListItem from "../../../components/atoms/list/list-item.astro";
import List from "../../../components/atoms/list/list.astro";
import Pagination from "../../../components/organisms/pagination/pagination.astro";
import PageLayout from "../../../components/templates/page-layout/page-layout.astro";
import { queryCollection } from "../../../lib/astro/collections/query-collection";
import { CONFIG } from "../../../utils/constants";
import { useI18n } from "../../../utils/i18n";
import { renderPaginationLink } from "../../../utils/pagination";

export const getStaticPaths = (async ({ paginate }) => {
  const page = await getEntry("pages", "en/blog/posts");
  const { entries: posts } = await queryCollection("blogPosts", {
    format: "preview",
    orderBy: { key: "publishedOn", order: "DESC" },
    where: { locale: "en" },
  });

  return paginate(posts, { pageSize: CONFIG.ITEMS_PER_PAGE }).map(
    (paginatedPosts) => {
      const { data, url, ...pagination } = paginatedPosts.props.page;
      return {
        ...paginatedPosts,
        params: {
          page: paginatedPosts.params.page
            ? `/page/${paginatedPosts.params.page}`
            : undefined,
        },
        props: {
          page,
          pagination,
          posts: data,
        },
      };
    },
  );
}) satisfies GetStaticPaths;

const { page, pagination, posts } = Astro.props;
const { Content } = await render(page);
const { route, translate } = useI18n(Astro.currentLocale);
const isFirstPage = pagination.currentPage === 1;
const pageLabel = translate("page.paginated.label", {
  number: pagination.currentPage,
});

const breadcrumb: ComponentProps<typeof PageLayout>["breadcrumb"] = [
  { label: translate("page.home.title"), url: route("home") },
  { label: translate("page.blog.title"), url: route("blog") },
  { label: page.data.title, url: Astro.url.href },
  ...[isFirstPage ? null : { label: pageLabel, url: Astro.url.href }],
].filter((crumb) => !!crumb);

const heading: ComponentProps<typeof PageLayout>["heading"] = isFirstPage
  ? page.data.title
  : `${page.data.title} - ${pageLabel}`;

const seo: ComponentProps<typeof PageLayout>["seo"] = {
  ...page.data.seo,
  title: isFirstPage
    ? page.data.seo.title
    : `${page.data.seo.title} - ${pageLabel}`,
};
---

<PageLayout breadcrumb={breadcrumb} heading={heading} seo={seo}>
  <Fragment slot="body">
    <Content />
    <List>
      {
        posts.map((post) => (
          <ListItem>
            <Link href={post.route}>{post.title}</Link>
          </ListItem>
        ))
      }
    </List>
    {
      pagination.lastPage > 1 ? (
        <Pagination
          aria-label={translate("pagination.a11y")}
          current={pagination.currentPage}
          last={pagination.lastPage}
          renderLink={renderPaginationLink(route("blog.posts"))}
        />
      ) : null
    }
  </Fragment>
</PageLayout>
