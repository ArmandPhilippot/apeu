---
import type { HTMLAttributes } from "astro/types";
import { MissingSlotError } from "../../../utils/exceptions";

type Props = HTMLAttributes<"details">;

const { class: className, slot, ...attrs } = Astro.props;

if (!Astro.slots.has("label")) throw new MissingSlotError("label");
---

<details {...attrs} class:list={[className, "collapsible"]}>
  <summary class="collapsible-label">
    <slot name="label" />
    <span aria-hidden="true" class="collapsible-icon"></span>
  </summary>
  <slot />
</details>

<style>
  @layer components {
    .collapsible {
      background: var(--color-regular);
      border: var(--border-size-sm) solid var(--color-border);
      color: var(--color-on-regular);
    }

    .collapsible-label {
      display: flex;
      flex-flow: row nowrap;
      padding-inline-start: var(--spacing-md);
      color: var(--color-primary-high);
      cursor: pointer;
      font-weight: var(--font-weight-bold);

      &:where(:hover, :focus) {
        color: var(--color-primary);
      }

      & > :global(*:not(.collapsible-icon)) {
        padding: var(--spacing-sm) var(--spacing-md) var(--spacing-sm) 0;
      }
    }

    :where(.collapsible:is([open])) .collapsible-label {
      border-block-end: var(--border-size-sm) solid var(--color-border);
    }

    .collapsible-icon {
      --icon-size: calc(var(--one-px-in-em) * 16);
      --icon-thickness: calc(var(--one-px-in-em) * 3);

      display: flex;
      place-content: center;
      place-items: center;
      padding: 0 var(--spacing-md);
      margin-inline-start: auto;
      aspect-ratio: 1 / 1;
      position: relative;
      border-inline-start: var(--border-size-sm) solid var(--color-border);

      &::before,
      &::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        background: currentcolor;
        transform: translate(-50%, -50%);
        transition: transform 0.2s ease-out 0s;
      }

      &::before {
        width: var(--icon-thickness);
        height: var(--icon-size);
      }

      &::after {
        width: var(--icon-size);
        height: var(--icon-thickness);
      }
    }

    :where(.collapsible:is([open])) .collapsible-icon::before {
      transform: translate(-50%, -50%) scaleY(0);
    }
  }
</style>
