---
import type { ComponentProps, HTMLAttributes } from "astro/types";
import { Code } from "astro:components";
import { shikiTheme } from "../../../lib/shiki/theme";
import { useI18n } from "../../../services/i18n";

type Props = HTMLAttributes<"figure"> &
  Pick<ComponentProps<typeof Code>, "lang" | "wrap"> & {
    code?: string | null | undefined;
    label?: string | null | undefined;
  };

const {
  class: className,
  code,
  label,
  lang = "text",
  slot,
  wrap = false,
  ...attrs
} = Astro.props;
const { translate } = useI18n(Astro.currentLocale);
const hasUseAndPreview = code && Astro.slots.has("default");
---

<figure {...attrs} class:list={[className, "code-preview"]}>
  {label ? <figcaption>{label}</figcaption> : null}
  {
    code ? (
      <div class="use">
        {hasUseAndPreview && (
          <div class="use-label">{translate("code.preview.use.label")}</div>
        )}
        {/* prettier-ignore */}
        <Code class="use-content" code={code} lang={lang} theme={shikiTheme} wrap={wrap} />
      </div>
    ) : null
  }
  {
    Astro.slots.has("default") ? (
      <div class="preview">
        {hasUseAndPreview && (
          <div class="preview-label">
            {translate("code.preview.preview.label")}
          </div>
        )}
        <div class="preview-content">
          <slot />
        </div>
      </div>
    ) : null
  }
</figure>

<style>
  .code-preview {
    border: var(--border-size-sm) solid var(--color-border);
    border-radius: var(--border-radii-md);
  }

  figcaption {
    padding: var(--spacing-xs) var(--spacing-sm);
    background: var(--color-regular-dark);
    border-block-end: var(--border-size-sm) solid var(--color-border);
  }

  .use-label,
  .preview-label {
    padding-block: var(--spacing-xs) var(--spacing-2xs);
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-bold);
  }

  .use,
  .preview {
    padding: 0 var(--spacing-sm) var(--spacing-sm);
    background: var(--color-regular-light);

    &:where(:not(:has(> .use-label, > .preview-label))) {
      padding-block-start: var(--spacing-sm);
    }
  }

  :where(.code-preview:has(.use)) .preview {
    border-block-start: var(--border-size-sm) solid var(--color-border);
  }

  .use-content,
  .preview-content {
    padding: var(--spacing-md);
    background: var(--color-regular-lighter);
    border: var(--border-size-sm) solid var(--color-border);
  }
</style>
