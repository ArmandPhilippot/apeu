---
import type { ComponentProps } from "astro/types";
import NavItem from "../../molecules/nav-item/nav-item.astro";
import NavList from "../../molecules/nav-list/nav-list.astro";

type Props = Omit<ComponentProps<typeof NavList>, "children" | "hideMarker">;

const { class: className, items, ...attrs } = Astro.props;
const isCurrentRouteOrNested = (url: string) => {
  if (url === "/") return Astro.url.pathname === url;
  const parentPath = Astro.url.pathname.split("/")[1];
  const slug = url.split("/")[1];

  return parentPath === slug;
};
---

<NavList
  {...attrs}
  class:list={["main-nav", className]}
  hideMarker
  items={items}
>
  {
    ({ label, url, ...item }) => {
      const isSelected = isCurrentRouteOrNested(url);

      return (
        <NavItem
          {...item}
          aria-current={url === Astro.url.pathname ? "page" : undefined}
          class:list={["main-nav-item", { selected: isSelected }]}
          href={url}
          isBlock
          isBordered={isSelected}
          isRounded
        >
          {label}
        </NavItem>
      );
    }
  }
</NavList>

<style>
  .main-nav {
    &:where(:not(:has(> :only-child))) {
      column-count: 2;
      column-gap: 0;
      column-rule: var(--border-size-sm) solid var(--color-border-dark);

      @media (width >= 1024px) {
        column-count: unset;
      }
    }

    & > :global(*:nth-child(odd):last-child) {
      border-block-end: var(--border-size-sm) solid var(--color-border-dark);

      @media (width >= 1024px) {
        border-block-end: none;
      }
    }

    & > :global(*:not(:first-child)) {
      @media (width >= 1024px) {
        margin-block-start: var(--spacing-2xs);
      }
    }
  }

  .main-nav-item {
    flex-flow: row wrap;
    justify-content: start;
    padding: var(--spacing-xs) var(--spacing-2xs);
    border-block-start: var(--border-size-sm) solid var(--color-border-dark);
    border-radius: 0;
    break-inside: avoid;
    font-size: var(--font-size-xs);
    outline-offset: calc(var(--border-size-md) * -1);

    &:where(.selected) {
      border-block-start-color: var(--color-primary);
    }

    @media (width >= 1024px) {
      padding-inline: clamp(var(--spacing-2xs), 1.25dvw, var(--spacing-lg));
      border-radius: var(--border-radii-md);
      outline-offset: 0;

      &:where(:not(.selected)) {
        border-block-color: transparent;
      }
    }
  }
</style>
