---
import type { ComponentProps } from "astro/types";
import Heading from "../../../components/atoms/heading/heading.astro";
import Page from "../../../components/organisms/page/page.astro";
import Layout from "../../../components/templates/layout/layout.astro";
import TokenPreview from "./_token-preview.astro";

// See `src/styles/variables/borders.css` for the available tokens.
const borders = {
  radius: ["sm", "md", "lg", "rounded"],
  sizes: ["sm", "md", "lg", "xl"],
} as const;

// See `src/styles/variables/colors.css` for the available tokens.
const colors = {
  contexts: [
    "critical",
    "discovery",
    "idea",
    "info",
    "muted",
    "primary",
    "regular",
    "success",
    "warning",
  ],
  variants: [
    "subtle",
    "lighter",
    "light",
    "default",
    "dark",
    "darker",
    "faded",
  ],
} as const;

// See `src/styles/variables/fonts.css` for the available tokens.
const fonts = {
  families: ["mono", "regular"],
  sizes: ["sm", "md", "lg", "xl", "2xl", "3xl", "4xl", "5xl"],
  weights: ["bold", "regular"],
} as const;

// See `src/styles/variables/shadows.css` for the available tokens.
const shadows = {
  elevations: ["raised", "elevated", "floating"],
  directions: {
    x: ["right", "center", "left"],
    y: ["bottom", "top"],
  },
} as const;

// See `src/styles/variables/spacings.css` for the available tokens.
const spacings = [
  "4xs",
  "3xs",
  "2xs",
  "xs",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl",
] as const;

const title = "Tokens";
const seo: ComponentProps<typeof Layout>["seo"] = {
  nofollow: true,
  noindex: true,
  title: `${title} | Design system`,
};
---

<Layout seo={seo}>
  <Page heading={title}>
    <Fragment slot="body">
      <Heading as="h2">Fonts</Heading>
      <Heading as="h3">Family</Heading>
      <div class="wrapper flex">
        {
          fonts.families.map((family) => (
            <TokenPreview isInline token={`--font-family-${family}`}>
              <p style={`font-family: var(--font-family-${family});`}>
                The quick brown fox jumps over the lazy dog
              </p>
            </TokenPreview>
          ))
        }
      </div>
      <Heading as="h3">Size</Heading>
      <div class="wrapper flex">
        {
          fonts.sizes.map((size) => (
            <TokenPreview isInline token={`--font-size-${size}`}>
              <p style={`font-size: var(--font-size-${size});`}>
                The quick brown fox jumps over the lazy dog
              </p>
            </TokenPreview>
          ))
        }
      </div>
      <Heading as="h3">Weights</Heading>
      <div class="wrapper flex">
        {
          fonts.weights.map((weight) => (
            <TokenPreview isInline token={`--font-weight-${weight}`}>
              <p style={`font-weight: var(--font-weight-${weight});`}>
                The quick brown fox jumps over the lazy dog
              </p>
            </TokenPreview>
          ))
        }
      </div>
      <Heading as="h2">Spacings</Heading>
      <div class="wrapper flex">
        {
          spacings.map((spacing) => (
            <TokenPreview isInline token={`--spacing-${spacing}`}>
              <div
                style={`display:flex;flex-flow:row nowrap;gap: var(--spacing-${spacing});`}
              >
                <div class="box" style="border-color: var(--color-border);" />
                <div class="box" style="border-color: var(--color-border);" />
              </div>
            </TokenPreview>
          ))
        }
      </div>
      <Heading as="h2">Borders</Heading>
      <Heading as="h3">Size</Heading>
      <div class="wrapper flex">
        {
          borders.sizes.map((size) => (
            <TokenPreview isInline token={`--border-size-${size}`}>
              <div
                class="box"
                style={`border-color: var(--color-border);border-width: var(--border-size-${size});`}
              />
            </TokenPreview>
          ))
        }
      </div>
      <Heading as="h3">Radius</Heading>
      <div class="wrapper flex">
        {
          borders.radius.map((radii) => (
            <TokenPreview isInline token={`--border-radii-${radii}`}>
              <div
                class="box"
                style={`border-color: var(--color-border);border-radius: var(--border-radii-${radii});`}
              />
            </TokenPreview>
          ))
        }
      </div>
      <Heading as="h2">Colors</Heading>
      <Heading as="h3">Surfaces</Heading>
      <div class="wrapper grid">
        {
          colors.contexts.map((context) => (
            <div class="wrapper flex">
              {colors.variants.map((variant) => {
                const token =
                  variant === "default"
                    ? `--color-${context}`
                    : `--color-${context}-${variant}`;
                return (
                  <TokenPreview token={token}>
                    <div class="box" style={`background: var(${token});`} />
                  </TokenPreview>
                );
              })}
            </div>
          ))
        }
      </div>
      <Heading as="h3">Texts on surfaces</Heading>
      <div class="wrapper grid">
        {
          colors.contexts.map((context) => (
            <div class="wrapper flex">
              <TokenPreview token={`--color-on-${context}`}>
                <div
                  class="box"
                  style={`background: var(--color-${context});color: var(--color-on-${context});`}
                >
                  Preview
                </div>
              </TokenPreview>
              <TokenPreview token={`--color-on-${context}-faded`}>
                <div
                  class="box"
                  style={`background: var(--color-${context}-faded);color: var(--color-on-${context}-faded);`}
                >
                  Preview
                </div>
              </TokenPreview>
              <TokenPreview token={`--color-on-${context}-subtle`}>
                <div
                  class="box"
                  style={`background: var(--color-${context}-subtle);color: var(--color-on-${context}-subtle);`}
                >
                  Preview
                </div>
              </TokenPreview>
            </div>
          ))
        }
      </div>
      <Heading as="h2">Shadows</Heading>
      <Heading as="h3">Elevation</Heading>
      <div class="wrapper flex">
        {
          shadows.elevations.map((elevation) => (
            <TokenPreview isInline token={`--shadow-${elevation}-to-top-left`}>
              <div
                class="box"
                style={`background: var(--color-regular);padding: var(--spacing-md);`}
              >
                <div
                  class="box"
                  style={`background: var(--color-regular);border-color: var(--color-border);box-shadow: var(--shadow-${elevation}-to-top-left);`}
                />
              </div>
            </TokenPreview>
          ))
        }
      </div>
      <Heading as="h3">Direction</Heading>
      {
        shadows.directions.y.map((y) => (
          <div class="wrapper grid">
            {shadows.directions.x.map((x) => (
              <TokenPreview token={`--shadow-elevated-to-${y}-${x}`}>
                <div class="box" style={`padding: var(--spacing-md);`}>
                  <div
                    class="box"
                    style={`--shadow-color: var(--color-black);background: var(--color-regular);border-color: var(--color-border);box-shadow: var(--shadow-elevated-to-${y}-${x});`}
                  />
                </div>
              </TokenPreview>
            ))}
          </div>
        ))
      }
      <Heading as="h3">Colors</Heading>
      <p>
        Ideally, I should adapt the shadow color according to the surface but I
        don't think I'll use them elsewhere than on regular background.
      </p>
    </Fragment>
  </Page>
</Layout>

<style>
  .wrapper {
    margin-block-end: var(--spacing-md);
  }

  .grid {
    display: grid;
    grid-template-columns: repeat(
      auto-fit,
      min(
        calc(100dvw - 2 * var(--spacing-md)),
        var(--col-size, calc((var(--size-prose) - var(--spacing-2xl)) / 3))
      )
    );
    gap: var(--spacing-md);
  }

  .flex {
    display: flex;
    flex-flow: column wrap;
    gap: var(--spacing-sm);
  }

  .box {
    display: flex;
    flex-flow: row wrap;
    place-items: center;
    place-content: center;
    min-width: 5rem;
    min-height: 3rem;
    padding: var(--spacing-xs);
    border: var(--border-size-sm) solid transparent;
  }
</style>
