---
import type { HTMLTag, Polymorphic } from "astro/types";
import type { Elevation } from "../../../types/tokens";

type Props<T extends HTMLTag = "div"> = Polymorphic<{ as: T }> & {
  elevation?: Elevation | null | undefined;
  isBordered?: boolean | null | undefined;
  isCentered?: boolean | null | undefined;
  isPadded?: boolean | null | undefined;
  isProse?: boolean | null | undefined;
  isRounded?: boolean | null | undefined;
  isSpaced?: boolean | null | undefined;
};

const {
  as: Tag = "div",
  class: className,
  elevation,
  isBordered = false,
  isCentered = false,
  isPadded = false,
  isProse = false,
  isRounded = false,
  isSpaced = false,
  ...attrs
} = Astro.props;
---

<Tag
  {...attrs}
  class:list={[
    "box",
    {
      bordered: isBordered,
      centered: isCentered,
      elevated: elevation === "elevated",
      floating: elevation === "floating",
      padded: isPadded,
      prose: isProse,
      raised: elevation === "raised",
      rounded: isRounded,
      spaced: isSpaced,
    },
    className,
  ]}><slot /></Tag
>

<style>
  .box {
    background: var(--color-regular);

    &:where(.prose) {
      max-width: var(--size-prose);

      & > :global(*:first-child) {
        margin-block-start: 0;
      }

      & > :global(*:last-child) {
        margin-block-end: 0;
      }
    }

    &:where(.bordered.prose) {
      border-block: var(--border-size-sm) solid var(--color-border);

      @container (width > 55em) {
        border-inline: var(--border-size-sm) solid var(--color-border);
      }
    }

    &:where(.bordered:not(.prose)) {
      border: var(--border-size-sm) solid var(--color-border);
    }

    &:where(.centered) {
      margin-inline: auto;
    }

    &:where(.prose.centered) {
      width: 100%;
    }

    &:where(.elevated.prose) {
      box-shadow: var(--shadow-elevated-to-top-center);

      @container (width > 55em) {
        box-shadow: var(--shadow-elevated-to-top-left);
      }
    }

    &:where(.elevated:not(.prose)) {
      box-shadow: var(--shadow-elevated-to-top-left);
    }

    &:where(.floating.prose) {
      box-shadow: var(--shadow-floating-to-top-center);

      @container (width > 55em) {
        box-shadow: var(--shadow-floating-to-top-left);
      }
    }

    &:where(.floating:not(.prose)) {
      box-shadow: var(--shadow-floating-to-top-left);
    }

    &:where(.prose.padded) {
      padding: clamp(var(--spacing-md), 2dvw, var(--spacing-lg))
        clamp(var(--spacing-md), 3dvw, var(--spacing-xl));
    }

    &:where(.padded:not(.prose)) {
      padding: clamp(var(--spacing-sm), 1.5dvw, var(--spacing-md));
    }

    &:where(.rounded.prose) {
      @container (width > 55em) {
        border-radius: var(--border-radii-md);
      }
    }

    &:where(.rounded:not(.prose)) {
      border-radius: var(--border-radii-md);
    }

    &:where(.raised.prose) {
      box-shadow: var(--shadow-raised-to-top-center);

      @container (width > 55em) {
        box-shadow: var(--shadow-raised-to-top-left);
      }
    }

    &:where(.raised:not(.prose)) {
      box-shadow: var(--shadow-raised-to-top-left);
    }

    &:where(.spaced) {
      margin-block: var(--spacing-md);
    }
  }
</style>
