---
import type { ComponentProps, HTMLAttributes } from "astro/types";
import { MissingSlotError } from "../../../utils/exceptions";
import Label from "../../atoms/label/label.astro";
import LabelledField from "../labelled-field/labelled-field.astro";

type Props = Omit<ComponentProps<typeof LabelledField>, "variant"> &
  Required<Pick<HTMLAttributes<"input">, "name" | "value">> & {
    fieldId: string;
    hideRadio?: boolean | null | undefined;
    isChecked?: boolean | null | undefined;
  };

const {
  class: className,
  fieldId,
  hideRadio = false,
  isChecked = false,
  name,
  value,
  ...attrs
} = Astro.props;

if (!Astro.slots.has("default")) throw new MissingSlotError("default");
---

<LabelledField
  {...attrs}
  class:list={["radio-item", { "hidden-radio": hideRadio }, className]}
  variant="inline-reversed"
>
  <input
    checked={isChecked}
    class:list={["radio-item-field", { "sr-only": hideRadio }]}
    id={fieldId}
    name={name}
    slot="field"
    type="radio"
    value={value}
  />
  <Label class="radio-item-label" for={fieldId} slot="label"><slot /></Label>
</LabelledField>

<style>
  .radio-item {
    &:where(.hidden-radio) {
      gap: 0;
      min-height: calc(var(--one-px-in-rem) * 54);
      min-width: calc(var(--one-px-in-rem) * 54);
      padding: var(--spacing-4xs) var(--spacing-2xs);
      background: var(--color-regular-dark);
      cursor: pointer;

      @media (any-pointer: fine) {
        min-width: unset;
        min-height: calc(var(--one-px-in-rem) * 48);
      }
    }

    &:where(.hidden-radio):where(:has(.radio-item-field:focus-visible)) {
      outline-offset: calc(var(--border-size-md) * -2);
    }

    &:where(.hidden-radio):where(
        :has(.radio-item-field:checked):has(.radio-item-field:focus-visible)
      ) {
      outline: var(--border-size-md) solid var(--color-primary-subtle);
    }

    &:where(.hidden-radio):where(
        :not(:has(.radio-item-field:checked)):has(
            .radio-item-field:focus-visible
          )
      ) {
      outline: var(--border-size-md) solid var(--color-primary-lighter);
    }

    &:where(.hidden-radio):where(:has(.radio-item-field:checked)) {
      background: var(--color-primary);
      box-shadow: inset 0 0 var(--border-size-lg) 0 hsl(0, 0%, 0%);
      border-color: var(--color-primary-darker);
      color: var(--color-on-primary);
    }

    &:where(.hidden-radio):where(
        :has(.radio-item-field:checked):has(
            .radio-item-field:is(:hover, :focus),
            .radio-item-label:hover
          )
      ) {
      background: var(--color-primary-dark);
    }

    &:where(.hidden-radio):where(
        :has(.radio-item-field:checked):has(
            .radio-item-field:active,
            .radio-item-label:active
          )
      ) {
      background: var(--color-primary-darker);
    }

    &:where(.hidden-radio):where(
        :has(.radio-item-field:not(:checked)):has(
            .radio-item-field:is(:hover, :focus),
            .radio-item-label:hover
          )
      ) {
      background: var(--color-regular-darker);
      box-shadow: inset 0 0 var(--border-size-lg) 0 hsla(0, 0%, 0%, 0.15);
    }

    &:where(.hidden-radio):where(
        :has(.radio-item-field:not(:checked)):has(
            .radio-item-field:active,
            .radio-item-label:active
          )
      ) {
      background: var(--color-primary);
      box-shadow: inset 0 0 var(--border-size-lg) 0 hsl(0, 0%, 0%);
      color: var(--color-on-primary);
    }
  }

  :where(.radio-item.hidden-radio) .radio-item-field {
    z-index: -1;
    opacity: 0;
  }

  :where(.radio-item.hidden-radio) :is(.radio-item-field, .radio-item-label) {
    grid-column: 1 / -1;
    place-self: stretch;
  }

  .radio-item-label {
    display: flex;
    flex-flow: row wrap;
    align-items: center;
    gap: var(--spacing-2xs);
    color: inherit;
    cursor: inherit;
  }

  :where(.radio-item.hidden-radio) .radio-item-label {
    padding-inline: var(--spacing-2xs);
    height: 100%;
  }
</style>
