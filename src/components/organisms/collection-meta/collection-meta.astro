---
import type { JSX } from "astro/jsx-runtime";
import type { ComponentProps } from "astro/types";
import type { CollectionMetaData } from "../../../types/data";
import type { IconName } from "../../../types/tokens";
import type { AllKeysOf, Blend } from "../../../types/utilities";
import {
  useI18n,
  type PluralUIKey,
  type SingularUIKey,
} from "../../../utils/i18n";
import DescriptionList from "../../atoms/description-list/description-list.astro";
import Description from "../../atoms/description-list/description.astro";
import Link from "../../atoms/link/link.astro";
import Time from "../../atoms/time/time.astro";
import CollectionMetaItem from "./collection-meta-item.astro";

type MetaData = Blend<CollectionMetaData> & {
  /**
   * The total number of entries. As string, because for accessibility it
   * should be accompanied by the collection name (e.g. `4 posts`).
   */
  total?: string | null | undefined;
};

type CollectionMetaIcon = Partial<
  Record<AllKeysOf<MetaData>, { name: IconName; size?: number | string }>
>;

type Props = ComponentProps<typeof DescriptionList> & {
  data: MetaData;
  hideLabel?: boolean | null | undefined;
  icons?: CollectionMetaIcon;
};

type LinkValue = {
  href: string;
  text: string;
};

type MetaValue = string | Date | LinkValue;

type RenderConfig<K extends AllKeysOf<MetaData>> = {
  shouldRender: (value: MetaData[K]) => value is NonNullable<MetaData[K]>;
  renderDescription?: (value: NonNullable<MetaData[K]>) => string | undefined;
  renderLabel: () =>
    | { token: SingularUIKey; isPlural?: false }
    | { token: PluralUIKey; isPlural: true };
  renderValue: (value: NonNullable<MetaData[K]>) => MetaValue[];
};

type MetaDataConfigs = {
  [K in AllKeysOf<MetaData>]: RenderConfig<K>;
};

const configs: MetaDataConfigs = {
  kind: {
    shouldRender: (value): value is NonNullable<MetaData["kind"]> => !!value,
    renderLabel: () => ({
      token: "meta.label.project.kind",
    }),
    renderValue: (value) => [`meta.value.project.kind.${value}`],
  },
  publishedOn: {
    shouldRender: (value): value is NonNullable<MetaData["publishedOn"]> =>
      !!value,
    renderLabel: () => ({
      token: "meta.label.published.on",
    }),
    renderValue: (value) => [value],
  },
  updatedOn: {
    shouldRender: (value): value is NonNullable<MetaData["updatedOn"]> =>
      !!value && value.toISOString() !== data.publishedOn?.toISOString(),
    renderLabel: () => ({
      token: "meta.label.last.update",
    }),
    renderValue: (value) => [value],
  },
  authors: {
    shouldRender: (value): value is NonNullable<MetaData["authors"]> =>
      !!value?.length,
    renderLabel: () => ({
      token: "meta.label.authors",
      isPlural: true,
    }),
    renderValue: (value) =>
      value.map(({ isWebsiteOwner, name, website }) =>
        website && !isWebsiteOwner ? { href: website, text: name } : name,
      ),
  },
  inLanguage: {
    shouldRender: (value): value is NonNullable<MetaData["inLanguage"]> =>
      !!value,
    renderLabel: () => ({
      token: "meta.label.language",
    }),
    renderValue: (value) => [translate(`language.name.${value}`)],
  },
  inLanguages: {
    shouldRender: (value): value is NonNullable<MetaData["inLanguages"]> =>
      !!value?.length,
    renderLabel: () => ({
      token: "meta.label.languages",
      isPlural: true,
    }),
    renderValue: (value) =>
      value.map((lang) => translate(`language.name.${lang}`)),
  },
  readingTime: {
    shouldRender: (value): value is NonNullable<MetaData["readingTime"]> =>
      !!value,
    renderDescription: (value) =>
      translate("meta.description.reading.time", {
        ...value.inMinutesAndSeconds,
        speed: value.wordsPerMinute,
        words: value.wordsCount,
      }),
    renderLabel: () => ({ token: "meta.label.reading.time" }),
    renderValue: (value) => [
      translatePlural("meta.value.reading.time.in.minutes", {
        count: value.inMinutes,
      }),
    ],
  },
  repository: {
    shouldRender: (value): value is NonNullable<MetaData["repository"]> =>
      !!value,
    renderLabel: () => ({
      token: "meta.label.repository",
    }),
    renderValue: ({ name, url }) => [{ href: url, text: name }],
  },
  category: {
    shouldRender: (value): value is NonNullable<MetaData["category"]> =>
      !!value,
    renderLabel: () => ({
      token: "meta.label.category",
    }),
    renderValue: (value) => [{ href: value.route, text: value.title }],
  },
  tags: {
    shouldRender: (value): value is NonNullable<MetaData["tags"]> =>
      !!value?.length,
    renderLabel: () => ({
      token: "meta.label.tags",
      isPlural: true,
    }),
    renderValue: (value) =>
      value.map((tag) => ({
        href: tag.route,
        text: tag.title,
      })),
  },
  total: {
    shouldRender: (value): value is NonNullable<MetaData["total"]> => !!value,
    renderLabel: () => ({
      token: "meta.label.total",
    }),
    renderValue: (value) => [value],
  },
} as const;

const iterateConfigs = <K extends keyof typeof configs>(
  callback: (key: K, config: RenderConfig<K>) => JSX.Element | null,
) => {
  return (Object.keys(configs) as K[]).map((key) => {
    const config = configs[key];
    return callback(key, config);
  });
};

const isMetaTranslationKey = (key: unknown): key is SingularUIKey =>
  typeof key === "string" && key.startsWith("meta.");

const { data, hideLabel = false, icons, ...attrs } = Astro.props;
const { translate, translatePlural } = useI18n(Astro.currentLocale);
---

<DescriptionList {...attrs}>
  {
    iterateConfigs(
      (key, { renderDescription, renderLabel, renderValue, shouldRender }) => {
        const value = data[key];
        if (!shouldRender(value)) return null;

        const { token, isPlural } = renderLabel();
        const contentItems = renderValue(value);

        return (
          <CollectionMetaItem
            hideLabel={hideLabel}
            icon={icons?.[key]?.name}
            iconSize={icons?.[key]?.size}
            label={
              isPlural
                ? translatePlural(token, { count: contentItems.length })
                : translate(token)
            }
          >
            {contentItems.map((item) => (
              <Description
                title={renderDescription ? renderDescription(value) : undefined}
              >
                {item instanceof Date ? (
                  <Time date={item} />
                ) : typeof item === "object" ? (
                  <Link href={item.href}>{item.text}</Link>
                ) : isMetaTranslationKey(item) ? (
                  translate(item)
                ) : (
                  item
                )}
              </Description>
            ))}
          </CollectionMetaItem>
        );
      },
    )
  }
</DescriptionList>
