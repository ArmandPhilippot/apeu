---
import type { ComponentProps } from "astro/types";
import { CONFIG } from "../../../utils/constants";
import { useI18n } from "../../../utils/i18n";
import NavItem from "../../molecules/nav-item/nav-item.astro";
import NavList from "../../molecules/nav-list/nav-list.astro";

type Props = Omit<ComponentProps<typeof NavList>, "children" | "hideMarker">;

const { class: className, items, ...attrs } = Astro.props;
const { locale, route } = useI18n(Astro.currentLocale);
const isCurrentRouteOrNested = (url: string) => {
  if (url === route("home")) return Astro.url.pathname === url;
  /* eslint-disable-next-line no-magic-numbers -- When this is not the default locale, the slug is prefixed by the locale so we need to go further. */
  const parentSlugIndex = locale === CONFIG.LANGUAGES.DEFAULT ? 1 : 2;
  const parentPath = Astro.url.pathname.split("/")[parentSlugIndex];
  const slug = url.split("/")[parentSlugIndex];

  return parentPath === slug;
};
---

<NavList
  {...attrs}
  class:list={["main-nav", className]}
  hideMarker
  items={items}
>
  {
    ({ label, url, ...item }) => {
      const isSelected = isCurrentRouteOrNested(url);

      return (
        <NavItem
          {...item}
          aria-current={url === Astro.url.pathname ? "page" : undefined}
          class="main-nav-item"
          {...(isSelected && { "data-selected": true })}
          href={url}
          isBlock
          isBordered={isSelected}
          isRounded
        >
          {label}
        </NavItem>
      );
    }
  }
</NavList>

<style>
  .main-nav {
    &:where(:not(:has(> :only-child))) {
      column-count: 2;
      column-gap: 0;
      column-rule: var(--border-size-sm) solid var(--color-border-light);

      @media (--xxs-or-above) {
        column-count: 3;
      }

      @media (--md-or-above) {
        border: var(--border-size-sm) solid var(--color-border);
        border-radius: var(--border-radii-md);
        column-count: unset;
      }
    }

    & > :global(*) {
      padding: var(--spacing-3xs);
      border-block-start: var(--border-size-sm) solid var(--color-border-light);

      @media (--md-or-above) {
        padding: 0;
        background: var(--color-regular-light);
        border-color: var(--color-border);

        &:first-child {
          border-block-start: 0;
          border-start-start-radius: inherit;
          border-start-end-radius: inherit;
        }

        &:last-child {
          border-end-start-radius: inherit;
          border-end-end-radius: inherit;
        }

        &:where(:has(> [data-selected="true"])) {
          background: transparent;
          box-shadow: inset 0 0 var(--border-size-sm) var(--border-size-sm)
            oklch(from var(--color-shadow) l c h / 50%);
        }
      }
    }

    &:where(:has(> :last-child:not(:nth-child(2n)))) > :global(*:last-child) {
      border-block-end: var(--border-size-sm) solid var(--color-border-light);

      @media (--xxs-or-above) {
        border-block-end: unset;
      }
    }

    &:where(:has(> :last-child:not(:nth-child(3n)))) > :global(*:last-child) {
      @media (--xxs-or-above) {
        border-block-end: var(--border-size-sm) solid var(--color-border-light);
      }

      @media (--md-or-above) {
        border-block-end: 0;
      }
    }
  }

  .main-nav-item {
    break-inside: avoid-column;
    outline-offset: calc(var(--border-size-md) * -1);

    @media (--xxs-or-above) {
      flex-flow: row wrap;
      justify-content: start;
      padding-inline: clamp(var(--spacing-xs), 1dvi, var(--spacing-sm));
    }

    @media (--md-or-above) {
      padding: var(--spacing-xs)
        clamp(var(--spacing-2xs), 1dvi, var(--spacing-lg));
      border: 0;
      border-radius: inherit;
      outline-offset: calc(var(--border-size-sm) * -1);
    }
  }
</style>
