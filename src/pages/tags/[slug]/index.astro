---
import type { GetStaticPaths } from "astro";
import type { ComponentProps } from "astro/types";
import Grid from "../../../components/molecules/grid/grid.astro";
import CollectionCard from "../../../components/organisms/collection-card/collection-card.astro";
import PageLayout from "../../../components/templates/page-layout/page-layout.astro";
import {
  queryCollection,
  queryCollections,
} from "../../../lib/astro/collections/query-collection";
import { useI18n } from "../../../utils/i18n";

export const getStaticPaths = (async () => {
  const { entries: tags } = await queryCollection("tags", {
    where: { locale: "en" },
  });
  return tags.map(({ slug, ...tag }) => {
    return {
      params: { slug },
      props: { ...tag },
    };
  });
}) satisfies GetStaticPaths;

const { Content, ...page } = Astro.props;
const { locale, route, translate } = useI18n(Astro.currentLocale);
const breadcrumb: ComponentProps<typeof PageLayout>["breadcrumb"] = [
  { label: translate("page.home.title"), url: route("home") },
  { label: translate("page.tags.title"), url: route("tags") },
  { label: page.title, url: Astro.url.href },
];
const { entries: relatedEntries } = await queryCollections(
  ["blogPosts", "blogroll", "bookmarks", "guides", "notes", "projects"],
  {
    format: "preview",
    orderBy: { key: "publishedOn", order: "DESC" },
    where: { locale, tags: [page.id] },
  },
);
const getCTA = (
  entry: (typeof relatedEntries)[number],
): ComponentProps<typeof CollectionCard>["cta"] => {
  switch (entry.collection) {
    case "blogPosts":
    case "guides":
    case "notes":
      return {
        ariaLabel: translate("cta.read.more.a11y", { title: entry.title }),
        label: translate("cta.read.more"),
      };
    case "blogroll":
      return {
        ariaLabel: translate("cta.open.website.a11y"),
        isExternal: true,
        label: translate("cta.open.website"),
      };
    case "bookmarks":
      return {
        ariaLabel: translate("cta.read.more.a11y", { title: entry.title }),
        isExternal: true,
        label: translate("cta.read.more"),
      };
    case "projects":
      return {
        ariaLabel: translate("cta.discover.a11y", { title: entry.title }),
        label: translate("cta.discover"),
      };
    default:
      return null;
  }
};
---

<PageLayout
  breadcrumb={breadcrumb}
  feed={`${page.route}/feed.xml`}
  heading={page.title}
  seo={page.seo}
  toc={page.headings}
>
  <Content slot="body" />
  <Grid
    class="entries-list"
    isCentered
    items={relatedEntries}
    slot="disconnected-body"
  >
    {
      (entry: (typeof relatedEntries)[number]) => (
        <CollectionCard
          cta={getCTA(entry)}
          elevation="raised"
          entry={entry}
          showCollection
        />
      )
    }
  </Grid>
</PageLayout>

<style>
  .entries-list {
    @container (width > 55em) {
      --cols: repeat(auto-fit, minmax(clamp(34rem, 18dvw, 50rem), 1fr));
    }
  }
</style>
