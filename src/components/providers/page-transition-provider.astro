---
import { useI18n } from "../../services/i18n";
import ProgressBar from "../atoms/progress-bar/progress-bar.astro";

const { translate } = useI18n(Astro.currentLocale);
---

<ProgressBar
  aria-label={translate("page.loading")}
  aria-live="polite"
  class="page-transition"
/>
<slot />

<style>
  .page-transition {
    position: fixed;
    top: 0;
    z-index: 1000;

    &:not([data-visible="true"]) {
      display: none;
    }
  }
</style>

<script>
  import {
    TRANSITION_BEFORE_PREPARATION,
    TRANSITION_PAGE_LOAD,
  } from "astro:transitions/client";

  let progressBarTimer: NodeJS.Timeout | undefined;
  const DELAY_IN_MS = 200;
  const MIN_DISPLAY_TIME_IN_MS = 500;

  const hideProgressBar = () => {
    clearTimeout(progressBarTimer);

    // Get the time the progress bar has been visible
    const showTime = Number(
      document
        .querySelector(".page-transition")
        ?.getAttribute("data-show-time") || 0
    );
    const timeVisible = Date.now() - showTime;

    // If we haven't shown it long enough, delay hiding
    if (timeVisible < MIN_DISPLAY_TIME_IN_MS) {
      setTimeout(() => {
        document
          .querySelector(".page-transition")
          ?.setAttribute("data-visible", "false");
      }, MIN_DISPLAY_TIME_IN_MS - timeVisible);
    } else {
      document
        .querySelector(".page-transition")
        ?.setAttribute("data-visible", "false");
    }
  };

  const showProgressBar = () => {
    // Only show progress after small delay to avoid flashing on fast loads
    progressBarTimer = setTimeout(() => {
      const progressBar = document.querySelector(".page-transition");
      if (progressBar) {
        progressBar.setAttribute("data-visible", "true");
        progressBar.setAttribute("data-show-time", Date.now().toString());
      }
    }, DELAY_IN_MS);
  };

  document.addEventListener(TRANSITION_BEFORE_PREPARATION, showProgressBar);
  document.addEventListener(TRANSITION_PAGE_LOAD, hideProgressBar);
</script>
