---
import type { ComponentProps } from "astro/types";
import Grid from "../../../components/molecules/grid/grid.astro";
import CollectionCard from "../../../components/organisms/collection-card/collection-card.astro";
import PageLayout from "../../../components/templates/page-layout/page-layout.astro";
import { queryCollection } from "../../../lib/astro/collections/query-collection";
import { queryEntry } from "../../../lib/astro/collections/query-entry";
import { useI18n } from "../../../utils/i18n";

const { locale, route, translate } = useI18n(Astro.currentLocale);
const { Content, ...page } = await queryEntry({
  collection: "pages",
  id: "blog/categories",
  locale,
});
const { entries: categories } = await queryCollection("blogCategories", {
  format: "preview",
  orderBy: { key: "title", order: "ASC" },
  where: { locale },
});
const breadcrumb: ComponentProps<typeof PageLayout>["breadcrumb"] = [
  { label: translate("page.home.title"), url: route("home") },
  { label: translate("page.blog.title"), url: route("blog") },
  { label: page.title, url: Astro.url.href },
];
---

<PageLayout breadcrumb={breadcrumb} heading={page.title} seo={page.seo}>
  <Content slot="body" />
  <Grid
    class="categories-list"
    isCentered
    items={categories}
    slot="disconnected-body"
  >
    {
      ({ meta, ...cat }: (typeof categories)[number]) => (
        <CollectionCard elevation="raised" entry={cat} />
      )
    }
  </Grid>
</PageLayout>

<style>
  .categories-list {
    @container (width > 55em) {
      --cols: repeat(auto-fit, minmax(27rem, auto));
    }
  }
</style>
