---
import type { ComponentProps } from "astro/types";
import type { Graph } from "schema-dts";
import { useRouting } from "../../../services/routing";
import { getJsonLdSchema } from "../../../lib/schema-dts/schema";
import { useI18n } from "../../../utils/i18n";
import { getOpenGraphImg } from "../../../utils/open-graph";
import OpenGraphMeta from "../../atoms/open-graph-meta/open-graph-meta.astro";
import TwitterMeta from "../../atoms/twitter-meta/twitter-meta.astro";
import Breadcrumb from "../../molecules/breadcrumb/breadcrumb.astro";
import Page from "../../organisms/page/page.astro";
import Layout from "../layout/layout.astro";

type Props = Pick<ComponentProps<typeof Layout>, "seo"> &
  Omit<ComponentProps<typeof Page>, "heading"> & {
    breadcrumb?: ComponentProps<typeof Breadcrumb>["items"] | null | undefined;
    description?: string | null | undefined;
    graphs?: Graph["@graph"] | null | undefined;
    title: string;
  };

const { breadcrumb, description, graphs, seo, title, ...attrs } = Astro.props;
const { locale, translate } = useI18n(Astro.currentLocale);
const { routeById } = await useRouting();
const isHome = Astro.url.pathname === routeById(`${locale}/home`);
const socialImg = await getOpenGraphImg({ locale, slug: Astro.url.pathname });
---

<Layout class="page-layout" seo={seo}>
  <Fragment slot="head">
    <OpenGraphMeta
      image={socialImg}
      locale={locale}
      title={title}
      type="article"
      url={Astro.url.href}
    >
      <slot name="open-graph" />
    </OpenGraphMeta>
    <TwitterMeta
      card="summary_large_image"
      description={description}
      image={socialImg.url}
      title={title}
    />
    {
      graphs ? (
        <script
          is:inline
          set:html={JSON.stringify(getJsonLdSchema(graphs))}
          type="application/ld+json"
        />
      ) : null
    }
    <slot name="head" />
  </Fragment>
  {
    breadcrumb?.length ? (
      <Breadcrumb
        aria-label={translate("nav.label.breadcrumb")}
        class="page-layout-breadcrumb"
        isCentered
        items={breadcrumb}
      />
    ) : null
  }
  <div class="page-layout-content">
    <main class="page-layout-main" data-pagefind-body>
      <Page
        {...attrs}
        heading={isHome ? null : title}
        transition:animate="fade"
        transition:name="page"
      >
        <slot name="meta" slot={Astro.slots.has("meta") ? "meta" : ""} />
        <slot name="body" slot={Astro.slots.has("body") ? "body" : ""} />
        <slot
          name="disconnected-body"
          slot={Astro.slots.has("disconnected-body") ? "disconnected-body" : ""}
        />
        <slot name="footer" slot={Astro.slots.has("footer") ? "footer" : ""} />
      </Page>
    </main>
    {
      Astro.slots.has("aside") ? (
        <aside class="page-aside">
          <slot name="aside" />
        </aside>
      ) : null
    }
  </div>
</Layout>

<style>
  .page-layout,
  .page-layout-content,
  .page-layout-main {
    display: flex;
    flex-flow: column;
  }

  .page-layout-breadcrumb {
    font-size: var(--font-size-sm);
  }

  .page-layout-content {
    --inset-shadow-color: oklch(from var(--color-shadow) l c h / 50%);

    flex: 1;
    padding-block-end: var(--spacing-md);
    position: relative;
    border-block: var(--border-size-sm) solid var(--color-border);
    box-shadow:
      inset 0 var(--border-size-sm) var(--border-size-sm)
        calc(var(--border-size-sm) * -1) var(--inset-shadow-color),
      inset 0 calc(var(--border-size-sm) * -1) var(--border-size-sm)
        calc(var(--border-size-sm) * -1) var(--inset-shadow-color);

    @media (--prose) {
      padding: clamp(var(--spacing-sm), 2.5dvi, var(--spacing-xl));
    }

    @media (--md-or-above) {
      margin-inline-end: 1.5dvw;
      border: var(--border-size-sm) solid var(--color-border);
      border-radius: var(--border-radii-md);
      box-shadow: inset 0 0 var(--border-size-sm) var(--border-size-sm)
        var(--inset-shadow-color);
    }

    &::before {
      content: "";
      position: absolute;
      inset: 0;
      z-index: -1;
      background: var(--color-regular-dark);
      clip-path: inset(0);
      pointer-events: none;
      user-select: none;
    }
  }

  :where(.page-layout:not(:has(.page-layout-breadcrumb))) .page-layout-content {
    @media (--md-or-above) {
      margin-block-start: 1.5dvw;
    }
  }

  .page-layout-main {
    flex: 1;
    margin-block-start: calc(var(--border-size-sm) * -1);
  }

  .page-aside {
    width: 100%;
    max-width: var(--size-prose);
    margin: var(--spacing-md) auto 0;
  }

  :global(:where([data-theme="light"])) .page-layout-content::before {
    filter: url("#paper-filter") brightness(0.985) contrast(98.5%)
      saturate(103%);
  }

  :global(:where([data-theme="dark"])) .page-layout-content::before {
    filter: url("#dark-paper-filter") brightness(0.85) contrast(103%)
      saturate(120%);
  }
</style>
