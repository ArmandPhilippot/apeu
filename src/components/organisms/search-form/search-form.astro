---
import type { JSX } from "astro/jsx-runtime";
import { Icon } from "astro-icon/components";
import { useI18n } from "../../../services/i18n";
import Button from "../../atoms/button/button.astro";
import Label from "../../atoms/label/label.astro";
import TextField from "../../atoms/text-field/text-field.astro";

type Props = JSX.HTMLAttributes & {
  /**
   * Should we hide the field label?
   *
   * @default false
   */
  hideLabel?: boolean | null | undefined;
  id: string;
  /**
   * Should the form be inlined?
   *
   * @default false
   */
  isInline?: boolean | null | undefined;
  /**
   * The parameter used to define the query in the URL.
   */
  queryParam: string;
  /**
   * The search results page route.
   */
  resultsPage: string;
};

const {
  class: className,
  hideLabel = false,
  id,
  isInline = false,
  queryParam,
  resultsPage,
  slot,
  ...attrs
} = Astro.props;

if (!resultsPage.startsWith("/")) {
  throw new Error("`resultsPage` must be a valid route starting with `/`.");
}

const { translate } = useI18n(Astro.currentLocale);
const fieldId = `${id}-field`;
/* eslint-disable-next-line no-magic-numbers -- Self-explanatory. */
const defaultIconSize = isInline ? 30 : 25;
---

<apeu-search-form
  {...attrs}
  class:list={[className, "search-form"]}
  data-query-param={queryParam}
  data-results-page={resultsPage}
  id={id}
>
  <form data-inlined={isInline}>
    <Label
      class:list={["search-form-label", { "sr-only": hideLabel }]}
      for={fieldId}
      slot="label"
    >
      {translate("form.search.label")}
    </Label>
    <TextField
      class="search-form-field"
      id={fieldId}
      name={fieldId}
      required="true"
      slot="field"
      type="search"
    />
    <Button
      class="search-form-btn"
      kind={isInline ? "neutral" : "primary"}
      type="submit"
    >
      <Icon aria-hidden="true" name="search" size={defaultIconSize} />
      <span class:list={[{ "sr-only": isInline }]}
        >{translate("form.search.btn")}</span
      >
    </Button>
  </form>
</apeu-search-form>

<style>
  @layer components {
    .search-form {
      display: flex;
      max-width: 100%;
    }

    .search-form form {
      flex: 1;
      display: grid;
      grid-template-columns: minmax(0, 1fr) var(--btn-size, 0);

      &:where([data-inlined="true"]) {
        --btn-size: calc(var(--one-px-in-rem) * 54);
      }
    }

    :where([data-inlined="true"]) .search-form-field {
      grid-column: 1 / -1;
      grid-row: 2;
      max-width: 100%;
      min-height: var(--btn-size);
      padding-inline-end: calc(var(--btn-size) + var(--spacing-sm));
    }

    :where([data-inlined="true"]) .search-form-btn {
      grid-column: 2;
      grid-row: 2;
      width: var(--btn-size);
      aspect-ratio: 1 / 1;
      padding: 0;
      background: var(--color-regular-light);
      border: var(--border-size-sm) solid var(--color-border-light);
      border-start-end-radius: var(--border-radii-lg);
      border-end-end-radius: var(--border-radii-lg);
      color: var(--color-primary);
      outline: var(--border-size-md) solid transparent;
      outline-offset: calc(var(--border-size-md) * -1);
      transition:
        box-shadow 0.1s linear 0s,
        outline 0.1s ease-in-out 0s,
        transform 0.1s linear 0s;

      &:where(:hover) {
        background: var(--color-regular-lighter);
      }

      &:where(:focus-visible) {
        outline-color: var(--color-primary);
      }

      & > :global(svg) {
        transition: transform 0.3s ease-in-out 0s;
      }

      &:where(:focus, :hover) > :global(svg) {
        transform: rotate(-12deg);
      }

      &:where(:active) > :global(svg) {
        transform: scale(0.9);
      }
    }

    :where([data-inlined="true"] .search-form-field:focus) ~ .search-form-btn {
      transform: translateY(var(--border-size-md))
        translateX(var(--border-size-md));
    }

    :where([data-inlined="true"] .search-form-field:focus-visible)
      ~ .search-form-btn {
      outline-color: var(--color-primary);
    }

    :where([data-inlined="false"]) .search-form-field {
      grid-row: 2;
    }

    :where([data-inlined="false"]) .search-form-btn {
      grid-row: 3;
      justify-self: center;
      margin-block-start: var(--spacing-sm);
    }

    .search-form-label:not(.sr-only) {
      padding-block-end: var(--spacing-xs);
    }
  }
</style>

<script>
  class APEUSearchForm extends HTMLElement {
    #query: string | null = null;
    #queryParam: string | null | undefined = null;
    #resultsPage: string | null | undefined = null;

    constructor() {
      super();
      this.handleChange = this.handleChange.bind(this);
      this.handleSubmit = this.handleSubmit.bind(this);
    }

    connectedCallback() {
      this.#queryParam = this.dataset.queryParam;
      this.#resultsPage = this.dataset.resultsPage;
      this.#query = this.getQueryFromInput();

      this.addEventListener("change", this.handleChange);
      this.addEventListener("submit", this.handleSubmit);
    }

    disconnectedCallback() {
      this.removeEventListener("change", this.handleChange);
      this.removeEventListener("submit", this.handleSubmit);
    }

    getQueryFromInput(): string {
      const input = this.querySelector("input");

      return input ? input.value : "";
    }

    /**
     * Handle an update in the input.
     *
     * @param {Event} e - The change event.
     */
    handleChange(e: Event) {
      if (!(e.target instanceof HTMLInputElement)) return;

      this.#query = e.target.value;
    }

    #getResultsRoute(query: string) {
      return `${location.origin}${this.#resultsPage}?${this.#queryParam}=${query}`;
    }

    /**
     * Handle form submit.
     *
     * @param {SubmitEvent} e - The submit event
     */
    handleSubmit(e: SubmitEvent) {
      e.preventDefault();

      if (!this.#query) return;

      window.location.assign(this.#getResultsRoute(this.#query));
    }
  }

  customElements.define("apeu-search-form", APEUSearchForm);
</script>
