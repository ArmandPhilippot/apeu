---
import type { ComponentProps } from "astro/types";
import PageFrame from "../../components/organisms/page-frame/page-frame.astro";
import SearchForm from "../../components/organisms/search-form/search-form.astro";
import Layout from "../../components/templates/layout/layout.astro";
import { getWebPageGraph } from "../../lib/schema-dts/graphs/webpage-graph";
import { getBreadcrumb } from "../../services/breadcrumb";
import type { QueriedEntry } from "../../services/collections";
import { useRouting } from "../../services/routing";
import { CONFIG } from "../../utils/constants";

type Props = Partial<ComponentProps<typeof Layout>> & {
  entry: QueriedEntry<"pages">;
};

const {
  entry: { Content, hasContent, ...page },
  ...props
} = Astro.props;
const { routeById } = await useRouting(page.locale);
const breadcrumb = await getBreadcrumb({ route: Astro.url.pathname });
const graphs: ComponentProps<typeof Layout>["graphs"] = [
  await getWebPageGraph({ ...page, breadcrumb }),
];
---

<Layout breadcrumb={breadcrumb} graphs={graphs} seo={page.seo} {...props}>
  <PageFrame headings={page.headings} title={page.title}>
    <Fragment slot="body">
      {hasContent && <Content />}
      <SearchForm
        id="not-found-search"
        queryParam={CONFIG.SEARCH.QUERY_PARAM}
        resultsPage={routeById("search").path}
      />
    </Fragment>
  </PageFrame>
</Layout>
