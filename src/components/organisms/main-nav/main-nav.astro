---
import type { ComponentProps } from "astro/types";
import NavItem from "../../molecules/nav-item/nav-item.astro";
import NavList from "../../molecules/nav-list/nav-list.astro";

type Props = Omit<ComponentProps<typeof NavList>, "children" | "hideMarker">;

const { class: className, items, ...attrs } = Astro.props;
const isCurrentRouteOrNested = (url: string) => {
  if (url === "/") return Astro.url.pathname === url;
  const parentPath = Astro.url.pathname.split("/")[1];
  const slug = url.split("/")[1];

  return parentPath === slug;
};
---

<NavList
  {...attrs}
  class:list={["main-nav", className]}
  hideMarker
  items={items}
>
  {
    ({ label, url, ...item }) => {
      const isSelected = isCurrentRouteOrNested(url);

      return (
        <NavItem
          {...item}
          aria-current={url === Astro.url.pathname ? "page" : undefined}
          class:list={["main-nav-item", { selected: isSelected }]}
          href={url}
          isBlock
          isBordered={isSelected}
          isRounded
        >
          {label}
        </NavItem>
      );
    }
  }
</NavList>

<style>
  .main-nav {
    &:where(:not(:has(> :only-child))) {
      column-count: 2;
      column-gap: 0;
      column-rule: var(--border-size-sm) solid var(--color-primary);

      @media (width >= 480px) {
        column-count: 3;
      }

      @media (width >= 1024px) {
        border: var(--border-size-sm) solid var(--color-border);
        border-radius: var(--border-radii-md);
        column-count: unset;
      }
    }

    & > :global(*) {
      padding: var(--spacing-3xs);
      border-block-start: var(--border-size-sm) solid var(--color-primary);

      &:first-child {
        @media (width >= 1024px) {
          border-block-start: 0;
        }
      }

      @media (width >= 1024px) {
        background: var(--color-regular-light);
        border-color: var(--color-border);

        &:where(:has(> *:is(.selected))) {
          background: transparent;
          box-shadow: inset 0 0 var(--border-size-sm) var(--border-size-sm)
            oklch(from var(--color-shadow) l c h / 0.5);
        }
      }
    }

    &:where(:has(> :last-child:not(:nth-child(2n)))) > :global(*:last-child) {
      @media (width < 480px) {
        border-block-end: var(--border-size-sm) solid var(--color-primary);
      }
    }

    &:where(:has(> :first-child:nth-last-child(4)))
      > :global(*:nth-last-child(2)),
    &:where(:has(> :last-child:not(:nth-child(3n)))) > :global(*:last-child) {
      @media (width >= 480px) {
        border-block-end: var(--border-size-sm) solid var(--color-primary);
      }

      @media (width >= 1024px) {
        border-block-end: 0;
      }
    }

    &::before {
      @media (width >= 1024px) {
        content: "";
        position: absolute;
        inset: 0;
        z-index: -1;
        pointer-events: none;
        user-select: none;
        background: var(--color-regular-light);
        border-radius: inherit;
        mask: linear-gradient(var(--color-regular) 0 0);
      }
    }
  }

  .main-nav-item {
    break-inside: avoid-column;
    outline-offset: calc(var(--border-size-md) * -1);

    @media (width >= 480px) {
      flex-flow: row wrap;
      justify-content: start;
      padding-inline: clamp(var(--spacing-xs), 1dvw, var(--spacing-sm));
    }

    &:where(.selected) {
      @media (width >= 1024px) {
        border: 0;
      }
    }
  }

  :global(:where([data-theme="light"])) .main-nav::before {
    @media (width >= 1024px) {
      filter: url("#paper-filter") brightness(0.985) contrast(98.5%)
        saturate(103%);
    }
  }

  :global(:where([data-theme="dark"])) .main-nav::before {
    @media (width >= 1024px) {
      filter: url("#dark-paper-filter") brightness(0.85) contrast(103%)
        saturate(120%);
    }
  }
</style>
