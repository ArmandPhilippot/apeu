---
import type { ComponentProps } from "astro/types";
import Grid from "../../components/molecules/grid/grid.astro";
import CollectionCard from "../../components/organisms/collection-card/collection-card.astro";
import PageLayout from "../../components/templates/page-layout/page-layout.astro";
import { queryCollection } from "../../lib/astro/collections/query-collection";
import { queryEntry } from "../../lib/astro/collections/query-entry";
import { useI18n } from "../../utils/i18n";

const { locale, route, translate } = useI18n(Astro.currentLocale);
const { Content, ...page } = await queryEntry({
  collection: "pages",
  id: "tags",
  locale,
});
const { entries: tags } = await queryCollection("tags", {
  format: "preview",
  orderBy: { key: "title", order: "ASC" },
  where: { locale: "en" },
});
const breadcrumb: ComponentProps<typeof PageLayout>["breadcrumb"] = [
  { label: translate("page.home.title"), url: route("home") },
  { label: page.title, url: Astro.url.href },
];
---

<PageLayout breadcrumb={breadcrumb} heading={page.title} seo={page.seo}>
  <Content slot={page.hasContent ? "body" : ""} />
  <Grid class="tags-list" isCentered items={tags} slot="disconnected-body">
    {
      ({ meta, ...tag }: (typeof tags)[number]) => (
        <CollectionCard elevation="raised" entry={tag} />
      )
    }
  </Grid>
</PageLayout>

<style>
  .tags-list {
    @container (width > calc(28em * 2)) {
      --cols: repeat(auto-fit, minmax(27rem, auto));
    }
  }
</style>
