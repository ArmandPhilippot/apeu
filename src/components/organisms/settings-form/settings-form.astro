---
import type { HTMLAttributes } from "astro/types";
import { availableNamedLanguages, useI18n } from "../../../utils/i18n";
import LanguagePicker from "../../molecules/language-picker/language-picker.astro";
import ThemeSetting from "../../molecules/theme-setting/theme-setting.astro";

type Props = HTMLAttributes<"form">;

const { class: className, id, ...attrs } = Astro.props;
const { locale, translate } = useI18n(Astro.currentLocale);
---

<form {...attrs} class:list={["settings-form", className]} id={id}>
  {
    Object.keys(availableNamedLanguages).length > 1 ? (
      <LanguagePicker
        class="settings-form-language"
        current={locale}
        id={`${id}-language-picker`}
        label={translate("form.settings.label.language")}
        languages={availableNamedLanguages}
      />
    ) : null
  }
  <ThemeSetting
    class="settings-form-theme"
    id={`${id}-theme`}
    isInline
    label={translate("form.settings.label.theme.website")}
    setting="theme"
  />
</form>

<style>
  .settings-form {
    display: flex;
    flex-flow: column;

    @media (width > 480px) {
      display: grid;
      grid-template-columns: max-content minmax(0, 1fr);
      grid-template-rows: auto;
      gap: var(--spacing-md) clamp(var(--spacing-xs), 1dvw, var(--spacing-md));
      align-items: center;
      align-content: start;
      white-space: nowrap;

      & > :global(*) {
        display: contents;
      }
    }
  }

  .settings-form-theme {
    column-gap: var(--spacing-2xs);
  }
</style>
