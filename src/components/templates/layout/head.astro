---
import { getImage, Font } from "astro:assets";
import { ClientRouter } from "astro:transitions";
import type { Graph } from "schema-dts";
import faviconPng from "../../../assets/favicon.png";
import faviconSvg from "../../../assets/logo.svg";
import { getJsonLdSchema } from "../../../lib/schema-dts/schema";
import { getCollectionsFeeds } from "../../../services/feeds";
import { useI18n } from "../../../services/i18n";
import type { SEO } from "../../../types/data";

type ColorScheme =
  | "normal"
  | "light"
  | "dark"
  | "only light"
  | "light dark"
  | "dark light";

type Props = {
  addBrandToTitle?: boolean | null | undefined;
  brand: string;
  colorScheme?: ColorScheme | null | undefined;
  graphs?: Graph["@graph"] | null | undefined;
  seo: SEO;
  themeColor?: string | null | undefined;
};

const {
  addBrandToTitle = false,
  colorScheme,
  brand,
  graphs,
  seo,
  themeColor,
} = Astro.props;
const { locale, translate } = useI18n(Astro.currentLocale);
const appleTouchIcon = await getImage({
  src: faviconPng,
  width: 180,
  height: 180,
  format: "png",
});
const icon = await getImage({ src: faviconSvg, format: "svg" });
const feeds = await getCollectionsFeeds(locale);

/* eslint-disable-next-line @eslint-community/eslint-comments/disable-enable-pair -- No need to pollute the template with an enable pair. */
/* eslint-disable astro/sort-attributes -- Sorting is fine for custom components, but I think meta are easier to read with name first. */
---

<head>
  <meta charset="utf-8" />
  <meta
    name="viewport"
    content="width=device-width, initial-scale=1.0, viewport-fit=cover"
  />
  <title>{`${seo.title}${addBrandToTitle ? ` | ${brand}` : ""}`}</title>
  <slot name="blocking" />
  <Font cssVariable="--font-inter" preload />
  <Font cssVariable="--font-cousine" preload />
  <ClientRouter fallback="swap" />
  <meta name="description" content={seo.description ?? ""} />
  <meta
    name="robots"
    content={[
      seo.noindex ? "noindex" : "index",
      seo.nofollow ? "nofollow" : "follow",
    ].join(", ")}
  />
  <link rel="canonical" href={seo.canonical ?? Astro.url.href} />
  {
    Astro.site && seo.languages
      ? seo.languages.map((language) => (
          <link
            rel="alternate"
            href={new URL(language.route, Astro.site)}
            hreflang={language.locale}
          />
        ))
      : null
  }
  {
    seo.author ? (
      <>
        <meta name="author" content={seo.author.name} />
        <link rel="author" href={seo.author.website} />
      </>
    ) : (
      <>
        <meta name="author" content={brand} />
        {Astro.site ? <link rel="author" href={Astro.site.href} /> : null}
      </>
    )
  }
  {colorScheme ? <meta name="color-scheme" content={colorScheme} /> : null}
  {themeColor ? <meta name="theme-color" content={themeColor} /> : null}
  <link rel="icon" href="/favicon.ico" sizes="32x32" />
  <link rel="icon" href={icon.src} type="image/svg+xml" />
  <link rel="apple-touch-icon" href={appleTouchIcon.src} />
  <link rel="manifest" href="/manifest.json" />
  <link rel="sitemap" href="/sitemap-index.xml" />
  {
    Astro.site ? (
      <Fragment>
        <link
          rel="alternate"
          href={new URL("./feed.xml", Astro.site)}
          title={translate("feed.website.link.title")}
          type="application/rss+xml"
        />
        {feeds.map((feed) => (
          <link
            rel="alternate"
            href={new URL(feed.path, Astro.site)}
            title={feed.label}
            type="application/rss+xml"
          />
        ))}
      </Fragment>
    ) : null
  }
  {
    graphs ? (
      <script
        type="application/ld+json"
        is:inline
        set:html={JSON.stringify(getJsonLdSchema(graphs))}
      />
    ) : null
  }
  <slot />
</head>
