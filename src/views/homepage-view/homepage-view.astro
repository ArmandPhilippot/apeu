---
import type { ComponentProps } from "astro/types";
import { Icon } from "astro-icon/components";
import logo from "../../assets/logo.svg";
import {
  queryCollection,
  queryEntry,
  type QueriedEntry,
} from "../../services/collections";
import { useRouting } from "../../services/routing";
import { useI18n } from "../../utils/i18n";
import PageLayout from "../../components/templates/page-layout/page-layout.astro";
import { getPersonGraph } from "../../lib/schema-dts/graphs/person-graph";
import { getWebSiteGraph } from "../../lib/schema-dts/graphs/website-graph";
import { getWebPageGraph } from "../../lib/schema-dts/graphs/webpage-graph";
import Greetings from "../../components/molecules/greetings/greetings.astro";
import IdentityCard from "../../components/organisms/identity-card/identity-card.astro";
import Heading from "../../components/atoms/heading/heading.astro";
import ContactCard from "../../components/organisms/contact-card/contact-card.astro";
import Box from "../../components/atoms/box/box.astro";
import { components } from "../../components/mdx";
import Button from "../../components/atoms/button/button.astro";
import CardsList from "../../components/molecules/cards-list/cards-list.astro";
import CollectionCard from "../../components/organisms/collection-card/collection-card.astro";

type Props = Partial<ComponentProps<typeof PageLayout>> & {
  entry: QueriedEntry<"pages">;
};

const {
  entry: { Content, hasContent, ...page },
  ...props
} = Astro.props;
const { translate } = useI18n(Astro.currentLocale);
const { routeById } = await useRouting();
const author = await queryEntry({
  collection: "authors",
  id: "armand-philippot",
});
const { entries: collections } = await queryCollection(
  ["index.pages", "pages"],
  {
    orderBy: { key: "title", order: "ASC" },
    where: {
      ids: [
        `${page.locale}/blog`,
        `${page.locale}/blogroll`,
        `${page.locale}/bookmarks`,
        `${page.locale}/contributions`,
        `${page.locale}/guides`,
        `${page.locale}/notes`,
        `${page.locale}/projects`,
        `${page.locale}/tags`,
      ],
      locale: page.locale,
    },
  }
);
const graphs: ComponentProps<typeof PageLayout>["graphs"] = [
  await getPersonGraph(author, page.locale),
  await getWebSiteGraph({
    description: page.seo.description ?? page.description,
    locale: page.locale,
    logo: logo.src,
  }),
  await getWebPageGraph({
    ...page,
    title: page.seo.title,
  }),
];
---

<PageLayout
  class="homepage"
  description={page.description}
  graphs={graphs}
  seo={page.seo}
  title={page.title}
  {...props}
>
  <Fragment slot="disconnected-body">
    <Greetings class="homepage-greetings" name={author.name} />
    {
      author ? (
        <Fragment>
          <IdentityCard
            as="section"
            author={{
              ...author,
              avatar: author.avatar
                ? { ...author.avatar, loading: "eager" }
                : null,
            }}
            class="homepage-about"
            elevation="raised"
            isSpaced
          >
            <Heading slot="heading">
              {translate("page.home.section.about.heading")}
            </Heading>
          </IdentityCard>
          <ContactCard
            addRelMe
            as="section"
            class="homepage-contact"
            contactPageRoute={routeById("fr/contact")}
            elevation="raised"
            isSpaced
            socialMedia={author.socialMedia}
          >
            <Heading slot="heading">
              {translate("page.home.section.contact.heading")}
            </Heading>
          </ContactCard>
        </Fragment>
      ) : null
    }
    {
      hasContent ? (
        <Box
          as="section"
          class="homepage-content"
          elevation="raised"
          isBordered
          isCentered
          isPadded
          isProse
          isRounded
          isSpaced
        >
          <Content components={components} />
        </Box>
      ) : null
    }
    {
      collections?.length ? (
        <section class="homepage-collections">
          <Box
            class="homepage-collections-heading"
            elevation="raised"
            isBordered
            isCentered
            isPadded
            isProse
            isRounded
          >
            <Heading as="h2">
              {translate("page.home.section.collections.heading")}
            </Heading>
            <Button
              aria-label={translate("cta.subscribe.to.website")}
              as="a"
              href={`${page.route}feed.xml`}
            >
              <Icon aria-hidden="true" name="feed" />
              {translate("cta.subscribe")}
            </Button>
          </Box>
          <CardsList
            isContainer
            items={collections}
            sizeMinCols="clamp(26rem,20dvi,30rem)"
          >
            {({ meta: _meta, ...collection }: (typeof collections)[number]) => (
              <CollectionCard
                class="homepage-collection"
                elevation="raised"
                entry={collection}
                headingLvl="h3"
              />
            )}
          </CardsList>
        </section>
      ) : null
    }
  </Fragment>
</PageLayout>

<style>
  /* We need to increase specificity because of inconsistencies between
   * dev/build modes. */
  article.homepage {
    @container (width > 55em) {
      display: grid;
      grid-template-columns: repeat(2, minmax(0, auto));
      gap: var(--spacing-md);

      & > :global(*:not(.homepage-greetings)) {
        margin-block: 0;
      }
    }

    @container (width > 82em) {
      &:where(:has(.homepage-content)) {
        grid-template-columns: repeat(2, minmax(0.5fr, 1fr)) minmax(
            0,
            var(--size-prose)
          );
      }
    }

    &:where(:not(:has(.homepage-content)))
      > :global(
        *:where(:not(.homepage-about, .homepage-contact, .homepage-content))
      ) {
      @container (width > 55em) {
        grid-column: 1 / -1;
      }
    }

    &:where(:has(.homepage-content))
      > :global(
        *:where(:not(.homepage-about, .homepage-contact, .homepage-content))
      ) {
      @container (width > 55em) {
        grid-column: 1 / span 2;
      }

      @container (width > 82em) {
        grid-column: 1 / span 3;
      }
    }
  }

  .homepage-greetings {
    margin: clamp(var(--spacing-md), 5dvh, var(--spacing-lg)) auto;
  }

  .homepage-about {
    @container (width > 55em) {
      grid-column: 1;
    }
  }

  .homepage-contact {
    @container (width > 55em) {
      border-inline-start: var(--border-size-sm) solid var(--color-border);
      grid-column: 2;
    }
  }

  .homepage-content {
    @container (width > 55em) {
      grid-column: 1 / -1;
    }

    @container (width > 82em) {
      grid-column: 3;
    }
  }

  .homepage-collections-heading {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm) var(--spacing-md);
  }

  .homepage-collection {
    /* TODO: avoid magic numbers... */
    @container body (width >= 49.6em) {
      border: var(--border-size-sm) solid var(--color-border);
    }
  }
</style>
