---
import type { HTMLTag, Polymorphic } from "astro/types";

type Props<T extends Extract<HTMLTag, "ol" | "ul"> = "ul"> = Polymorphic<{
  as: T;
}> & {
  hideMarker?: boolean | null | undefined;
  isInline?: boolean | null | undefined;
};

const {
  as: Tag = "ul",
  class: className,
  hideMarker = false,
  isInline = false,
  slot,
  ...attrs
} = Astro.props;
---

<Tag
  {...attrs}
  class:list={["list", className]}
  {...isInline && { "data-inline": true }}
  {...hideMarker && { "data-marker": false }}><slot /></Tag
>

<style>
  .list {
    margin: 0;

    &:where([data-inline="true"]) {
      display: flex;
      flex-flow: row wrap;
      align-items: center;
      list-style-position: inside;
    }

    &:where([data-marker="false"]) {
      list-style-type: none;
    }

    &:where([data-inline="true"], [data-marker="false"]) {
      padding-inline-start: 0;
    }

    &:where(:not([data-inline="true"], [data-marker="false"])) {
      padding-inline-start: var(--spacing-md);
    }
  }
</style>
