---
import type { HTMLAttributes } from "astro/types";
import { useI18n } from "../../../services/i18n";
import { useRouting } from "../../../services/routing";
import type { AltLanguage, Route } from "../../../types/data";
import { LOCALE_DISPLAY_NAMES } from "../../../utils/constants";
import { isAvailableLocale } from "../../../utils/type-guards";
import LanguageSelect from "../../molecules/language-select/language-select.astro";
import ThemeSelect from "../../molecules/theme-select/theme-select.astro";

type Props = HTMLAttributes<"form"> & {
  altLanguages?: AltLanguage[] | null | undefined;
};

const { altLanguages, class: className, id, ...attrs } = Astro.props;
const { locale, translate } = useI18n(Astro.currentLocale);
const { routeById } = await useRouting(locale);
const languages = Object.fromEntries(
  Object.entries(LOCALE_DISPLAY_NAMES)
    .map(([lang, langName]): [string, Route] | null => {
      if (!isAvailableLocale(lang)) return null;

      return [
        lang,
        {
          label: langName,
          path:
            lang === locale
              ? Astro.url.pathname
              : (altLanguages?.find((altLang) => altLang.locale === lang)
                  ?.route ?? routeById("home", lang).path),
        },
      ];
    })
    .filter((language) => language !== null)
);
---

<form {...attrs} class:list={[className, "settings-form"]} id={id}>
  <fieldset>
    <legend>{translate("form.settings.label")}</legend>
    {
      Object.keys(languages).length > 1 ? (
        <LanguageSelect
          class="settings-form-language"
          current={locale}
          hideLabel
          label={translate("form.settings.label.language")}
          languages={languages}
          showIcon
        />
      ) : null
    }
    <ThemeSelect
      class="settings-form-theme"
      current="auto"
      hideLabel
      label={translate("form.settings.label.theme.website")}
      setting="theme"
      showIcon
      themes={{
        auto: translate("theme.label.auto"),
        dark: translate("theme.label.dark"),
        light: translate("theme.label.light"),
      }}
    />
    <ThemeSelect
      class="settings-form-theme"
      current="auto"
      hideLabel
      label={translate("form.settings.label.theme.shiki")}
      setting="shiki"
      showIcon
      themes={{
        auto: translate("theme.label.auto"),
        dark: translate("theme.label.dark"),
        light: translate("theme.label.light"),
      }}
    />
  </fieldset>
</form>

<style>
  @layer components {
    .settings-form fieldset {
      display: flex;
      flex-flow: column;
      gap: var(--spacing-xs);
      margin-inline: 0;
      padding-inline: 0;
      border: none;
    }

    .settings-form legend {
      margin-block-end: var(--spacing-3xs);
    }

    .settings-form-language,
    .settings-form-theme {
      flex: 1;

      & :global(label) {
        flex: 1;
      }
    }
  }
</style>
