---
import type { HTMLAttributes } from "astro/types";
import type { AltLanguage } from "../../../types/data";
import { availableNamedLanguages, useI18n } from "../../../utils/i18n";
import LanguagePicker from "../../molecules/language-picker/language-picker.astro";
import ThemeSetting from "../../molecules/theme-setting/theme-setting.astro";

type Props = HTMLAttributes<"form"> & {
  altLanguages?: AltLanguage[] | null | undefined;
};

const { altLanguages, class: className, id, ...attrs } = Astro.props;
const { locale, route, translate } = useI18n(Astro.currentLocale);
const languages = Object.fromEntries(
  Object.entries(availableNamedLanguages).map(([lang, langName]) => {
    return [
      lang,
      {
        name: langName,
        route:
          altLanguages?.find((altLang) => altLang.locale === lang)?.route ??
          route("home", lang),
      },
    ];
  }),
);
---

<form {...attrs} class:list={["settings-form", className]} id={id}>
  {
    Object.keys(languages).length > 1 ? (
      <LanguagePicker
        class="settings-form-language"
        current={locale}
        id={`${id}-language-picker`}
        label={translate("form.settings.label.language")}
        languages={languages}
      />
    ) : null
  }
  <ThemeSetting
    class="settings-form-theme"
    id={`${id}-theme`}
    isInline
    label={translate("form.settings.label.theme.website")}
    setting="theme"
  />
  <ThemeSetting
    class="settings-form-theme"
    id={`${id}-shiki`}
    isInline
    label={translate("form.settings.label.theme.shiki")}
    setting="shiki"
  />
</form>

<style>
  .settings-form {
    @media (width >= 480px) {
      width: fit-content;
      display: grid;
      grid-template-columns: max-content minmax(0, 1fr);
      grid-template-rows: auto;
      align-items: center;
      justify-items: end;
      gap: var(--spacing-sm);
    }
  }

  .settings-form-language,
  .settings-form-theme,
  .settings-form-theme > :global(*) {
    @media (width >= 480px) {
      display: contents;
    }
  }

  .settings-form-language,
  .settings-form-theme > :global(*) {
    flex-flow: column;
  }
</style>
